{"ast":null,"code":"import React, { createContext, useContext } from 'react';\nimport RouterLinkProvider from './router-link-provider';\nimport ThemeProvider from './theme-provider';\nvar InsideAppProviderContext = /*#__PURE__*/createContext(false);\n/**\n * __App provider__\n *\n * An app provider provides app level configuration such as global theming.\n *\n * Place it at the root of your application.\n */\nexport function AppProvider(_ref) {\n  var children = _ref.children,\n    _ref$defaultColorMode = _ref.defaultColorMode,\n    defaultColorMode = _ref$defaultColorMode === void 0 ? 'light' : _ref$defaultColorMode,\n    defaultTheme = _ref.defaultTheme,\n    routerLinkComponent = _ref.routerLinkComponent;\n  var isInsideAppProvider = useContext(InsideAppProviderContext);\n  if (isInsideAppProvider) {\n    throw new Error('App provider should not be nested within another app provider.');\n  }\n  return /*#__PURE__*/React.createElement(InsideAppProviderContext.Provider, {\n    value: true\n  }, /*#__PURE__*/React.createElement(ThemeProvider, {\n    defaultColorMode: defaultColorMode,\n    defaultTheme: defaultTheme\n  }, /*#__PURE__*/React.createElement(RouterLinkProvider, {\n    routerLinkComponent: routerLinkComponent\n  }, children)));\n}\nexport default AppProvider;","map":{"version":3,"names":["React","createContext","useContext","RouterLinkProvider","ThemeProvider","InsideAppProviderContext","AppProvider","_ref","children","_ref$defaultColorMode","defaultColorMode","defaultTheme","routerLinkComponent","isInsideAppProvider","Error","createElement","Provider","value"],"sources":["/home/enterpi/Documents/iidm/pixel-kit/node_modules/@atlaskit/app-provider/dist/esm/app-provider.js"],"sourcesContent":["import React, { createContext, useContext } from 'react';\nimport RouterLinkProvider from './router-link-provider';\nimport ThemeProvider from './theme-provider';\nvar InsideAppProviderContext = /*#__PURE__*/createContext(false);\n/**\n * __App provider__\n *\n * An app provider provides app level configuration such as global theming.\n *\n * Place it at the root of your application.\n */\nexport function AppProvider(_ref) {\n  var children = _ref.children,\n    _ref$defaultColorMode = _ref.defaultColorMode,\n    defaultColorMode = _ref$defaultColorMode === void 0 ? 'light' : _ref$defaultColorMode,\n    defaultTheme = _ref.defaultTheme,\n    routerLinkComponent = _ref.routerLinkComponent;\n  var isInsideAppProvider = useContext(InsideAppProviderContext);\n  if (isInsideAppProvider) {\n    throw new Error('App provider should not be nested within another app provider.');\n  }\n  return /*#__PURE__*/React.createElement(InsideAppProviderContext.Provider, {\n    value: true\n  }, /*#__PURE__*/React.createElement(ThemeProvider, {\n    defaultColorMode: defaultColorMode,\n    defaultTheme: defaultTheme\n  }, /*#__PURE__*/React.createElement(RouterLinkProvider, {\n    routerLinkComponent: routerLinkComponent\n  }, children)));\n}\nexport default AppProvider;"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,QAAQ,OAAO;AACxD,OAAOC,kBAAkB,MAAM,wBAAwB;AACvD,OAAOC,aAAa,MAAM,kBAAkB;AAC5C,IAAIC,wBAAwB,GAAG,aAAaJ,aAAa,CAAC,KAAK,CAAC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,WAAWA,CAACC,IAAI,EAAE;EAChC,IAAIC,QAAQ,GAAGD,IAAI,CAACC,QAAQ;IAC1BC,qBAAqB,GAAGF,IAAI,CAACG,gBAAgB;IAC7CA,gBAAgB,GAAGD,qBAAqB,KAAK,KAAK,CAAC,GAAG,OAAO,GAAGA,qBAAqB;IACrFE,YAAY,GAAGJ,IAAI,CAACI,YAAY;IAChCC,mBAAmB,GAAGL,IAAI,CAACK,mBAAmB;EAChD,IAAIC,mBAAmB,GAAGX,UAAU,CAACG,wBAAwB,CAAC;EAC9D,IAAIQ,mBAAmB,EAAE;IACvB,MAAM,IAAIC,KAAK,CAAC,gEAAgE,CAAC;EACnF;EACA,OAAO,aAAad,KAAK,CAACe,aAAa,CAACV,wBAAwB,CAACW,QAAQ,EAAE;IACzEC,KAAK,EAAE;EACT,CAAC,EAAE,aAAajB,KAAK,CAACe,aAAa,CAACX,aAAa,EAAE;IACjDM,gBAAgB,EAAEA,gBAAgB;IAClCC,YAAY,EAAEA;EAChB,CAAC,EAAE,aAAaX,KAAK,CAACe,aAAa,CAACZ,kBAAkB,EAAE;IACtDS,mBAAmB,EAAEA;EACvB,CAAC,EAAEJ,QAAQ,CAAC,CAAC,CAAC;AAChB;AACA,eAAeF,WAAW"},"metadata":{},"sourceType":"module"}