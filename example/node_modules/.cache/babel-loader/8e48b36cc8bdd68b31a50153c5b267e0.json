{"ast":null,"code":"/**\n * This file contains the source of truth for themes and all associated meta data.\n */\n\n/**\n * Themes: The internal identifier of a theme.\n * These ids are what the actual theme files/folders are called.\n * style-dictionary will attempt to locate these in the file-system.\n */\n\n/**\n * ThemeOverrides: The internal identifier of a theme override. Which are themes that contain\n * a subset of tokens intended to override an existing theme. These ids are what the actual\n * theme files/folders are called. style-dictionary will attempt to locate these in the file-system.\n * Theme overrides are temporary and there may not be any defined at times.\n */\n\n/**\n * Theme kinds: The type of theme.\n * Some themes are entirely focused on Color, whilst others are purely focused on spacing.\n * In the future other types may be introduced such as typography.\n */\n\n/**\n * Theme modes: The general purpose of a theme.\n * This attr is used to apply the appropriate system-preference option\n * It may also be used as a selector for mode-specific overrides such as light/dark images.\n * The idea is there may exist many color themes, but every theme must either fit into light or dark.\n */\nexport var themeColorModes = ['light', 'dark', 'auto'];\n/**\n * Contrast preferences: The system contrast preference\n */\nexport var themeContrastModes = ['more', 'no-preference', 'auto'];\n/**\n * Theme ids: The value that will be mounted to the DOM as a data attr\n * For example: `data-theme=\"light:light dark:dark spacing:spacing\"\n *\n * These ids must be kebab case\n */\nexport var themeIds = ['light-increased-contrast', 'light', 'dark', 'dark-increased-contrast', 'legacy-light', 'legacy-dark', 'spacing', 'typography', 'shape', 'typography-adg3', 'typography-minor3'];\n/**\n * Theme override ids: the equivalent of themeIds for theme overrides.\n * Theme overrides are temporary and there may not be any defined at times.\n */\nexport var themeOverrideIds = ['light-new-input-border', 'dark-new-input-border'];\nexport var themeIdsWithOverrides = [].concat(themeIds, themeOverrideIds);\n\n/**\n * Theme to use a base. This will create the theme as\n * an extension with all token values marked as optional\n * to allow tokens to be overridden as required.\n */\n\n/**\n * Palettes: The set of base tokens a given theme may be populated with.\n * For example: legacy light & dark themes use the \"legacyPalette\" containing colors from our\n * previous color set.\n */\n\n/**\n * ThemeConfig: the source of truth for all theme meta-data.\n * This object should be used whenever interfacing with themes.\n */\n\nvar themeConfig = {\n  'atlassian-light': {\n    id: 'light',\n    displayName: 'Light Theme',\n    palette: 'defaultPalette',\n    attributes: {\n      type: 'color',\n      mode: 'light'\n    }\n  },\n  'atlassian-light-increased-contrast': {\n    id: 'light-increased-contrast',\n    displayName: 'Light Theme (increased contrast)',\n    palette: 'defaultPalette',\n    attributes: {\n      type: 'color',\n      mode: 'light'\n    },\n    extends: 'light',\n    increasesContrastFor: 'light'\n  },\n  'atlassian-dark': {\n    id: 'dark',\n    displayName: 'Dark Theme',\n    palette: 'defaultPalette',\n    attributes: {\n      type: 'color',\n      mode: 'dark'\n    }\n  },\n  'atlassian-dark-increased-contrast': {\n    id: 'dark-increased-contrast',\n    displayName: 'Dark Theme (increased contrast)',\n    palette: 'defaultPalette',\n    attributes: {\n      type: 'color',\n      mode: 'dark'\n    },\n    extends: 'dark',\n    increasesContrastFor: 'dark'\n  },\n  'atlassian-legacy-light': {\n    id: 'legacy-light',\n    displayName: 'Light Theme (legacy)',\n    palette: 'legacyPalette',\n    attributes: {\n      type: 'color',\n      mode: 'light'\n    }\n  },\n  'atlassian-legacy-dark': {\n    id: 'legacy-dark',\n    displayName: 'Dark Theme (legacy)',\n    palette: 'legacyPalette',\n    attributes: {\n      type: 'color',\n      mode: 'dark'\n    }\n  },\n  'atlassian-spacing': {\n    id: 'spacing',\n    displayName: 'Atlassian Spacing',\n    palette: 'spacingScale',\n    attributes: {\n      type: 'spacing'\n    }\n  },\n  'atlassian-typography-adg3': {\n    id: 'typography-adg3',\n    displayName: 'ADG3 Typography',\n    palette: 'typographyPalette',\n    attributes: {\n      type: 'typography'\n    }\n  },\n  'atlassian-shape': {\n    id: 'shape',\n    displayName: 'Atlassian Shape',\n    palette: 'shapePalette',\n    attributes: {\n      type: 'shape'\n    }\n  },\n  'atlassian-light-new-input-border': {\n    id: 'light-new-input-border',\n    displayName: 'Light Theme New Input Border',\n    palette: 'defaultPalette',\n    override: 'light',\n    attributes: {\n      type: 'color',\n      mode: 'light'\n    }\n  },\n  'atlassian-dark-new-input-border': {\n    id: 'dark-new-input-border',\n    displayName: 'Dark Theme New Input Border',\n    palette: 'defaultPalette',\n    override: 'dark',\n    attributes: {\n      type: 'color',\n      mode: 'dark'\n    }\n  },\n  'atlassian-typography': {\n    id: 'typography',\n    displayName: 'Atlassian Typography (Minor Second)',\n    palette: 'typographyPalette',\n    attributes: {\n      type: 'typography'\n    }\n  },\n  'atlassian-typography-minor3': {\n    id: 'typography-minor3',\n    displayName: 'Atlassian Typography (Minor Third)',\n    palette: 'typographyPalette',\n    attributes: {\n      type: 'typography'\n    }\n  }\n};\n\n/**\n * ThemeOptionsSchema: additional configuration options used to customize Atlassian's themes\n */\n\n/**\n * ThemeState: the standard representation of an app's current theme and preferences\n */\n\n/**\n * themeStateDefaults: the default values for ThemeState used by theming utilities\n */\nexport var themeStateDefaults = {\n  colorMode: 'auto',\n  contrastMode: 'auto',\n  dark: 'dark',\n  light: 'light',\n  shape: undefined,\n  spacing: 'spacing',\n  typography: undefined,\n  UNSAFE_themeOptions: undefined\n};\n\n/**\n * Represents theme state once mounted to the page\n * (the page doesn't have an \"auto\" color mode, it's either light or dark)\n */\n\nexport default themeConfig;","map":{"version":3,"names":["themeColorModes","themeContrastModes","themeIds","themeOverrideIds","themeIdsWithOverrides","concat","themeConfig","id","displayName","palette","attributes","type","mode","extends","increasesContrastFor","override","themeStateDefaults","colorMode","contrastMode","dark","light","shape","undefined","spacing","typography","UNSAFE_themeOptions"],"sources":["/home/enterpi/Documents/iidm/pixel-kit/node_modules/@atlaskit/popup/node_modules/@atlaskit/tokens/dist/esm/theme-config.js"],"sourcesContent":["/**\n * This file contains the source of truth for themes and all associated meta data.\n */\n\n/**\n * Themes: The internal identifier of a theme.\n * These ids are what the actual theme files/folders are called.\n * style-dictionary will attempt to locate these in the file-system.\n */\n\n/**\n * ThemeOverrides: The internal identifier of a theme override. Which are themes that contain\n * a subset of tokens intended to override an existing theme. These ids are what the actual\n * theme files/folders are called. style-dictionary will attempt to locate these in the file-system.\n * Theme overrides are temporary and there may not be any defined at times.\n */\n\n/**\n * Theme kinds: The type of theme.\n * Some themes are entirely focused on Color, whilst others are purely focused on spacing.\n * In the future other types may be introduced such as typography.\n */\n\n/**\n * Theme modes: The general purpose of a theme.\n * This attr is used to apply the appropriate system-preference option\n * It may also be used as a selector for mode-specific overrides such as light/dark images.\n * The idea is there may exist many color themes, but every theme must either fit into light or dark.\n */\nexport var themeColorModes = ['light', 'dark', 'auto'];\n/**\n * Contrast preferences: The system contrast preference\n */\nexport var themeContrastModes = ['more', 'no-preference', 'auto'];\n/**\n * Theme ids: The value that will be mounted to the DOM as a data attr\n * For example: `data-theme=\"light:light dark:dark spacing:spacing\"\n *\n * These ids must be kebab case\n */\nexport var themeIds = ['light-increased-contrast', 'light', 'dark', 'dark-increased-contrast', 'legacy-light', 'legacy-dark', 'spacing', 'typography', 'shape', 'typography-adg3', 'typography-minor3'];\n/**\n * Theme override ids: the equivalent of themeIds for theme overrides.\n * Theme overrides are temporary and there may not be any defined at times.\n */\nexport var themeOverrideIds = ['light-new-input-border', 'dark-new-input-border'];\nexport var themeIdsWithOverrides = [].concat(themeIds, themeOverrideIds);\n\n/**\n * Theme to use a base. This will create the theme as\n * an extension with all token values marked as optional\n * to allow tokens to be overridden as required.\n */\n\n/**\n * Palettes: The set of base tokens a given theme may be populated with.\n * For example: legacy light & dark themes use the \"legacyPalette\" containing colors from our\n * previous color set.\n */\n\n/**\n * ThemeConfig: the source of truth for all theme meta-data.\n * This object should be used whenever interfacing with themes.\n */\n\nvar themeConfig = {\n  'atlassian-light': {\n    id: 'light',\n    displayName: 'Light Theme',\n    palette: 'defaultPalette',\n    attributes: {\n      type: 'color',\n      mode: 'light'\n    }\n  },\n  'atlassian-light-increased-contrast': {\n    id: 'light-increased-contrast',\n    displayName: 'Light Theme (increased contrast)',\n    palette: 'defaultPalette',\n    attributes: {\n      type: 'color',\n      mode: 'light'\n    },\n    extends: 'light',\n    increasesContrastFor: 'light'\n  },\n  'atlassian-dark': {\n    id: 'dark',\n    displayName: 'Dark Theme',\n    palette: 'defaultPalette',\n    attributes: {\n      type: 'color',\n      mode: 'dark'\n    }\n  },\n  'atlassian-dark-increased-contrast': {\n    id: 'dark-increased-contrast',\n    displayName: 'Dark Theme (increased contrast)',\n    palette: 'defaultPalette',\n    attributes: {\n      type: 'color',\n      mode: 'dark'\n    },\n    extends: 'dark',\n    increasesContrastFor: 'dark'\n  },\n  'atlassian-legacy-light': {\n    id: 'legacy-light',\n    displayName: 'Light Theme (legacy)',\n    palette: 'legacyPalette',\n    attributes: {\n      type: 'color',\n      mode: 'light'\n    }\n  },\n  'atlassian-legacy-dark': {\n    id: 'legacy-dark',\n    displayName: 'Dark Theme (legacy)',\n    palette: 'legacyPalette',\n    attributes: {\n      type: 'color',\n      mode: 'dark'\n    }\n  },\n  'atlassian-spacing': {\n    id: 'spacing',\n    displayName: 'Atlassian Spacing',\n    palette: 'spacingScale',\n    attributes: {\n      type: 'spacing'\n    }\n  },\n  'atlassian-typography-adg3': {\n    id: 'typography-adg3',\n    displayName: 'ADG3 Typography',\n    palette: 'typographyPalette',\n    attributes: {\n      type: 'typography'\n    }\n  },\n  'atlassian-shape': {\n    id: 'shape',\n    displayName: 'Atlassian Shape',\n    palette: 'shapePalette',\n    attributes: {\n      type: 'shape'\n    }\n  },\n  'atlassian-light-new-input-border': {\n    id: 'light-new-input-border',\n    displayName: 'Light Theme New Input Border',\n    palette: 'defaultPalette',\n    override: 'light',\n    attributes: {\n      type: 'color',\n      mode: 'light'\n    }\n  },\n  'atlassian-dark-new-input-border': {\n    id: 'dark-new-input-border',\n    displayName: 'Dark Theme New Input Border',\n    palette: 'defaultPalette',\n    override: 'dark',\n    attributes: {\n      type: 'color',\n      mode: 'dark'\n    }\n  },\n  'atlassian-typography': {\n    id: 'typography',\n    displayName: 'Atlassian Typography (Minor Second)',\n    palette: 'typographyPalette',\n    attributes: {\n      type: 'typography'\n    }\n  },\n  'atlassian-typography-minor3': {\n    id: 'typography-minor3',\n    displayName: 'Atlassian Typography (Minor Third)',\n    palette: 'typographyPalette',\n    attributes: {\n      type: 'typography'\n    }\n  }\n};\n\n/**\n * ThemeOptionsSchema: additional configuration options used to customize Atlassian's themes\n */\n\n/**\n * ThemeState: the standard representation of an app's current theme and preferences\n */\n\n/**\n * themeStateDefaults: the default values for ThemeState used by theming utilities\n */\nexport var themeStateDefaults = {\n  colorMode: 'auto',\n  contrastMode: 'auto',\n  dark: 'dark',\n  light: 'light',\n  shape: undefined,\n  spacing: 'spacing',\n  typography: undefined,\n  UNSAFE_themeOptions: undefined\n};\n\n/**\n * Represents theme state once mounted to the page\n * (the page doesn't have an \"auto\" color mode, it's either light or dark)\n */\n\nexport default themeConfig;"],"mappings":"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"},"metadata":{},"sourceType":"module"}