{"ast":null,"code":"/** @jsx jsx */\n// eslint-disable-next-line @repo/internal/fs/filename-pattern-match\nimport { jsx } from '@emotion/core';\nimport { AVATAR_RADIUS, AVATAR_SIZES, BORDER_WIDTH } from './constants';\nvar getStyles = function getStyles(_ref) {\n  var _ref$size = _ref.size,\n    size = _ref$size === void 0 ? 'medium' : _ref$size,\n    _ref$appearance = _ref.appearance,\n    appearance = _ref$appearance === void 0 ? 'circle' : _ref$appearance,\n    _ref$color = _ref.color,\n    color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n    _ref$weight = _ref.weight,\n    weight = _ref$weight === void 0 ? 'normal' : _ref$weight;\n  return {\n    width: \"\".concat(AVATAR_SIZES[size], \"px\"),\n    height: \"\".concat(AVATAR_SIZES[size], \"px\"),\n    display: 'inline-block',\n    borderRadius: \"\".concat(appearance === 'square' ? \"\".concat(AVATAR_RADIUS[size], \"px\") : '50%'),\n    backgroundColor: color,\n    border: \"\".concat(BORDER_WIDTH, \"px solid transparent\"),\n    opacity: \"\".concat(weight === 'strong' ? 0.3 : 0.15)\n  };\n};\n/**\n * __Skeleton__\n *\n * A skeleton is the loading state for the avatar component.\n *\n * - [Examples](https://atlassian.design/components/avatar/avatar-skeleton/examples)\n * - [Code](https://atlassian.design/components/avatar/avatar-skeleton/code)\n */\n\nvar Skeleton = function Skeleton(_ref2) {\n  var size = _ref2.size,\n    appearance = _ref2.appearance,\n    color = _ref2.color,\n    weight = _ref2.weight;\n  return jsx(\"div\", {\n    // TODO: Refactor styles to follow css prop rules\n    // eslint-disable-next-line @repo/internal/react/consistent-css-prop-usage\n    css: getStyles({\n      size: size,\n      appearance: appearance,\n      color: color,\n      weight: weight\n    })\n  });\n};\nexport default Skeleton;","map":{"version":3,"names":["jsx","AVATAR_RADIUS","AVATAR_SIZES","BORDER_WIDTH","getStyles","_ref","_ref$size","size","_ref$appearance","appearance","_ref$color","color","_ref$weight","weight","width","concat","height","display","borderRadius","backgroundColor","border","opacity","Skeleton","_ref2","css"],"sources":["/home/enterpi/Documents/iidm/pixel-kit/node_modules/@atlaskit/avatar/dist/esm/Skeleton.js"],"sourcesContent":["/** @jsx jsx */\n// eslint-disable-next-line @repo/internal/fs/filename-pattern-match\nimport { jsx } from '@emotion/core';\nimport { AVATAR_RADIUS, AVATAR_SIZES, BORDER_WIDTH } from './constants';\n\nvar getStyles = function getStyles(_ref) {\n  var _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 'medium' : _ref$size,\n      _ref$appearance = _ref.appearance,\n      appearance = _ref$appearance === void 0 ? 'circle' : _ref$appearance,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$weight = _ref.weight,\n      weight = _ref$weight === void 0 ? 'normal' : _ref$weight;\n  return {\n    width: \"\".concat(AVATAR_SIZES[size], \"px\"),\n    height: \"\".concat(AVATAR_SIZES[size], \"px\"),\n    display: 'inline-block',\n    borderRadius: \"\".concat(appearance === 'square' ? \"\".concat(AVATAR_RADIUS[size], \"px\") : '50%'),\n    backgroundColor: color,\n    border: \"\".concat(BORDER_WIDTH, \"px solid transparent\"),\n    opacity: \"\".concat(weight === 'strong' ? 0.3 : 0.15)\n  };\n};\n/**\n * __Skeleton__\n *\n * A skeleton is the loading state for the avatar component.\n *\n * - [Examples](https://atlassian.design/components/avatar/avatar-skeleton/examples)\n * - [Code](https://atlassian.design/components/avatar/avatar-skeleton/code)\n */\n\n\nvar Skeleton = function Skeleton(_ref2) {\n  var size = _ref2.size,\n      appearance = _ref2.appearance,\n      color = _ref2.color,\n      weight = _ref2.weight;\n  return jsx(\"div\", {\n    // TODO: Refactor styles to follow css prop rules\n    // eslint-disable-next-line @repo/internal/react/consistent-css-prop-usage\n    css: getStyles({\n      size: size,\n      appearance: appearance,\n      color: color,\n      weight: weight\n    })\n  });\n};\n\nexport default Skeleton;"],"mappings":"AAAA;AACA;AACA,SAASA,GAAG,QAAQ,eAAe;AACnC,SAASC,aAAa,EAAEC,YAAY,EAAEC,YAAY,QAAQ,aAAa;AAEvE,IAAIC,SAAS,GAAG,SAASA,SAASA,CAACC,IAAI,EAAE;EACvC,IAAIC,SAAS,GAAGD,IAAI,CAACE,IAAI;IACrBA,IAAI,GAAGD,SAAS,KAAK,KAAK,CAAC,GAAG,QAAQ,GAAGA,SAAS;IAClDE,eAAe,GAAGH,IAAI,CAACI,UAAU;IACjCA,UAAU,GAAGD,eAAe,KAAK,KAAK,CAAC,GAAG,QAAQ,GAAGA,eAAe;IACpEE,UAAU,GAAGL,IAAI,CAACM,KAAK;IACvBA,KAAK,GAAGD,UAAU,KAAK,KAAK,CAAC,GAAG,cAAc,GAAGA,UAAU;IAC3DE,WAAW,GAAGP,IAAI,CAACQ,MAAM;IACzBA,MAAM,GAAGD,WAAW,KAAK,KAAK,CAAC,GAAG,QAAQ,GAAGA,WAAW;EAC5D,OAAO;IACLE,KAAK,EAAE,EAAE,CAACC,MAAM,CAACb,YAAY,CAACK,IAAI,CAAC,EAAE,IAAI,CAAC;IAC1CS,MAAM,EAAE,EAAE,CAACD,MAAM,CAACb,YAAY,CAACK,IAAI,CAAC,EAAE,IAAI,CAAC;IAC3CU,OAAO,EAAE,cAAc;IACvBC,YAAY,EAAE,EAAE,CAACH,MAAM,CAACN,UAAU,KAAK,QAAQ,GAAG,EAAE,CAACM,MAAM,CAACd,aAAa,CAACM,IAAI,CAAC,EAAE,IAAI,CAAC,GAAG,KAAK,CAAC;IAC/FY,eAAe,EAAER,KAAK;IACtBS,MAAM,EAAE,EAAE,CAACL,MAAM,CAACZ,YAAY,EAAE,sBAAsB,CAAC;IACvDkB,OAAO,EAAE,EAAE,CAACN,MAAM,CAACF,MAAM,KAAK,QAAQ,GAAG,GAAG,GAAG,IAAI;EACrD,CAAC;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,IAAIS,QAAQ,GAAG,SAASA,QAAQA,CAACC,KAAK,EAAE;EACtC,IAAIhB,IAAI,GAAGgB,KAAK,CAAChB,IAAI;IACjBE,UAAU,GAAGc,KAAK,CAACd,UAAU;IAC7BE,KAAK,GAAGY,KAAK,CAACZ,KAAK;IACnBE,MAAM,GAAGU,KAAK,CAACV,MAAM;EACzB,OAAOb,GAAG,CAAC,KAAK,EAAE;IAChB;IACA;IACAwB,GAAG,EAAEpB,SAAS,CAAC;MACbG,IAAI,EAAEA,IAAI;MACVE,UAAU,EAAEA,UAAU;MACtBE,KAAK,EAAEA,KAAK;MACZE,MAAM,EAAEA;IACV,CAAC;EACH,CAAC,CAAC;AACJ,CAAC;AAED,eAAeS,QAAQ"},"metadata":{},"sourceType":"module"}