{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { createContext, useContext, useRef, useState } from 'react';\nimport noop from '@atlaskit/ds-lib/noop';\nimport { useLayoutEffect } from '../utils/use-layout-effect';\nimport { useUniqueId } from '../utils/use-unique-id';\nvar StaggeredEntranceContext = /*#__PURE__*/createContext(function () {\n  return {\n    isReady: true,\n    delay: 0,\n    ref: noop\n  };\n});\nexport var useStaggeredEntrance = function useStaggeredEntrance() {\n  var indentifier = useUniqueId();\n  var context = useContext(StaggeredEntranceContext);\n  return context(indentifier);\n};\n\n/**\n * For a list of elements that need to animate in,\n * this should be used in conjunction with entering components.\n * This does not need Javascript to execute so it will run immediately for any SSR rendered React apps before the JS has executed.\n *\n * Will dynamically add delay to each child entering component.\n * Unfortunately all entering components _NEED_ to be a direct descendant.\n */\nvar StaggeredEntrance = function StaggeredEntrance(_ref) {\n  var children = _ref.children,\n    column = _ref.column,\n    _ref$columns = _ref.columns,\n    columns = _ref$columns === void 0 ? 'responsive' : _ref$columns,\n    _ref$delayStep = _ref.delayStep,\n    delayStep = _ref$delayStep === void 0 ? 50 : _ref$delayStep;\n  var elementRefs = useRef([]);\n  var indexes = [];\n  var _useState = useState(function () {\n      if (typeof columns === 'number') {\n        // A hardcoded columns is set so bail out and set it to that!\n        return columns;\n      }\n      if (typeof column === 'number') {\n        // A hardcoded column is set so we will set actualColumns to be 1.\n        return 1;\n      }\n\n      // We are in \"responsive\" mode.\n      // So we will be calculating when the Javascript executes on the client how many columns there will be.\n      return 0;\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    actualColumns = _useState2[0],\n    setActualColumns = _useState2[1];\n  useLayoutEffect(function () {\n    // We want to only run this code when we are in \"responsive\" mode.\n    // It is assumed we are in responsive mode if `columns` is \"responsive\",\n    // we have children element refs ready to be read (i.e. if there are no children this won't run as well)\n    // and finally that `actualColumns` is `0` - this is because for the first render cycle `actualColumns` will be `0` (set above)\n    // and then after this layout effect runs the value for `actualColumns` will then be calculated and set.\n    if (columns === 'responsive' && elementRefs.current.length && actualColumns === 0) {\n      var currentTop = 0;\n      var numberColumns = 0;\n      if (elementRefs.current.length <= 1) {\n        setActualColumns(1);\n        return;\n      }\n\n      // We set the current top to the first elements.\n      // We will be comparing this and incrementing the column count\n      // until we hit an element that has a different offset top (or we run out of elements).\n      currentTop = elementRefs.current[0] ? elementRefs.current[0].offsetTop : 0;\n      for (var i = 0; i < elementRefs.current.length; i++) {\n        var child = elementRefs.current[i];\n        if (!child) {\n          break;\n        }\n        if (currentTop === child.offsetTop) {\n          numberColumns += 1;\n          if (elementRefs.current.length - 1 === i) {\n            setActualColumns(numberColumns);\n          }\n          continue;\n        }\n        setActualColumns(numberColumns);\n        break;\n      }\n    }\n    // We only want this effect to run once - on initial mount.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/React.createElement(StaggeredEntranceContext.Provider, {\n    value: function value(id) {\n      if (!indexes.includes(id)) {\n        indexes.push(id);\n      }\n      var isReady = actualColumns > 0;\n      var index = indexes.indexOf(id);\n      var currentColumn = column || index % actualColumns;\n      var currentRow = Math.floor(index / actualColumns);\n      var distanceFromTopLeftElement = currentRow + currentColumn;\n      // We don't want loads of elements to have the same staggered delay as it ends up looking slow for users.\n      // To get around that we calculate the logarithm using `distanceFromTopLeftElement` which ends making\n      // elements appear faster the further away from the top left element.\n      var delay = Math.ceil(Math.log(distanceFromTopLeftElement + 1) * delayStep * 1.5) || 0;\n      return {\n        delay: delay,\n        isReady: isReady,\n        ref: function ref(element) {\n          return elementRefs.current[index] = element;\n        }\n      };\n    }\n  }, children);\n};\nexport default StaggeredEntrance;","map":{"version":3,"names":["_slicedToArray","React","createContext","useContext","useRef","useState","noop","useLayoutEffect","useUniqueId","StaggeredEntranceContext","isReady","delay","ref","useStaggeredEntrance","indentifier","context","StaggeredEntrance","_ref","children","column","_ref$columns","columns","_ref$delayStep","delayStep","elementRefs","indexes","_useState","_useState2","actualColumns","setActualColumns","current","length","currentTop","numberColumns","offsetTop","i","child","createElement","Provider","value","id","includes","push","index","indexOf","currentColumn","currentRow","Math","floor","distanceFromTopLeftElement","ceil","log","element"],"sources":["/home/enterpi/Documents/iidm/pixel-kit/node_modules/@atlaskit/motion/dist/esm/entering/staggered-entrance.js"],"sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { createContext, useContext, useRef, useState } from 'react';\nimport noop from '@atlaskit/ds-lib/noop';\nimport { useLayoutEffect } from '../utils/use-layout-effect';\nimport { useUniqueId } from '../utils/use-unique-id';\nvar StaggeredEntranceContext = /*#__PURE__*/createContext(function () {\n  return {\n    isReady: true,\n    delay: 0,\n    ref: noop\n  };\n});\nexport var useStaggeredEntrance = function useStaggeredEntrance() {\n  var indentifier = useUniqueId();\n  var context = useContext(StaggeredEntranceContext);\n  return context(indentifier);\n};\n\n/**\n * For a list of elements that need to animate in,\n * this should be used in conjunction with entering components.\n * This does not need Javascript to execute so it will run immediately for any SSR rendered React apps before the JS has executed.\n *\n * Will dynamically add delay to each child entering component.\n * Unfortunately all entering components _NEED_ to be a direct descendant.\n */\nvar StaggeredEntrance = function StaggeredEntrance(_ref) {\n  var children = _ref.children,\n    column = _ref.column,\n    _ref$columns = _ref.columns,\n    columns = _ref$columns === void 0 ? 'responsive' : _ref$columns,\n    _ref$delayStep = _ref.delayStep,\n    delayStep = _ref$delayStep === void 0 ? 50 : _ref$delayStep;\n  var elementRefs = useRef([]);\n  var indexes = [];\n  var _useState = useState(function () {\n      if (typeof columns === 'number') {\n        // A hardcoded columns is set so bail out and set it to that!\n        return columns;\n      }\n      if (typeof column === 'number') {\n        // A hardcoded column is set so we will set actualColumns to be 1.\n        return 1;\n      }\n\n      // We are in \"responsive\" mode.\n      // So we will be calculating when the Javascript executes on the client how many columns there will be.\n      return 0;\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    actualColumns = _useState2[0],\n    setActualColumns = _useState2[1];\n  useLayoutEffect(function () {\n    // We want to only run this code when we are in \"responsive\" mode.\n    // It is assumed we are in responsive mode if `columns` is \"responsive\",\n    // we have children element refs ready to be read (i.e. if there are no children this won't run as well)\n    // and finally that `actualColumns` is `0` - this is because for the first render cycle `actualColumns` will be `0` (set above)\n    // and then after this layout effect runs the value for `actualColumns` will then be calculated and set.\n    if (columns === 'responsive' && elementRefs.current.length && actualColumns === 0) {\n      var currentTop = 0;\n      var numberColumns = 0;\n      if (elementRefs.current.length <= 1) {\n        setActualColumns(1);\n        return;\n      }\n\n      // We set the current top to the first elements.\n      // We will be comparing this and incrementing the column count\n      // until we hit an element that has a different offset top (or we run out of elements).\n      currentTop = elementRefs.current[0] ? elementRefs.current[0].offsetTop : 0;\n      for (var i = 0; i < elementRefs.current.length; i++) {\n        var child = elementRefs.current[i];\n        if (!child) {\n          break;\n        }\n        if (currentTop === child.offsetTop) {\n          numberColumns += 1;\n          if (elementRefs.current.length - 1 === i) {\n            setActualColumns(numberColumns);\n          }\n          continue;\n        }\n        setActualColumns(numberColumns);\n        break;\n      }\n    }\n    // We only want this effect to run once - on initial mount.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/React.createElement(StaggeredEntranceContext.Provider, {\n    value: function value(id) {\n      if (!indexes.includes(id)) {\n        indexes.push(id);\n      }\n      var isReady = actualColumns > 0;\n      var index = indexes.indexOf(id);\n      var currentColumn = column || index % actualColumns;\n      var currentRow = Math.floor(index / actualColumns);\n      var distanceFromTopLeftElement = currentRow + currentColumn;\n      // We don't want loads of elements to have the same staggered delay as it ends up looking slow for users.\n      // To get around that we calculate the logarithm using `distanceFromTopLeftElement` which ends making\n      // elements appear faster the further away from the top left element.\n      var delay = Math.ceil(Math.log(distanceFromTopLeftElement + 1) * delayStep * 1.5) || 0;\n      return {\n        delay: delay,\n        isReady: isReady,\n        ref: function ref(element) {\n          return elementRefs.current[index] = element;\n        }\n      };\n    }\n  }, children);\n};\nexport default StaggeredEntrance;"],"mappings":"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"},"metadata":{},"sourceType":"module"}