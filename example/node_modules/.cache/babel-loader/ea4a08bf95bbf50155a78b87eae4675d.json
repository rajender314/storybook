{"ast":null,"code":"export const createDeferred = ({\n  loader,\n  preload\n}) => {\n  let resolve;\n  const deferred = {\n    promise: new Promise(res => {\n      resolve = m => {\n        let withDefault;\n        deferred.result = m;\n        if (!m.default) {\n          withDefault = {\n            default: m\n          };\n        }\n        res(withDefault ? withDefault : m);\n      };\n    }),\n    result: undefined,\n    preload: function (_preload) {\n      function preload() {\n        return _preload.apply(this, arguments);\n      }\n      preload.toString = function () {\n        return _preload.toString();\n      };\n      return preload;\n    }(() => {\n      if (deferred.result) {\n        return;\n      }\n      preload().then(m => {\n        deferred.result = m;\n      }).catch(() => {// Do nothing...\n      });\n    }),\n    start: () => {\n      if (deferred.result) {\n        resolve(deferred.result);\n        return Promise.resolve();\n      } // Make a new loader request when none have started or resolved yet\n\n      return loader().then(resolve);\n    }\n  };\n  return deferred;\n};","map":{"version":3,"names":["createDeferred","loader","preload","resolve","deferred","promise","Promise","res","m","withDefault","result","default","undefined","_preload","apply","arguments","toString","then","catch","start"],"sources":["../../../src/lazy/deferred.ts"],"sourcesContent":["import { ComponentType } from 'react';\nimport { ClientLoader, JavaScriptModule } from './loader';\n\nexport type CreateDeferredOptions<C> = {\n  loader: ClientLoader<C>;\n  preload: ClientLoader<C>;\n};\n\nexport type Deferred<C> = {\n  preload(): void;\n  promise: Promise<JavaScriptModule<C>>;\n  result: JavaScriptModule<C> | void;\n  start(): Promise<void>;\n};\n\nexport const createDeferred = <C extends ComponentType<any>>({\n  loader,\n  preload,\n}: CreateDeferredOptions<C>): Deferred<C> => {\n  let resolve: (m: any) => void;\n\n  const deferred = {\n    promise: new Promise<JavaScriptModule<C>>(res => {\n      resolve = (m: any) => {\n        let withDefault;\n        deferred.result = m;\n\n        if (!m.default) {\n          withDefault = { default: m };\n        }\n\n        res(withDefault ? withDefault : m);\n      };\n    }),\n    result: undefined,\n    preload: () => {\n      if (deferred.result) {\n        return;\n      }\n\n      preload()\n        .then((m: any) => {\n          deferred.result = m;\n        })\n        .catch(() => {\n          // Do nothing...\n        });\n    },\n    start: () => {\n      if (deferred.result) {\n        resolve(deferred.result);\n\n        return Promise.resolve();\n      }\n\n      // Make a new loader request when none have started or resolved yet\n      return loader().then(resolve);\n    },\n  };\n\n  return deferred;\n};\n"],"mappings":"AAeA,OAAO,MAAMA,cAAc,GAAGA,CAA+B;EAC3DC,MAD2D;EAE3DC;AAF2D,CAA/B,KAGe;EAC3C,IAAIC,OAAJ;EAEA,MAAMC,QAAQ,GAAG;IACfC,OAAO,EAAE,IAAIC,OAAJ,CAAiCC,GAAG,IAAI;MAC/CJ,OAAO,GAAIK,CAAD,IAAY;QACpB,IAAIC,WAAJ;QACAL,QAAQ,CAACM,MAAT,GAAkBF,CAAlB;QAEA,IAAI,CAACA,CAAC,CAACG,OAAP,EAAgB;UACdF,WAAW,GAAG;YAAEE,OAAO,EAAEH;UAAX,CAAd;QACD;QAEDD,GAAG,CAACE,WAAW,GAAGA,WAAH,GAAiBD,CAA7B,CAAH;MACD,CATD;IAUD,CAXQ,CADM;IAafE,MAAM,EAAEE,SAbO;IAcfV,OAAO,YAAAW,QAAA;MAAA,SAAAX,QAAA;QAAA,OAAAW,QAAA,CAAAC,KAAA,OAAAC,SAAA;MAAA;MAAAb,OAAA,CAAAc,QAAA;QAAA,OAAAH,QAAA,CAAAG,QAAA;MAAA;MAAA,OAAAd,OAAA;IAAA,EAAE,MAAM;MACb,IAAIE,QAAQ,CAACM,MAAb,EAAqB;QACnB;MACD;MAEDR,OAAO,GACJe,IADH,CACST,CAAD,IAAY;QAChBJ,QAAQ,CAACM,MAAT,GAAkBF,CAAlB;MACD,CAHH,EAIGU,KAJH,CAIS,MAAM,CACX;MAAA,CALJ;IAOD,CAZM,CAdQ;IA2BfC,KAAK,EAAEA,CAAA,KAAM;MACX,IAAIf,QAAQ,CAACM,MAAb,EAAqB;QACnBP,OAAO,CAACC,QAAQ,CAACM,MAAV,CAAP;QAEA,OAAOJ,OAAO,CAACH,OAAR,EAAP;MACD,CALU,CAOX;;MACA,OAAOF,MAAM,GAAGgB,IAAT,CAAcd,OAAd,CAAP;IACD;EApCc,CAAjB;EAuCA,OAAOC,QAAP;AACD,CA9CM"},"metadata":{},"sourceType":"module"}