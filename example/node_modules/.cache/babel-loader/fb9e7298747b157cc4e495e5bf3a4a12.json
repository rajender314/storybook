{"ast":null,"code":"import { themeStateDefaults } from './theme-config';\nimport configurePage from './utils/configure-page';\nimport { getThemePreferences } from './utils/get-theme-preferences';\n\n/**\n * Synchronously sets the theme globally at runtime. Themes are not loaded;\n * use `getThemeStyles` and other server-side utilities to generate and load them.\n *\n * @param {Object<string, string>} themeState The themes and color mode that should be applied.\n * @param {string} themeState.colorMode Determines which color theme is applied. If set to `auto`, the theme applied will be determined by the OS setting.\n * @param {string} themeState.dark The color theme to be applied when the color mode resolves to 'dark'.\n * @param {string} themeState.light The color theme to be applied when the color mode resolves to 'light'.\n * @param {string} themeState.shape The shape theme to be applied.\n * @param {string} themeState.spacing The spacing theme to be applied.\n * @param {string} themeState.typography The typography theme to be applied.\n * @param {Object} themeState.UNSAFE_themeOptions The custom branding options to be used for custom theme generation\n * @param {function} themeLoader Callback function used to override the default theme loading functionality.\n *\n * @returns An unbind function, that can be used to stop listening for changes to system theme.\n *\n * @example\n * ```\n * enableGlobalTheme({colorMode: 'auto', light: 'light', dark: 'dark', spacing: 'spacing'});\n * ```\n */\nvar enableGlobalTheme = function enableGlobalTheme() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _ref$colorMode = _ref.colorMode,\n    colorMode = _ref$colorMode === void 0 ? themeStateDefaults['colorMode'] : _ref$colorMode,\n    _ref$contrastMode = _ref.contrastMode,\n    contrastMode = _ref$contrastMode === void 0 ? themeStateDefaults['contrastMode'] : _ref$contrastMode,\n    _ref$dark = _ref.dark,\n    dark = _ref$dark === void 0 ? themeStateDefaults['dark'] : _ref$dark,\n    _ref$light = _ref.light,\n    light = _ref$light === void 0 ? themeStateDefaults['light'] : _ref$light,\n    _ref$shape = _ref.shape,\n    shape = _ref$shape === void 0 ? themeStateDefaults['shape'] : _ref$shape,\n    _ref$spacing = _ref.spacing,\n    spacing = _ref$spacing === void 0 ? themeStateDefaults['spacing'] : _ref$spacing,\n    _ref$typography = _ref.typography,\n    typography = _ref$typography === void 0 ? themeStateDefaults['typography'] : _ref$typography,\n    _ref$UNSAFE_themeOpti = _ref.UNSAFE_themeOptions,\n    UNSAFE_themeOptions = _ref$UNSAFE_themeOpti === void 0 ? themeStateDefaults['UNSAFE_themeOptions'] : _ref$UNSAFE_themeOpti;\n  var themeLoader = arguments.length > 1 ? arguments[1] : undefined;\n  var themeState = {\n    colorMode: colorMode,\n    contrastMode: contrastMode,\n    dark: dark,\n    light: light,\n    shape: shape,\n    spacing: spacing,\n    typography: typography,\n    UNSAFE_themeOptions: themeLoader ? undefined : UNSAFE_themeOptions\n  };\n\n  // Determine what to load and call theme loader\n  var themePreferences = getThemePreferences(themeState);\n  if (themeLoader) {\n    themePreferences.map(function (themeId) {\n      return themeLoader(themeId);\n    });\n  }\n  var autoUnbind = configurePage(themeState);\n  return autoUnbind;\n};\nexport default enableGlobalTheme;","map":{"version":3,"names":["themeStateDefaults","configurePage","getThemePreferences","enableGlobalTheme","_ref","arguments","length","undefined","_ref$colorMode","colorMode","_ref$contrastMode","contrastMode","_ref$dark","dark","_ref$light","light","_ref$shape","shape","_ref$spacing","spacing","_ref$typography","typography","_ref$UNSAFE_themeOpti","UNSAFE_themeOptions","themeLoader","themeState","themePreferences","map","themeId","autoUnbind"],"sources":["/home/enterpi/Documents/iidm/pixel-kit/node_modules/@atlaskit/modal-dialog/node_modules/@atlaskit/tokens/dist/esm/enable-global-theme.js"],"sourcesContent":["import { themeStateDefaults } from './theme-config';\nimport configurePage from './utils/configure-page';\nimport { getThemePreferences } from './utils/get-theme-preferences';\n\n/**\n * Synchronously sets the theme globally at runtime. Themes are not loaded;\n * use `getThemeStyles` and other server-side utilities to generate and load them.\n *\n * @param {Object<string, string>} themeState The themes and color mode that should be applied.\n * @param {string} themeState.colorMode Determines which color theme is applied. If set to `auto`, the theme applied will be determined by the OS setting.\n * @param {string} themeState.dark The color theme to be applied when the color mode resolves to 'dark'.\n * @param {string} themeState.light The color theme to be applied when the color mode resolves to 'light'.\n * @param {string} themeState.shape The shape theme to be applied.\n * @param {string} themeState.spacing The spacing theme to be applied.\n * @param {string} themeState.typography The typography theme to be applied.\n * @param {Object} themeState.UNSAFE_themeOptions The custom branding options to be used for custom theme generation\n * @param {function} themeLoader Callback function used to override the default theme loading functionality.\n *\n * @returns An unbind function, that can be used to stop listening for changes to system theme.\n *\n * @example\n * ```\n * enableGlobalTheme({colorMode: 'auto', light: 'light', dark: 'dark', spacing: 'spacing'});\n * ```\n */\nvar enableGlobalTheme = function enableGlobalTheme() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _ref$colorMode = _ref.colorMode,\n    colorMode = _ref$colorMode === void 0 ? themeStateDefaults['colorMode'] : _ref$colorMode,\n    _ref$contrastMode = _ref.contrastMode,\n    contrastMode = _ref$contrastMode === void 0 ? themeStateDefaults['contrastMode'] : _ref$contrastMode,\n    _ref$dark = _ref.dark,\n    dark = _ref$dark === void 0 ? themeStateDefaults['dark'] : _ref$dark,\n    _ref$light = _ref.light,\n    light = _ref$light === void 0 ? themeStateDefaults['light'] : _ref$light,\n    _ref$shape = _ref.shape,\n    shape = _ref$shape === void 0 ? themeStateDefaults['shape'] : _ref$shape,\n    _ref$spacing = _ref.spacing,\n    spacing = _ref$spacing === void 0 ? themeStateDefaults['spacing'] : _ref$spacing,\n    _ref$typography = _ref.typography,\n    typography = _ref$typography === void 0 ? themeStateDefaults['typography'] : _ref$typography,\n    _ref$UNSAFE_themeOpti = _ref.UNSAFE_themeOptions,\n    UNSAFE_themeOptions = _ref$UNSAFE_themeOpti === void 0 ? themeStateDefaults['UNSAFE_themeOptions'] : _ref$UNSAFE_themeOpti;\n  var themeLoader = arguments.length > 1 ? arguments[1] : undefined;\n  var themeState = {\n    colorMode: colorMode,\n    contrastMode: contrastMode,\n    dark: dark,\n    light: light,\n    shape: shape,\n    spacing: spacing,\n    typography: typography,\n    UNSAFE_themeOptions: themeLoader ? undefined : UNSAFE_themeOptions\n  };\n\n  // Determine what to load and call theme loader\n  var themePreferences = getThemePreferences(themeState);\n  if (themeLoader) {\n    themePreferences.map(function (themeId) {\n      return themeLoader(themeId);\n    });\n  }\n  var autoUnbind = configurePage(themeState);\n  return autoUnbind;\n};\nexport default enableGlobalTheme;"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,gBAAgB;AACnD,OAAOC,aAAa,MAAM,wBAAwB;AAClD,SAASC,mBAAmB,QAAQ,+BAA+B;;AAEnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,iBAAiB,GAAG,SAASA,iBAAiBA,CAAA,EAAG;EACnD,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC/EG,cAAc,GAAGJ,IAAI,CAACK,SAAS;IAC/BA,SAAS,GAAGD,cAAc,KAAK,KAAK,CAAC,GAAGR,kBAAkB,CAAC,WAAW,CAAC,GAAGQ,cAAc;IACxFE,iBAAiB,GAAGN,IAAI,CAACO,YAAY;IACrCA,YAAY,GAAGD,iBAAiB,KAAK,KAAK,CAAC,GAAGV,kBAAkB,CAAC,cAAc,CAAC,GAAGU,iBAAiB;IACpGE,SAAS,GAAGR,IAAI,CAACS,IAAI;IACrBA,IAAI,GAAGD,SAAS,KAAK,KAAK,CAAC,GAAGZ,kBAAkB,CAAC,MAAM,CAAC,GAAGY,SAAS;IACpEE,UAAU,GAAGV,IAAI,CAACW,KAAK;IACvBA,KAAK,GAAGD,UAAU,KAAK,KAAK,CAAC,GAAGd,kBAAkB,CAAC,OAAO,CAAC,GAAGc,UAAU;IACxEE,UAAU,GAAGZ,IAAI,CAACa,KAAK;IACvBA,KAAK,GAAGD,UAAU,KAAK,KAAK,CAAC,GAAGhB,kBAAkB,CAAC,OAAO,CAAC,GAAGgB,UAAU;IACxEE,YAAY,GAAGd,IAAI,CAACe,OAAO;IAC3BA,OAAO,GAAGD,YAAY,KAAK,KAAK,CAAC,GAAGlB,kBAAkB,CAAC,SAAS,CAAC,GAAGkB,YAAY;IAChFE,eAAe,GAAGhB,IAAI,CAACiB,UAAU;IACjCA,UAAU,GAAGD,eAAe,KAAK,KAAK,CAAC,GAAGpB,kBAAkB,CAAC,YAAY,CAAC,GAAGoB,eAAe;IAC5FE,qBAAqB,GAAGlB,IAAI,CAACmB,mBAAmB;IAChDA,mBAAmB,GAAGD,qBAAqB,KAAK,KAAK,CAAC,GAAGtB,kBAAkB,CAAC,qBAAqB,CAAC,GAAGsB,qBAAqB;EAC5H,IAAIE,WAAW,GAAGnB,SAAS,CAACC,MAAM,GAAG,CAAC,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAGE,SAAS;EACjE,IAAIkB,UAAU,GAAG;IACfhB,SAAS,EAAEA,SAAS;IACpBE,YAAY,EAAEA,YAAY;IAC1BE,IAAI,EAAEA,IAAI;IACVE,KAAK,EAAEA,KAAK;IACZE,KAAK,EAAEA,KAAK;IACZE,OAAO,EAAEA,OAAO;IAChBE,UAAU,EAAEA,UAAU;IACtBE,mBAAmB,EAAEC,WAAW,GAAGjB,SAAS,GAAGgB;EACjD,CAAC;;EAED;EACA,IAAIG,gBAAgB,GAAGxB,mBAAmB,CAACuB,UAAU,CAAC;EACtD,IAAID,WAAW,EAAE;IACfE,gBAAgB,CAACC,GAAG,CAAC,UAAUC,OAAO,EAAE;MACtC,OAAOJ,WAAW,CAACI,OAAO,CAAC;IAC7B,CAAC,CAAC;EACJ;EACA,IAAIC,UAAU,GAAG5B,aAAa,CAACwB,UAAU,CAAC;EAC1C,OAAOI,UAAU;AACnB,CAAC;AACD,eAAe1B,iBAAiB"},"metadata":{},"sourceType":"module"}