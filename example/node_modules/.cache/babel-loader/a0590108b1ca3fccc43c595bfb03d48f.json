{"ast":null,"code":"/**\n * A numerical representation of a date:\n *  - year: any positive integer\n *  - month: 1 - 12 (Jan - Dec)\n *  - day: 1 - [28, 29, 30, 31] (depending on month)\n */\n\nexport var toDateObj = function toDateObj(date) {\n  return {\n    year: date.getFullYear(),\n    month: date.getMonth() + 1,\n    day: date.getDate()\n  };\n};\nexport var toDate = function toDate(date) {\n  return (\n    // The 'proper' month is stored in a DateObj but Date expects month index\n    new Date(date.year, date.month - 1, date.day)\n  );\n};\n\n/**\n * Determines if the input year is a leap year\n * See: https://en.wikipedia.org/wiki/Leap_year#Algorithm\n *\n * @param year: integer\n * @returns boolean\n */\nexport var isLeapYear = function isLeapYear(year) {\n  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n};\n\n/**\n * Determines the number of days in specified month on the specified year\n *\n * @param year: number\n * @param month: number\n * @returns number\n */\nexport var getDaysInMonth = function getDaysInMonth(year, month) {\n  // February depends on leap year\n  if (month === 2 && isLeapYear(year)) {\n    return 29;\n  }\n  return [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month - 1];\n};\n\n/**\n * Determines whether or not the specified DateObj will create a valid and\n * logical Date.\n *\n * @param date: DateObj\n * @returns boolean\n */\nexport var isValid = function isValid(date) {\n  var year = date.year,\n    month = date.month,\n    day = date.day;\n  var daysInMonth = getDaysInMonth(year, month);\n  return 1 <= month && month <= 12 && 1 <= day && day <= daysInMonth;\n};\n\n/**\n * Normalizes the specified DateObj, replacing NaN year and zero/NaN month/day\n * with backup values. It also replaces 'short' years (0 - 99) with their 'full'\n * equivalent (2000 - 2099)\n *\n * @param date: DateObj\n * @returns DateObj\n */\nexport var normalizeDate = function normalizeDate(date) {\n  var now = toDateObj(new Date());\n  var year = date.year,\n    month = date.month,\n    day = date.day;\n\n  // 19 should evaluate to 2019\n  var fullYear = year < 100 ? 2000 + year : year;\n\n  // Missing date pieces are filled in with their current date values\n  var normalizedYear = !isNaN(fullYear) ? fullYear : now.year;\n  var normalizedMonth = !isNaN(month) && month !== 0 ? month : now.month;\n  var normalizedDay = !isNaN(day) && day !== 0 ? day : now.day;\n  return {\n    year: normalizedYear,\n    month: normalizedMonth,\n    day: normalizedDay\n  };\n};","map":{"version":3,"names":["toDateObj","date","year","getFullYear","month","getMonth","day","getDate","toDate","Date","isLeapYear","getDaysInMonth","isValid","daysInMonth","normalizeDate","now","fullYear","normalizedYear","isNaN","normalizedMonth","normalizedDay"],"sources":["/home/enterpi/Documents/iidm/pixel-kit/node_modules/@atlaskit/locale/dist/esm/internal/date-parser/utils.js"],"sourcesContent":["/**\n * A numerical representation of a date:\n *  - year: any positive integer\n *  - month: 1 - 12 (Jan - Dec)\n *  - day: 1 - [28, 29, 30, 31] (depending on month)\n */\n\nexport var toDateObj = function toDateObj(date) {\n  return {\n    year: date.getFullYear(),\n    month: date.getMonth() + 1,\n    day: date.getDate()\n  };\n};\nexport var toDate = function toDate(date) {\n  return (\n    // The 'proper' month is stored in a DateObj but Date expects month index\n    new Date(date.year, date.month - 1, date.day)\n  );\n};\n\n/**\n * Determines if the input year is a leap year\n * See: https://en.wikipedia.org/wiki/Leap_year#Algorithm\n *\n * @param year: integer\n * @returns boolean\n */\nexport var isLeapYear = function isLeapYear(year) {\n  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n};\n\n/**\n * Determines the number of days in specified month on the specified year\n *\n * @param year: number\n * @param month: number\n * @returns number\n */\nexport var getDaysInMonth = function getDaysInMonth(year, month) {\n  // February depends on leap year\n  if (month === 2 && isLeapYear(year)) {\n    return 29;\n  }\n  return [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month - 1];\n};\n\n/**\n * Determines whether or not the specified DateObj will create a valid and\n * logical Date.\n *\n * @param date: DateObj\n * @returns boolean\n */\nexport var isValid = function isValid(date) {\n  var year = date.year,\n    month = date.month,\n    day = date.day;\n  var daysInMonth = getDaysInMonth(year, month);\n  return 1 <= month && month <= 12 && 1 <= day && day <= daysInMonth;\n};\n\n/**\n * Normalizes the specified DateObj, replacing NaN year and zero/NaN month/day\n * with backup values. It also replaces 'short' years (0 - 99) with their 'full'\n * equivalent (2000 - 2099)\n *\n * @param date: DateObj\n * @returns DateObj\n */\nexport var normalizeDate = function normalizeDate(date) {\n  var now = toDateObj(new Date());\n  var year = date.year,\n    month = date.month,\n    day = date.day;\n\n  // 19 should evaluate to 2019\n  var fullYear = year < 100 ? 2000 + year : year;\n\n  // Missing date pieces are filled in with their current date values\n  var normalizedYear = !isNaN(fullYear) ? fullYear : now.year;\n  var normalizedMonth = !isNaN(month) && month !== 0 ? month : now.month;\n  var normalizedDay = !isNaN(day) && day !== 0 ? day : now.day;\n  return {\n    year: normalizedYear,\n    month: normalizedMonth,\n    day: normalizedDay\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}