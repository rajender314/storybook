{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n/**\n * Below lines are copied from @material/material-color-utilities.\n * Do not modify it.\n */\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable:class-as-namespace\n\nimport * as utils from './color-utils';\nimport * as math from './math-utils';\n\n/**\n * Utility methods for calculating contrast given two colors, or calculating a\n * color given one color and a contrast ratio.\n *\n * Contrast ratio is calculated using XYZ's Y. When linearized to match human\n * perception, Y becomes HCT's tone and L*a*b*'s' L*. Informally, this is the\n * lightness of a color.\n *\n * Methods refer to tone, T in the the HCT color space.\n * Tone is equivalent to L* in the L*a*b* color space, or L in the LCH color\n * space.\n */\nexport var Contrast = /*#__PURE__*/function () {\n  function Contrast() {\n    _classCallCheck(this, Contrast);\n  }\n  _createClass(Contrast, null, [{\n    key: \"ratioOfTones\",\n    value:\n    /**\n     * Returns a contrast ratio, which ranges from 1 to 21.\n     *\n     * @param toneA Tone between 0 and 100. Values outside will be clamped.\n     * @param toneB Tone between 0 and 100. Values outside will be clamped.\n     */\n    function ratioOfTones(toneA, toneB) {\n      toneA = math.clampDouble(0.0, 100.0, toneA);\n      toneB = math.clampDouble(0.0, 100.0, toneB);\n      return Contrast.ratioOfYs(utils.yFromLstar(toneA), utils.yFromLstar(toneB));\n    }\n  }, {\n    key: \"ratioOfYs\",\n    value: function ratioOfYs(y1, y2) {\n      var lighter = y1 > y2 ? y1 : y2;\n      var darker = lighter === y2 ? y1 : y2;\n      return (lighter + 5.0) / (darker + 5.0);\n    }\n\n    /**\n     * Returns a tone >= tone parameter that ensures ratio parameter.\n     * Return value is between 0 and 100.\n     * Returns -1 if ratio cannot be achieved with tone parameter.\n     *\n     * @param tone Tone return value must contrast with.\n     * Range is 0 to 100. Invalid values will result in -1 being returned.\n     * @param ratio Contrast ratio of return value and tone.\n     * Range is 1 to 21, invalid values have undefined behavior.\n     */\n  }, {\n    key: \"lighter\",\n    value: function lighter(tone, ratio) {\n      if (tone < 0.0 || tone > 100.0) {\n        return -1.0;\n      }\n      var darkY = utils.yFromLstar(tone);\n      var lightY = ratio * (darkY + 5.0) - 5.0;\n      var realContrast = Contrast.ratioOfYs(lightY, darkY);\n      var delta = Math.abs(realContrast - ratio);\n      if (realContrast < ratio && delta > 0.04) {\n        return -1;\n      }\n\n      // Ensure gamut mapping, which requires a 'range' on tone, will still result\n      // the correct ratio by darkening slightly.\n      var returnValue = utils.lstarFromY(lightY) + 0.4;\n      if (returnValue < 0 || returnValue > 100) {\n        return -1;\n      }\n      return returnValue;\n    }\n\n    /**\n     * Returns a tone <= tone parameter that ensures ratio parameter.\n     * Return value is between 0 and 100.\n     * Returns -1 if ratio cannot be achieved with tone parameter.\n     *\n     * @param tone Tone return value must contrast with.\n     * Range is 0 to 100. Invalid values will result in -1 being returned.\n     * @param ratio Contrast ratio of return value and tone.\n     * Range is 1 to 21, invalid values have undefined behavior.\n     */\n  }, {\n    key: \"darker\",\n    value: function darker(tone, ratio) {\n      if (tone < 0.0 || tone > 100.0) {\n        return -1.0;\n      }\n      var lightY = utils.yFromLstar(tone);\n      var darkY = (lightY + 5.0) / ratio - 5.0;\n      var realContrast = Contrast.ratioOfYs(lightY, darkY);\n      var delta = Math.abs(realContrast - ratio);\n      if (realContrast < ratio && delta > 0.04) {\n        return -1;\n      }\n\n      // Ensure gamut mapping, which requires a 'range' on tone, will still result\n      // the correct ratio by darkening slightly.\n      var returnValue = utils.lstarFromY(darkY) - 0.4;\n      if (returnValue < 0 || returnValue > 100) {\n        return -1;\n      }\n      return returnValue;\n    }\n\n    /**\n     * Returns a tone >= tone parameter that ensures ratio parameter.\n     * Return value is between 0 and 100.\n     * Returns 100 if ratio cannot be achieved with tone parameter.\n     *\n     * This method is unsafe because the returned value is guaranteed to be in\n     * bounds for tone, i.e. between 0 and 100. However, that value may not reach\n     * the ratio with tone. For example, there is no color lighter than T100.\n     *\n     * @param tone Tone return value must contrast with.\n     * Range is 0 to 100. Invalid values will result in 100 being returned.\n     * @param ratio Desired contrast ratio of return value and tone parameter.\n     * Range is 1 to 21, invalid values have undefined behavior.\n     */\n  }, {\n    key: \"lighterUnsafe\",\n    value: function lighterUnsafe(tone, ratio) {\n      var lighterSafe = Contrast.lighter(tone, ratio);\n      return lighterSafe < 0.0 ? 100.0 : lighterSafe;\n    }\n\n    /**\n     * Returns a tone >= tone parameter that ensures ratio parameter.\n     * Return value is between 0 and 100.\n     * Returns 100 if ratio cannot be achieved with tone parameter.\n     *\n     * This method is unsafe because the returned value is guaranteed to be in\n     * bounds for tone, i.e. between 0 and 100. However, that value may not reach\n     * the [ratio with [tone]. For example, there is no color darker than T0.\n     *\n     * @param tone Tone return value must contrast with.\n     * Range is 0 to 100. Invalid values will result in 0 being returned.\n     * @param ratio Desired contrast ratio of return value and tone parameter.\n     * Range is 1 to 21, invalid values have undefined behavior.\n     */\n  }, {\n    key: \"darkerUnsafe\",\n    value: function darkerUnsafe(tone, ratio) {\n      var darkerSafe = Contrast.darker(tone, ratio);\n      return darkerSafe < 0.0 ? 0.0 : darkerSafe;\n    }\n  }]);\n  return Contrast;\n}();","map":{"version":3,"names":["_classCallCheck","_createClass","utils","math","Contrast","key","value","ratioOfTones","toneA","toneB","clampDouble","ratioOfYs","yFromLstar","y1","y2","lighter","darker","tone","ratio","darkY","lightY","realContrast","delta","Math","abs","returnValue","lstarFromY","lighterUnsafe","lighterSafe","darkerUnsafe","darkerSafe"],"sources":["/home/enterpi/Documents/iidm/pixel-kit/node_modules/@atlaskit/drawer/node_modules/@atlaskit/tokens/dist/esm/utils/hct-color-utils/contrast.js"],"sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n/**\n * Below lines are copied from @material/material-color-utilities.\n * Do not modify it.\n */\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable:class-as-namespace\n\nimport * as utils from './color-utils';\nimport * as math from './math-utils';\n\n/**\n * Utility methods for calculating contrast given two colors, or calculating a\n * color given one color and a contrast ratio.\n *\n * Contrast ratio is calculated using XYZ's Y. When linearized to match human\n * perception, Y becomes HCT's tone and L*a*b*'s' L*. Informally, this is the\n * lightness of a color.\n *\n * Methods refer to tone, T in the the HCT color space.\n * Tone is equivalent to L* in the L*a*b* color space, or L in the LCH color\n * space.\n */\nexport var Contrast = /*#__PURE__*/function () {\n  function Contrast() {\n    _classCallCheck(this, Contrast);\n  }\n  _createClass(Contrast, null, [{\n    key: \"ratioOfTones\",\n    value:\n    /**\n     * Returns a contrast ratio, which ranges from 1 to 21.\n     *\n     * @param toneA Tone between 0 and 100. Values outside will be clamped.\n     * @param toneB Tone between 0 and 100. Values outside will be clamped.\n     */\n    function ratioOfTones(toneA, toneB) {\n      toneA = math.clampDouble(0.0, 100.0, toneA);\n      toneB = math.clampDouble(0.0, 100.0, toneB);\n      return Contrast.ratioOfYs(utils.yFromLstar(toneA), utils.yFromLstar(toneB));\n    }\n  }, {\n    key: \"ratioOfYs\",\n    value: function ratioOfYs(y1, y2) {\n      var lighter = y1 > y2 ? y1 : y2;\n      var darker = lighter === y2 ? y1 : y2;\n      return (lighter + 5.0) / (darker + 5.0);\n    }\n\n    /**\n     * Returns a tone >= tone parameter that ensures ratio parameter.\n     * Return value is between 0 and 100.\n     * Returns -1 if ratio cannot be achieved with tone parameter.\n     *\n     * @param tone Tone return value must contrast with.\n     * Range is 0 to 100. Invalid values will result in -1 being returned.\n     * @param ratio Contrast ratio of return value and tone.\n     * Range is 1 to 21, invalid values have undefined behavior.\n     */\n  }, {\n    key: \"lighter\",\n    value: function lighter(tone, ratio) {\n      if (tone < 0.0 || tone > 100.0) {\n        return -1.0;\n      }\n      var darkY = utils.yFromLstar(tone);\n      var lightY = ratio * (darkY + 5.0) - 5.0;\n      var realContrast = Contrast.ratioOfYs(lightY, darkY);\n      var delta = Math.abs(realContrast - ratio);\n      if (realContrast < ratio && delta > 0.04) {\n        return -1;\n      }\n\n      // Ensure gamut mapping, which requires a 'range' on tone, will still result\n      // the correct ratio by darkening slightly.\n      var returnValue = utils.lstarFromY(lightY) + 0.4;\n      if (returnValue < 0 || returnValue > 100) {\n        return -1;\n      }\n      return returnValue;\n    }\n\n    /**\n     * Returns a tone <= tone parameter that ensures ratio parameter.\n     * Return value is between 0 and 100.\n     * Returns -1 if ratio cannot be achieved with tone parameter.\n     *\n     * @param tone Tone return value must contrast with.\n     * Range is 0 to 100. Invalid values will result in -1 being returned.\n     * @param ratio Contrast ratio of return value and tone.\n     * Range is 1 to 21, invalid values have undefined behavior.\n     */\n  }, {\n    key: \"darker\",\n    value: function darker(tone, ratio) {\n      if (tone < 0.0 || tone > 100.0) {\n        return -1.0;\n      }\n      var lightY = utils.yFromLstar(tone);\n      var darkY = (lightY + 5.0) / ratio - 5.0;\n      var realContrast = Contrast.ratioOfYs(lightY, darkY);\n      var delta = Math.abs(realContrast - ratio);\n      if (realContrast < ratio && delta > 0.04) {\n        return -1;\n      }\n\n      // Ensure gamut mapping, which requires a 'range' on tone, will still result\n      // the correct ratio by darkening slightly.\n      var returnValue = utils.lstarFromY(darkY) - 0.4;\n      if (returnValue < 0 || returnValue > 100) {\n        return -1;\n      }\n      return returnValue;\n    }\n\n    /**\n     * Returns a tone >= tone parameter that ensures ratio parameter.\n     * Return value is between 0 and 100.\n     * Returns 100 if ratio cannot be achieved with tone parameter.\n     *\n     * This method is unsafe because the returned value is guaranteed to be in\n     * bounds for tone, i.e. between 0 and 100. However, that value may not reach\n     * the ratio with tone. For example, there is no color lighter than T100.\n     *\n     * @param tone Tone return value must contrast with.\n     * Range is 0 to 100. Invalid values will result in 100 being returned.\n     * @param ratio Desired contrast ratio of return value and tone parameter.\n     * Range is 1 to 21, invalid values have undefined behavior.\n     */\n  }, {\n    key: \"lighterUnsafe\",\n    value: function lighterUnsafe(tone, ratio) {\n      var lighterSafe = Contrast.lighter(tone, ratio);\n      return lighterSafe < 0.0 ? 100.0 : lighterSafe;\n    }\n\n    /**\n     * Returns a tone >= tone parameter that ensures ratio parameter.\n     * Return value is between 0 and 100.\n     * Returns 100 if ratio cannot be achieved with tone parameter.\n     *\n     * This method is unsafe because the returned value is guaranteed to be in\n     * bounds for tone, i.e. between 0 and 100. However, that value may not reach\n     * the [ratio with [tone]. For example, there is no color darker than T0.\n     *\n     * @param tone Tone return value must contrast with.\n     * Range is 0 to 100. Invalid values will result in 0 being returned.\n     * @param ratio Desired contrast ratio of return value and tone parameter.\n     * Range is 1 to 21, invalid values have undefined behavior.\n     */\n  }, {\n    key: \"darkerUnsafe\",\n    value: function darkerUnsafe(tone, ratio) {\n      var darkerSafe = Contrast.darker(tone, ratio);\n      return darkerSafe < 0.0 ? 0.0 : darkerSafe;\n    }\n  }]);\n  return Contrast;\n}();"],"mappings":"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"},"metadata":{},"sourceType":"module"}