{"ast":null,"code":"/** @jsx jsx */\n\nimport { css, jsx } from '@emotion/react';\nimport { propDeprecationWarning } from '@atlaskit/ds-lib/deprecation-warning';\nimport noop from '@atlaskit/ds-lib/noop';\nimport { getBooleanFF } from '@atlaskit/platform-feature-flags';\nimport { N20A } from '@atlaskit/theme/colors';\nimport { borderRadius as borderRadiusFn,\n// eslint-disable-next-line @atlaskit/design-system/no-deprecated-imports\ngridSize as gridSizeFn } from '@atlaskit/theme/constants';\nimport SkeletonShimmer from '../internal/components/skeleton-shimmer';\nvar gridSize = gridSizeFn();\nvar borderRadius = borderRadiusFn();\nvar itemElemSpacing = gridSize * 1.5;\nvar itemExpectedElemSize = gridSize * 3;\nvar itemMinHeight = gridSize * 5;\nvar skeletonItemElemSize = gridSize * 2.5;\nvar itemElemSkeletonOffset = (itemExpectedElemSize - skeletonItemElemSize) / 2;\nvar skeletonTextBorderRadius = 100;\nvar skeletonContentHeight = 9;\nvar skeletonColor = \"var(--ds-skeleton, \".concat(N20A, \")\");\nvar skeletonStyles = css({\n  display: 'flex',\n  minHeight: itemMinHeight,\n  padding: \"0 \".concat(\"var(--ds-space-250, 20px)\"),\n  alignItems: 'center',\n  pointerEvents: 'none',\n  '::after': {\n    height: skeletonContentHeight,\n    backgroundColor: skeletonColor,\n    borderRadius: skeletonTextBorderRadius,\n    content: '\"\"',\n    // This is a little bespoke but we need to push everything down 1px\n    // because the skeleton content should align to the bottom of the text.\n    // Confirm VR test failures before accepting a change.\n    marginBlockStart: 1\n  }\n});\nvar defaultWidthStyles = css({\n  ':nth-of-type(1n)::after': {\n    flexBasis: '70%'\n  },\n  ':nth-of-type(2n)::after': {\n    flexBasis: '50%'\n  },\n  ':nth-of-type(3n)::after': {\n    flexBasis: '60%'\n  },\n  ':nth-of-type(4n)::after': {\n    flexBasis: '90%'\n  },\n  ':nth-of-type(5n)::after': {\n    flexBasis: '35%'\n  },\n  ':nth-of-type(6n)::after': {\n    flexBasis: '77%'\n  }\n});\nvar customWidthStyles = css({\n  '::after': {\n    flexBasis: 'var(--width)'\n  }\n});\nvar beforeElementStyles = css({\n  '::before': {\n    width: skeletonItemElemSize,\n    height: skeletonItemElemSize,\n    flexShrink: 0,\n    backgroundColor: skeletonColor,\n    content: '\"\"',\n    marginInlineEnd: itemElemSpacing + itemElemSkeletonOffset,\n    marginInlineStart: \"var(--ds-space-025, 2px)\"\n  }\n});\nvar avatarStyles = css({\n  '::before': {\n    borderRadius: '100%'\n  }\n});\nvar iconStyles = css({\n  '::before': {\n    borderRadius: borderRadius\n  }\n});\n\n/**\n * __Skeleton item__\n *\n * A skeleton item is used in place of an item when its contents it not ready.\n *\n * - [Examples](https://atlaskit.atlassian.com/packages/design-system/menu/docs/skeleton-item)\n * - [Code](https://atlaskit.atlassian.com/packages/design-system/menu)\n */\nvar SkeletonItem = function SkeletonItem(_ref) {\n  var hasAvatar = _ref.hasAvatar,\n    hasIcon = _ref.hasIcon,\n    _ref$isShimmering = _ref.isShimmering,\n    isShimmering = _ref$isShimmering === void 0 ? false : _ref$isShimmering,\n    testId = _ref.testId,\n    width = _ref.width,\n    _ref$cssFn = _ref.cssFn,\n    cssFn = _ref$cssFn === void 0 ? noop : _ref$cssFn;\n  propDeprecationWarning(\"@atlaskit/menu\" || '', 'cssFn', cssFn !== noop, '' // TODO: Create DAC post when primitives/xcss are available as alternatives\n  );\n\n  var UNSAFE_overrides = getBooleanFF('platform.design-system-team.unsafe-overrides-killswitch_c8j9m') ? undefined : css(cssFn());\n  return jsx(SkeletonShimmer, {\n    isShimmering: isShimmering\n  }, function (_ref2) {\n    var className = _ref2.className;\n    return jsx(\"div\", {\n      className: className,\n      style: {\n        '--width': width\n      },\n      css: [skeletonStyles, (hasAvatar || hasIcon) && beforeElementStyles, hasAvatar && avatarStyles, hasIcon && iconStyles, width ? customWidthStyles : defaultWidthStyles,\n      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage\n      UNSAFE_overrides],\n      \"data-testid\": testId\n    });\n  });\n};\nexport default SkeletonItem;","map":{"version":3,"names":["css","jsx","propDeprecationWarning","noop","getBooleanFF","N20A","borderRadius","borderRadiusFn","gridSize","gridSizeFn","SkeletonShimmer","itemElemSpacing","itemExpectedElemSize","itemMinHeight","skeletonItemElemSize","itemElemSkeletonOffset","skeletonTextBorderRadius","skeletonContentHeight","skeletonColor","concat","skeletonStyles","display","minHeight","padding","alignItems","pointerEvents","height","backgroundColor","content","marginBlockStart","defaultWidthStyles","flexBasis","customWidthStyles","beforeElementStyles","width","flexShrink","marginInlineEnd","marginInlineStart","avatarStyles","iconStyles","SkeletonItem","_ref","hasAvatar","hasIcon","_ref$isShimmering","isShimmering","testId","_ref$cssFn","cssFn","UNSAFE_overrides","undefined","_ref2","className","style"],"sources":["/home/enterpi/Documents/iidm/pixel-kit/node_modules/@atlaskit/menu/dist/esm/menu-item/skeleton-item.js"],"sourcesContent":["/** @jsx jsx */\n\nimport { css, jsx } from '@emotion/react';\nimport { propDeprecationWarning } from '@atlaskit/ds-lib/deprecation-warning';\nimport noop from '@atlaskit/ds-lib/noop';\nimport { getBooleanFF } from '@atlaskit/platform-feature-flags';\nimport { N20A } from '@atlaskit/theme/colors';\nimport { borderRadius as borderRadiusFn,\n// eslint-disable-next-line @atlaskit/design-system/no-deprecated-imports\ngridSize as gridSizeFn } from '@atlaskit/theme/constants';\nimport SkeletonShimmer from '../internal/components/skeleton-shimmer';\nvar gridSize = gridSizeFn();\nvar borderRadius = borderRadiusFn();\nvar itemElemSpacing = gridSize * 1.5;\nvar itemExpectedElemSize = gridSize * 3;\nvar itemMinHeight = gridSize * 5;\nvar skeletonItemElemSize = gridSize * 2.5;\nvar itemElemSkeletonOffset = (itemExpectedElemSize - skeletonItemElemSize) / 2;\nvar skeletonTextBorderRadius = 100;\nvar skeletonContentHeight = 9;\nvar skeletonColor = \"var(--ds-skeleton, \".concat(N20A, \")\");\nvar skeletonStyles = css({\n  display: 'flex',\n  minHeight: itemMinHeight,\n  padding: \"0 \".concat(\"var(--ds-space-250, 20px)\"),\n  alignItems: 'center',\n  pointerEvents: 'none',\n  '::after': {\n    height: skeletonContentHeight,\n    backgroundColor: skeletonColor,\n    borderRadius: skeletonTextBorderRadius,\n    content: '\"\"',\n    // This is a little bespoke but we need to push everything down 1px\n    // because the skeleton content should align to the bottom of the text.\n    // Confirm VR test failures before accepting a change.\n    marginBlockStart: 1\n  }\n});\nvar defaultWidthStyles = css({\n  ':nth-of-type(1n)::after': {\n    flexBasis: '70%'\n  },\n  ':nth-of-type(2n)::after': {\n    flexBasis: '50%'\n  },\n  ':nth-of-type(3n)::after': {\n    flexBasis: '60%'\n  },\n  ':nth-of-type(4n)::after': {\n    flexBasis: '90%'\n  },\n  ':nth-of-type(5n)::after': {\n    flexBasis: '35%'\n  },\n  ':nth-of-type(6n)::after': {\n    flexBasis: '77%'\n  }\n});\nvar customWidthStyles = css({\n  '::after': {\n    flexBasis: 'var(--width)'\n  }\n});\nvar beforeElementStyles = css({\n  '::before': {\n    width: skeletonItemElemSize,\n    height: skeletonItemElemSize,\n    flexShrink: 0,\n    backgroundColor: skeletonColor,\n    content: '\"\"',\n    marginInlineEnd: itemElemSpacing + itemElemSkeletonOffset,\n    marginInlineStart: \"var(--ds-space-025, 2px)\"\n  }\n});\nvar avatarStyles = css({\n  '::before': {\n    borderRadius: '100%'\n  }\n});\nvar iconStyles = css({\n  '::before': {\n    borderRadius: borderRadius\n  }\n});\n\n/**\n * __Skeleton item__\n *\n * A skeleton item is used in place of an item when its contents it not ready.\n *\n * - [Examples](https://atlaskit.atlassian.com/packages/design-system/menu/docs/skeleton-item)\n * - [Code](https://atlaskit.atlassian.com/packages/design-system/menu)\n */\nvar SkeletonItem = function SkeletonItem(_ref) {\n  var hasAvatar = _ref.hasAvatar,\n    hasIcon = _ref.hasIcon,\n    _ref$isShimmering = _ref.isShimmering,\n    isShimmering = _ref$isShimmering === void 0 ? false : _ref$isShimmering,\n    testId = _ref.testId,\n    width = _ref.width,\n    _ref$cssFn = _ref.cssFn,\n    cssFn = _ref$cssFn === void 0 ? noop : _ref$cssFn;\n  propDeprecationWarning(\"@atlaskit/menu\" || '', 'cssFn', cssFn !== noop, '' // TODO: Create DAC post when primitives/xcss are available as alternatives\n  );\n\n  var UNSAFE_overrides = getBooleanFF('platform.design-system-team.unsafe-overrides-killswitch_c8j9m') ? undefined : css(cssFn());\n  return jsx(SkeletonShimmer, {\n    isShimmering: isShimmering\n  }, function (_ref2) {\n    var className = _ref2.className;\n    return jsx(\"div\", {\n      className: className,\n      style: {\n        '--width': width\n      },\n      css: [skeletonStyles, (hasAvatar || hasIcon) && beforeElementStyles, hasAvatar && avatarStyles, hasIcon && iconStyles, width ? customWidthStyles : defaultWidthStyles,\n      // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage\n      UNSAFE_overrides],\n      \"data-testid\": testId\n    });\n  });\n};\nexport default SkeletonItem;"],"mappings":"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"},"metadata":{},"sourceType":"module"}