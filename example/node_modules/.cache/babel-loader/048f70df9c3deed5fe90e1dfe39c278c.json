{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/react';\nimport { useHeading } from './heading-context';\n// https://atlassian.design/foundations/typography\nvar levelMap = {\n  xxlarge: 'h1',\n  xlarge: 'h2',\n  large: 'h3',\n  medium: 'h4',\n  small: 'h5',\n  xsmall: 'h6',\n  xxsmall: 'div'\n};\nvar headingResetStyles = css({\n  color: \"var(--ds-text, #172B4D)\",\n  letterSpacing: 'normal',\n  marginBlock: 0,\n  textTransform: 'none'\n});\nvar inverseStyles = css({\n  color: \"var(--ds-text-inverse, #FFF)\"\n});\n\n/**\n * __Heading__\n *\n * A heading is a typography component used to display text in different sizes and formats.\n *\n * @example\n *\n * ```jsx\n * import Heading from '@atlaskit/heading';\n *\n * const HeadingXXL = () => (\n *   <Heading level=\"xxlarge\">XXL</Heading>\n * );\n * ```\n */\nvar Heading = function Heading(_ref) {\n  var children = _ref.children,\n    variant = _ref.variant,\n    id = _ref.id,\n    testId = _ref.testId,\n    as = _ref.as,\n    _ref$color = _ref.color,\n    color = _ref$color === void 0 ? 'default' : _ref$color;\n  if (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production' && as && typeof as !== 'string') {\n    throw new Error('`as` prop should be a string.');\n  }\n  var _useHeading = useHeading(levelMap[variant]),\n    _useHeading2 = _slicedToArray(_useHeading, 2),\n    hLevel = _useHeading2[0],\n    inferredElement = _useHeading2[1];\n  var Markup = as || inferredElement;\n  var needsAriaRole = Markup === 'div' && hLevel;\n  return jsx(Markup, {\n    id: id,\n    \"data-testid\": testId,\n    role: needsAriaRole ? 'heading' : undefined,\n    \"aria-level\": needsAriaRole ? hLevel : undefined,\n    css: [headingResetStyles, variant && headingVariantStylesMap[variant], color === 'inverse' && inverseStyles]\n  }, children);\n};\n\n/**\n * THIS SECTION WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}\n * @codegen <<SignedSource::cabcd4e0313e10dd81733a6ffcdbc90f>>\n * @codegenId typography\n * @codegenCommand yarn workspace @atlaskit/heading codegen\n */\nvar headingVariantStylesMap = {\n  large: css({\n    font: \"var(--ds-font-heading-large, normal 500 24px/28px var(--ds-font-family-heading))\"\n  }),\n  medium: css({\n    font: \"var(--ds-font-heading-medium, normal 500 20px/24px var(--ds-font-family-heading))\"\n  }),\n  small: css({\n    font: \"var(--ds-font-heading-small, normal 600 16px/20px var(--ds-font-family-heading))\"\n  }),\n  xlarge: css({\n    font: \"var(--ds-font-heading-xlarge, normal 600 29px/32px var(--ds-font-family-heading))\"\n  }),\n  xsmall: css({\n    font: \"var(--ds-font-heading-xsmall, normal 600 14px/16px var(--ds-font-family-heading))\"\n  }),\n  xxlarge: css({\n    font: \"var(--ds-font-heading-xxlarge, normal 500 35px/40px var(--ds-font-family-heading))\"\n  }),\n  xxsmall: css({\n    font: \"var(--ds-font-heading-xxsmall, normal 600 12px/16px var(--ds-font-family-heading))\"\n  })\n};\n/**\n * @codegenEnd\n */\n\nexport default Heading;","map":{"version":3,"names":["_slicedToArray","css","jsx","useHeading","levelMap","xxlarge","xlarge","large","medium","small","xsmall","xxsmall","headingResetStyles","color","letterSpacing","marginBlock","textTransform","inverseStyles","Heading","_ref","children","variant","id","testId","as","_ref$color","process","env","NODE_ENV","Error","_useHeading","_useHeading2","hLevel","inferredElement","Markup","needsAriaRole","role","undefined","headingVariantStylesMap","font"],"sources":["/home/enterpi/Documents/iidm/pixel-kit/node_modules/@atlaskit/heading/dist/esm/heading.partial.js"],"sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/react';\nimport { useHeading } from './heading-context';\n// https://atlassian.design/foundations/typography\nvar levelMap = {\n  xxlarge: 'h1',\n  xlarge: 'h2',\n  large: 'h3',\n  medium: 'h4',\n  small: 'h5',\n  xsmall: 'h6',\n  xxsmall: 'div'\n};\nvar headingResetStyles = css({\n  color: \"var(--ds-text, #172B4D)\",\n  letterSpacing: 'normal',\n  marginBlock: 0,\n  textTransform: 'none'\n});\nvar inverseStyles = css({\n  color: \"var(--ds-text-inverse, #FFF)\"\n});\n\n/**\n * __Heading__\n *\n * A heading is a typography component used to display text in different sizes and formats.\n *\n * @example\n *\n * ```jsx\n * import Heading from '@atlaskit/heading';\n *\n * const HeadingXXL = () => (\n *   <Heading level=\"xxlarge\">XXL</Heading>\n * );\n * ```\n */\nvar Heading = function Heading(_ref) {\n  var children = _ref.children,\n    variant = _ref.variant,\n    id = _ref.id,\n    testId = _ref.testId,\n    as = _ref.as,\n    _ref$color = _ref.color,\n    color = _ref$color === void 0 ? 'default' : _ref$color;\n  if (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production' && as && typeof as !== 'string') {\n    throw new Error('`as` prop should be a string.');\n  }\n  var _useHeading = useHeading(levelMap[variant]),\n    _useHeading2 = _slicedToArray(_useHeading, 2),\n    hLevel = _useHeading2[0],\n    inferredElement = _useHeading2[1];\n  var Markup = as || inferredElement;\n  var needsAriaRole = Markup === 'div' && hLevel;\n  return jsx(Markup, {\n    id: id,\n    \"data-testid\": testId,\n    role: needsAriaRole ? 'heading' : undefined,\n    \"aria-level\": needsAriaRole ? hLevel : undefined,\n    css: [headingResetStyles, variant && headingVariantStylesMap[variant], color === 'inverse' && inverseStyles]\n  }, children);\n};\n\n/**\n * THIS SECTION WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}\n * @codegen <<SignedSource::cabcd4e0313e10dd81733a6ffcdbc90f>>\n * @codegenId typography\n * @codegenCommand yarn workspace @atlaskit/heading codegen\n */\nvar headingVariantStylesMap = {\n  large: css({\n    font: \"var(--ds-font-heading-large, normal 500 24px/28px var(--ds-font-family-heading))\"\n  }),\n  medium: css({\n    font: \"var(--ds-font-heading-medium, normal 500 20px/24px var(--ds-font-family-heading))\"\n  }),\n  small: css({\n    font: \"var(--ds-font-heading-small, normal 600 16px/20px var(--ds-font-family-heading))\"\n  }),\n  xlarge: css({\n    font: \"var(--ds-font-heading-xlarge, normal 600 29px/32px var(--ds-font-family-heading))\"\n  }),\n  xsmall: css({\n    font: \"var(--ds-font-heading-xsmall, normal 600 14px/16px var(--ds-font-family-heading))\"\n  }),\n  xxlarge: css({\n    font: \"var(--ds-font-heading-xxlarge, normal 500 35px/40px var(--ds-font-family-heading))\"\n  }),\n  xxsmall: css({\n    font: \"var(--ds-font-heading-xxsmall, normal 600 12px/16px var(--ds-font-family-heading))\"\n  })\n};\n/**\n * @codegenEnd\n */\n\nexport default Heading;"],"mappings":"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"},"metadata":{},"sourceType":"module"}