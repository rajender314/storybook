{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { getBooleanFF } from '@atlaskit/platform-feature-flags';\nimport getThemeHtmlAttrs from '../get-theme-html-attrs';\nimport ColorModeObserver from './color-mode-listeners';\nimport ContrastModeObserver from './contrast-mode-listeners';\n\n/**\n * Given ThemeState, sets appropriate html attributes on the documentElement,\n * adds a listener to keep colorMode updated, and returns a function to unbind.\n */\nexport default function configurePage(themeState) {\n  if (themeState.colorMode === 'auto') {\n    // Set colorMode based on the user preference\n    themeState.colorMode = ColorModeObserver.getColorMode();\n    // Bind a listener (if one doesn't already exist) to keep colorMode updated\n    ColorModeObserver.bind();\n  } else {\n    ColorModeObserver.unbind();\n  }\n  if (getBooleanFF('platform.design-system-team.increased-contrast-themes')) {\n    if (themeState.contrastMode === 'auto') {\n      // Set contrastMode based on the user preference\n      themeState.contrastMode = ContrastModeObserver.getContrastMode();\n      // Bind a listener (if one doesn't already exist) to keep contrastMode updated\n      ContrastModeObserver.bind();\n    } else {\n      ContrastModeObserver.unbind();\n    }\n  }\n  var themeAttributes = getThemeHtmlAttrs(themeState);\n  Object.entries(themeAttributes).forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      key = _ref2[0],\n      value = _ref2[1];\n    document.documentElement.setAttribute(key, value);\n  });\n  return function () {\n    ColorModeObserver.unbind();\n    if (getBooleanFF('platform.design-system-team.increased-contrast-themes')) {\n      ContrastModeObserver.unbind();\n    }\n  };\n}","map":{"version":3,"names":["_slicedToArray","getBooleanFF","getThemeHtmlAttrs","ColorModeObserver","ContrastModeObserver","configurePage","themeState","colorMode","getColorMode","bind","unbind","contrastMode","getContrastMode","themeAttributes","Object","entries","forEach","_ref","_ref2","key","value","document","documentElement","setAttribute"],"sources":["/home/enterpi/Documents/iidm/pixel-kit/node_modules/@atlaskit/drawer/node_modules/@atlaskit/tokens/dist/esm/utils/configure-page.js"],"sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { getBooleanFF } from '@atlaskit/platform-feature-flags';\nimport getThemeHtmlAttrs from '../get-theme-html-attrs';\nimport ColorModeObserver from './color-mode-listeners';\nimport ContrastModeObserver from './contrast-mode-listeners';\n\n/**\n * Given ThemeState, sets appropriate html attributes on the documentElement,\n * adds a listener to keep colorMode updated, and returns a function to unbind.\n */\nexport default function configurePage(themeState) {\n  if (themeState.colorMode === 'auto') {\n    // Set colorMode based on the user preference\n    themeState.colorMode = ColorModeObserver.getColorMode();\n    // Bind a listener (if one doesn't already exist) to keep colorMode updated\n    ColorModeObserver.bind();\n  } else {\n    ColorModeObserver.unbind();\n  }\n  if (getBooleanFF('platform.design-system-team.increased-contrast-themes')) {\n    if (themeState.contrastMode === 'auto') {\n      // Set contrastMode based on the user preference\n      themeState.contrastMode = ContrastModeObserver.getContrastMode();\n      // Bind a listener (if one doesn't already exist) to keep contrastMode updated\n      ContrastModeObserver.bind();\n    } else {\n      ContrastModeObserver.unbind();\n    }\n  }\n  var themeAttributes = getThemeHtmlAttrs(themeState);\n  Object.entries(themeAttributes).forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      key = _ref2[0],\n      value = _ref2[1];\n    document.documentElement.setAttribute(key, value);\n  });\n  return function () {\n    ColorModeObserver.unbind();\n    if (getBooleanFF('platform.design-system-team.increased-contrast-themes')) {\n      ContrastModeObserver.unbind();\n    }\n  };\n}"],"mappings":"AAAA,OAAOA,cAAc,MAAM,sCAAsC;AACjE,SAASC,YAAY,QAAQ,kCAAkC;AAC/D,OAAOC,iBAAiB,MAAM,yBAAyB;AACvD,OAAOC,iBAAiB,MAAM,wBAAwB;AACtD,OAAOC,oBAAoB,MAAM,2BAA2B;;AAE5D;AACA;AACA;AACA;AACA,eAAe,SAASC,aAAaA,CAACC,UAAU,EAAE;EAChD,IAAIA,UAAU,CAACC,SAAS,KAAK,MAAM,EAAE;IACnC;IACAD,UAAU,CAACC,SAAS,GAAGJ,iBAAiB,CAACK,YAAY,CAAC,CAAC;IACvD;IACAL,iBAAiB,CAACM,IAAI,CAAC,CAAC;EAC1B,CAAC,MAAM;IACLN,iBAAiB,CAACO,MAAM,CAAC,CAAC;EAC5B;EACA,IAAIT,YAAY,CAAC,uDAAuD,CAAC,EAAE;IACzE,IAAIK,UAAU,CAACK,YAAY,KAAK,MAAM,EAAE;MACtC;MACAL,UAAU,CAACK,YAAY,GAAGP,oBAAoB,CAACQ,eAAe,CAAC,CAAC;MAChE;MACAR,oBAAoB,CAACK,IAAI,CAAC,CAAC;IAC7B,CAAC,MAAM;MACLL,oBAAoB,CAACM,MAAM,CAAC,CAAC;IAC/B;EACF;EACA,IAAIG,eAAe,GAAGX,iBAAiB,CAACI,UAAU,CAAC;EACnDQ,MAAM,CAACC,OAAO,CAACF,eAAe,CAAC,CAACG,OAAO,CAAC,UAAUC,IAAI,EAAE;IACtD,IAAIC,KAAK,GAAGlB,cAAc,CAACiB,IAAI,EAAE,CAAC,CAAC;MACjCE,GAAG,GAAGD,KAAK,CAAC,CAAC,CAAC;MACdE,KAAK,GAAGF,KAAK,CAAC,CAAC,CAAC;IAClBG,QAAQ,CAACC,eAAe,CAACC,YAAY,CAACJ,GAAG,EAAEC,KAAK,CAAC;EACnD,CAAC,CAAC;EACF,OAAO,YAAY;IACjBjB,iBAAiB,CAACO,MAAM,CAAC,CAAC;IAC1B,IAAIT,YAAY,CAAC,uDAAuD,CAAC,EAAE;MACzEG,oBAAoB,CAACM,MAAM,CAAC,CAAC;IAC/B;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module"}