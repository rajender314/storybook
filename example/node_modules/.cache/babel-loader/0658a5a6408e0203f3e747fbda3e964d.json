{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { bind as _bind } from 'bind-event-listener';\nimport { COLOR_MODE_ATTRIBUTE } from '../constants';\nimport { darkModeMediaQuery } from './theme-loading';\nvar isMatchMediaAvailable = typeof window !== 'undefined' && 'matchMedia' in window;\n\n/**\n * Updates the current theme when the system theme changes. Should be bound\n * to an event listener listening on the '(prefers-color-scheme: dark)' query\n * @param e The event representing a change in system theme.\n */\nfunction checkNativeListener(e) {\n  var element = document.documentElement;\n  element.setAttribute(COLOR_MODE_ATTRIBUTE, e.matches ? 'dark' : 'light');\n}\nvar darkModeMql = isMatchMediaAvailable && window.matchMedia(darkModeMediaQuery);\nvar ColorModeObserver = /*#__PURE__*/function () {\n  function ColorModeObserver() {\n    _classCallCheck(this, ColorModeObserver);\n    _defineProperty(this, \"unbindThemeChangeListener\", null);\n  }\n  _createClass(ColorModeObserver, [{\n    key: \"getColorMode\",\n    value: function getColorMode() {\n      if (!darkModeMql) {\n        return 'light';\n      }\n      return darkModeMql !== null && darkModeMql !== void 0 && darkModeMql.matches ? 'dark' : 'light';\n    }\n  }, {\n    key: \"bind\",\n    value: function bind() {\n      if (darkModeMql && this.unbindThemeChangeListener === null) {\n        this.unbindThemeChangeListener = _bind(darkModeMql, {\n          type: 'change',\n          listener: checkNativeListener\n        });\n      }\n    }\n  }, {\n    key: \"unbind\",\n    value: function unbind() {\n      if (this.unbindThemeChangeListener) {\n        this.unbindThemeChangeListener();\n        this.unbindThemeChangeListener = null;\n      }\n    }\n  }]);\n  return ColorModeObserver;\n}();\n/**\n * A singleton color mode observer - binds \"auto\" switching logic to a single `mediaQueryList` listener\n * that can be unbound by any consumer when no longer needed.\n */\nvar SingletonColorModeObserver = new ColorModeObserver();\nexport default SingletonColorModeObserver;","map":{"version":3,"names":["_classCallCheck","_createClass","_defineProperty","bind","_bind","COLOR_MODE_ATTRIBUTE","darkModeMediaQuery","isMatchMediaAvailable","window","checkNativeListener","e","element","document","documentElement","setAttribute","matches","darkModeMql","matchMedia","ColorModeObserver","key","value","getColorMode","unbindThemeChangeListener","type","listener","unbind","SingletonColorModeObserver"],"sources":["/home/enterpi/Documents/iidm/pixel-kit/node_modules/@atlaskit/primitives/node_modules/@atlaskit/tokens/dist/esm/utils/color-mode-listeners.js"],"sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { bind as _bind } from 'bind-event-listener';\nimport { COLOR_MODE_ATTRIBUTE } from '../constants';\nimport { darkModeMediaQuery } from './theme-loading';\nvar isMatchMediaAvailable = typeof window !== 'undefined' && 'matchMedia' in window;\n\n/**\n * Updates the current theme when the system theme changes. Should be bound\n * to an event listener listening on the '(prefers-color-scheme: dark)' query\n * @param e The event representing a change in system theme.\n */\nfunction checkNativeListener(e) {\n  var element = document.documentElement;\n  element.setAttribute(COLOR_MODE_ATTRIBUTE, e.matches ? 'dark' : 'light');\n}\nvar darkModeMql = isMatchMediaAvailable && window.matchMedia(darkModeMediaQuery);\nvar ColorModeObserver = /*#__PURE__*/function () {\n  function ColorModeObserver() {\n    _classCallCheck(this, ColorModeObserver);\n    _defineProperty(this, \"unbindThemeChangeListener\", null);\n  }\n  _createClass(ColorModeObserver, [{\n    key: \"getColorMode\",\n    value: function getColorMode() {\n      if (!darkModeMql) {\n        return 'light';\n      }\n      return darkModeMql !== null && darkModeMql !== void 0 && darkModeMql.matches ? 'dark' : 'light';\n    }\n  }, {\n    key: \"bind\",\n    value: function bind() {\n      if (darkModeMql && this.unbindThemeChangeListener === null) {\n        this.unbindThemeChangeListener = _bind(darkModeMql, {\n          type: 'change',\n          listener: checkNativeListener\n        });\n      }\n    }\n  }, {\n    key: \"unbind\",\n    value: function unbind() {\n      if (this.unbindThemeChangeListener) {\n        this.unbindThemeChangeListener();\n        this.unbindThemeChangeListener = null;\n      }\n    }\n  }]);\n  return ColorModeObserver;\n}();\n/**\n * A singleton color mode observer - binds \"auto\" switching logic to a single `mediaQueryList` listener\n * that can be unbound by any consumer when no longer needed.\n */\nvar SingletonColorModeObserver = new ColorModeObserver();\nexport default SingletonColorModeObserver;"],"mappings":"AAAA,OAAOA,eAAe,MAAM,uCAAuC;AACnE,OAAOC,YAAY,MAAM,oCAAoC;AAC7D,OAAOC,eAAe,MAAM,uCAAuC;AACnE,SAASC,IAAI,IAAIC,KAAK,QAAQ,qBAAqB;AACnD,SAASC,oBAAoB,QAAQ,cAAc;AACnD,SAASC,kBAAkB,QAAQ,iBAAiB;AACpD,IAAIC,qBAAqB,GAAG,OAAOC,MAAM,KAAK,WAAW,IAAI,YAAY,IAAIA,MAAM;;AAEnF;AACA;AACA;AACA;AACA;AACA,SAASC,mBAAmBA,CAACC,CAAC,EAAE;EAC9B,IAAIC,OAAO,GAAGC,QAAQ,CAACC,eAAe;EACtCF,OAAO,CAACG,YAAY,CAACT,oBAAoB,EAAEK,CAAC,CAACK,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC;AAC1E;AACA,IAAIC,WAAW,GAAGT,qBAAqB,IAAIC,MAAM,CAACS,UAAU,CAACX,kBAAkB,CAAC;AAChF,IAAIY,iBAAiB,GAAG,aAAa,YAAY;EAC/C,SAASA,iBAAiBA,CAAA,EAAG;IAC3BlB,eAAe,CAAC,IAAI,EAAEkB,iBAAiB,CAAC;IACxChB,eAAe,CAAC,IAAI,EAAE,2BAA2B,EAAE,IAAI,CAAC;EAC1D;EACAD,YAAY,CAACiB,iBAAiB,EAAE,CAAC;IAC/BC,GAAG,EAAE,cAAc;IACnBC,KAAK,EAAE,SAASC,YAAYA,CAAA,EAAG;MAC7B,IAAI,CAACL,WAAW,EAAE;QAChB,OAAO,OAAO;MAChB;MACA,OAAOA,WAAW,KAAK,IAAI,IAAIA,WAAW,KAAK,KAAK,CAAC,IAAIA,WAAW,CAACD,OAAO,GAAG,MAAM,GAAG,OAAO;IACjG;EACF,CAAC,EAAE;IACDI,GAAG,EAAE,MAAM;IACXC,KAAK,EAAE,SAASjB,IAAIA,CAAA,EAAG;MACrB,IAAIa,WAAW,IAAI,IAAI,CAACM,yBAAyB,KAAK,IAAI,EAAE;QAC1D,IAAI,CAACA,yBAAyB,GAAGlB,KAAK,CAACY,WAAW,EAAE;UAClDO,IAAI,EAAE,QAAQ;UACdC,QAAQ,EAAEf;QACZ,CAAC,CAAC;MACJ;IACF;EACF,CAAC,EAAE;IACDU,GAAG,EAAE,QAAQ;IACbC,KAAK,EAAE,SAASK,MAAMA,CAAA,EAAG;MACvB,IAAI,IAAI,CAACH,yBAAyB,EAAE;QAClC,IAAI,CAACA,yBAAyB,CAAC,CAAC;QAChC,IAAI,CAACA,yBAAyB,GAAG,IAAI;MACvC;IACF;EACF,CAAC,CAAC,CAAC;EACH,OAAOJ,iBAAiB;AAC1B,CAAC,CAAC,CAAC;AACH;AACA;AACA;AACA;AACA,IAAIQ,0BAA0B,GAAG,IAAIR,iBAAiB,CAAC,CAAC;AACxD,eAAeQ,0BAA0B"},"metadata":{},"sourceType":"module"}