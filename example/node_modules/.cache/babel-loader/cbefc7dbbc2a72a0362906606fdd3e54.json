{"ast":null,"code":"/** @jsx jsx */\nimport { css, jsx } from '@emotion/react';\nimport { ExitingPersistence, FadeIn } from '@atlaskit/motion';\nimport { gridSize as getGridSize } from '@atlaskit/theme/constants';\nvar gridSize = getGridSize();\nvar paddingLeft = gridSize * 5;\nvar expanderStyles = css({\n  display: 'flex',\n  minWidth: 0,\n  maxHeight: 0,\n  padding: \"0 0 0 \".concat(paddingLeft, \"px\"),\n  justifyContent: 'center',\n  flex: '1 1 100%',\n  flexDirection: 'column',\n  transition: \"max-height 0.3s\"\n});\nvar expandedStyles = css({\n  maxHeight: 150\n});\nvar Expander = function Expander(_ref) {\n  var children = _ref.children,\n    isExpanded = _ref.isExpanded,\n    testId = _ref.testId;\n  // Need to always render the ExpanderInternal otherwise the\n  // reveal transition doesn't happen. We can't use CSS animation for\n  // the the reveal because we don't know the height of the content.\n  return jsx(\"div\", {\n    \"aria-hidden\": !isExpanded,\n    css: [expanderStyles, isExpanded && expandedStyles],\n    \"data-testid\": testId && \"\".concat(testId, \"-expander\")\n  }, jsx(ExitingPersistence, {\n    appear: true\n  }, isExpanded && jsx(FadeIn, null, function (props) {\n    return jsx(\"div\", props, children);\n  })));\n}; // eslint-disable-next-line @repo/internal/react/require-jsdoc\n\nexport default Expander;","map":{"version":3,"names":["css","jsx","ExitingPersistence","FadeIn","gridSize","getGridSize","paddingLeft","expanderStyles","display","minWidth","maxHeight","padding","concat","justifyContent","flex","flexDirection","transition","expandedStyles","Expander","_ref","children","isExpanded","testId","appear","props"],"sources":["/home/enterpi/Documents/iidm/pixel-kit/node_modules/@atlaskit/flag/dist/esm/internal/expander.js"],"sourcesContent":["/** @jsx jsx */\nimport { css, jsx } from '@emotion/react';\nimport { ExitingPersistence, FadeIn } from '@atlaskit/motion';\nimport { gridSize as getGridSize } from '@atlaskit/theme/constants';\nvar gridSize = getGridSize();\nvar paddingLeft = gridSize * 5;\nvar expanderStyles = css({\n  display: 'flex',\n  minWidth: 0,\n  maxHeight: 0,\n  padding: \"0 0 0 \".concat(paddingLeft, \"px\"),\n  justifyContent: 'center',\n  flex: '1 1 100%',\n  flexDirection: 'column',\n  transition: \"max-height 0.3s\"\n});\nvar expandedStyles = css({\n  maxHeight: 150\n});\n\nvar Expander = function Expander(_ref) {\n  var children = _ref.children,\n      isExpanded = _ref.isExpanded,\n      testId = _ref.testId;\n  // Need to always render the ExpanderInternal otherwise the\n  // reveal transition doesn't happen. We can't use CSS animation for\n  // the the reveal because we don't know the height of the content.\n  return jsx(\"div\", {\n    \"aria-hidden\": !isExpanded,\n    css: [expanderStyles, isExpanded && expandedStyles],\n    \"data-testid\": testId && \"\".concat(testId, \"-expander\")\n  }, jsx(ExitingPersistence, {\n    appear: true\n  }, isExpanded && jsx(FadeIn, null, function (props) {\n    return jsx(\"div\", props, children);\n  })));\n}; // eslint-disable-next-line @repo/internal/react/require-jsdoc\n\n\nexport default Expander;"],"mappings":"AAAA;AACA,SAASA,GAAG,EAAEC,GAAG,QAAQ,gBAAgB;AACzC,SAASC,kBAAkB,EAAEC,MAAM,QAAQ,kBAAkB;AAC7D,SAASC,QAAQ,IAAIC,WAAW,QAAQ,2BAA2B;AACnE,IAAID,QAAQ,GAAGC,WAAW,CAAC,CAAC;AAC5B,IAAIC,WAAW,GAAGF,QAAQ,GAAG,CAAC;AAC9B,IAAIG,cAAc,GAAGP,GAAG,CAAC;EACvBQ,OAAO,EAAE,MAAM;EACfC,QAAQ,EAAE,CAAC;EACXC,SAAS,EAAE,CAAC;EACZC,OAAO,EAAE,QAAQ,CAACC,MAAM,CAACN,WAAW,EAAE,IAAI,CAAC;EAC3CO,cAAc,EAAE,QAAQ;EACxBC,IAAI,EAAE,UAAU;EAChBC,aAAa,EAAE,QAAQ;EACvBC,UAAU,EAAE;AACd,CAAC,CAAC;AACF,IAAIC,cAAc,GAAGjB,GAAG,CAAC;EACvBU,SAAS,EAAE;AACb,CAAC,CAAC;AAEF,IAAIQ,QAAQ,GAAG,SAASA,QAAQA,CAACC,IAAI,EAAE;EACrC,IAAIC,QAAQ,GAAGD,IAAI,CAACC,QAAQ;IACxBC,UAAU,GAAGF,IAAI,CAACE,UAAU;IAC5BC,MAAM,GAAGH,IAAI,CAACG,MAAM;EACxB;EACA;EACA;EACA,OAAOrB,GAAG,CAAC,KAAK,EAAE;IAChB,aAAa,EAAE,CAACoB,UAAU;IAC1BrB,GAAG,EAAE,CAACO,cAAc,EAAEc,UAAU,IAAIJ,cAAc,CAAC;IACnD,aAAa,EAAEK,MAAM,IAAI,EAAE,CAACV,MAAM,CAACU,MAAM,EAAE,WAAW;EACxD,CAAC,EAAErB,GAAG,CAACC,kBAAkB,EAAE;IACzBqB,MAAM,EAAE;EACV,CAAC,EAAEF,UAAU,IAAIpB,GAAG,CAACE,MAAM,EAAE,IAAI,EAAE,UAAUqB,KAAK,EAAE;IAClD,OAAOvB,GAAG,CAAC,KAAK,EAAEuB,KAAK,EAAEJ,QAAQ,CAAC;EACpC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC;;AAGH,eAAeF,QAAQ"},"metadata":{},"sourceType":"module"}