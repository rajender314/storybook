{"ast":null,"code":"import { createContext, useContext } from 'react';\nimport { PHASE } from '../constants';\nimport { LISTENERS } from './listeners';\nimport { createSubscribe } from './utils';\nlet CURRENT_PHASE = PHASE.PAINT;\nexport const setCurrent = phase => {\n  CURRENT_PHASE = phase;\n  LISTENERS.slice(0).forEach(listener => listener(phase));\n};\nexport const LazyPhaseContext = /*#__PURE__*/createContext({\n  subscribe: createSubscribe(LISTENERS),\n  currentValue: () => CURRENT_PHASE,\n  api: {\n    startNextPhase: () => {\n      setCurrent(PHASE.AFTER_PAINT);\n    },\n    resetPhase: () => setCurrent(PHASE.PAINT)\n  }\n});\nexport const useLazyPhase = () => {\n  const v = useContext(LazyPhaseContext);\n  return v.api;\n};","map":{"version":3,"names":["createContext","useContext","PHASE","LISTENERS","createSubscribe","CURRENT_PHASE","PAINT","setCurrent","phase","slice","forEach","listener","LazyPhaseContext","subscribe","currentValue","api","startNextPhase","AFTER_PAINT","resetPhase","useLazyPhase","v"],"sources":["../../../src/phase/context.tsx"],"sourcesContent":["import { createContext, useContext } from 'react';\n\nimport { PHASE } from '../constants';\nimport type { SubscriptionContextValue } from '../lazy/types';\n\nimport { LISTENERS } from './listeners';\nimport type { Listener } from './listeners';\nimport { createSubscribe } from './utils';\n\nlet CURRENT_PHASE = PHASE.PAINT;\n\nexport const setCurrent = (phase: number) => {\n  CURRENT_PHASE = phase;\n  LISTENERS.slice(0).forEach((listener: Listener) => listener(phase));\n};\n\ninterface LazyPhaseContextApi extends SubscriptionContextValue {\n  api: {\n    startNextPhase: () => void;\n    resetPhase: () => void;\n  };\n}\n\nexport const LazyPhaseContext = createContext<LazyPhaseContextApi>({\n  subscribe: createSubscribe(LISTENERS),\n  currentValue: () => CURRENT_PHASE,\n  api: {\n    startNextPhase: () => {\n      setCurrent(PHASE.AFTER_PAINT);\n    },\n    resetPhase: () => setCurrent(PHASE.PAINT),\n  },\n});\n\nexport const useLazyPhase = () => {\n  const v = useContext(LazyPhaseContext);\n\n  return v.api;\n};\n"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,UAAxB,QAA0C,OAA1C;AAEA,SAASC,KAAT,QAAsB,cAAtB;AAGA,SAASC,SAAT,QAA0B,aAA1B;AAEA,SAASC,eAAT,QAAgC,SAAhC;AAEA,IAAIC,aAAa,GAAGH,KAAK,CAACI,KAA1B;AAEA,OAAO,MAAMC,UAAU,GAAIC,KAAD,IAAmB;EAC3CH,aAAa,GAAGG,KAAhB;EACAL,SAAS,CAACM,KAAV,CAAgB,CAAhB,EAAmBC,OAAnB,CAA4BC,QAAD,IAAwBA,QAAQ,CAACH,KAAD,CAA3D;AACD,CAHM;AAYP,OAAO,MAAMI,gBAAgB,gBAAGZ,aAAa,CAAsB;EACjEa,SAAS,EAAET,eAAe,CAACD,SAAD,CADuC;EAEjEW,YAAY,EAAEA,CAAA,KAAMT,aAF6C;EAGjEU,GAAG,EAAE;IACHC,cAAc,EAAEA,CAAA,KAAM;MACpBT,UAAU,CAACL,KAAK,CAACe,WAAP,CAAV;IACD,CAHE;IAIHC,UAAU,EAAEA,CAAA,KAAMX,UAAU,CAACL,KAAK,CAACI,KAAP;EAJzB;AAH4D,CAAtB,CAAtC;AAWP,OAAO,MAAMa,YAAY,GAAGA,CAAA,KAAM;EAChC,MAAMC,CAAC,GAAGnB,UAAU,CAACW,gBAAD,CAApB;EAEA,OAAOQ,CAAC,CAACL,GAAT;AACD,CAJM"},"metadata":{},"sourceType":"module"}