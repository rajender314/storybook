{"ast":null,"code":"import tokenValuesDark from '../artifacts/atlassian-dark-token-value-for-contrast-check';\nimport tokenValuesLight from '../artifacts/atlassian-light-token-value-for-contrast-check';\nimport { getContrastRatio } from './color-utils';\nexport var additionalChecks = [{\n  foreground: 'color.text.brand',\n  backgroundLight: 'elevation.surface.sunken',\n  backgroundDark: 'elevation.surface.overlay',\n  desiredContrast: 4.5,\n  updatedTokens: [\n  // In light mode: darken the following tokens by one base token\n  // In dark mode: lighten the following tokens by one base token\n  'color.text.brand', 'color.text.selected', 'color.link', 'color.link.pressed', 'color.icon.brand', 'color.icon.selected']\n}, {\n  foreground: 'color.text.brand',\n  backgroundLight: 'color.background.selected',\n  backgroundDark: 'color.background.selected',\n  desiredContrast: 4.5,\n  // In light mode: darken the following tokens by one base token\n  // In dark mode: lighten the following tokens by one base toke\n  updatedTokens: ['color.text.brand', 'color.link', 'color.link.pressed']\n}, {\n  foreground: 'color.text.selected',\n  backgroundLight: 'color.background.selected',\n  backgroundDark: 'color.background.selected',\n  desiredContrast: 4.5,\n  // In light mode: darken the following tokens by one base token\n  // In dark mode: lighten the following tokens by one base token\n  updatedTokens: ['color.text.selected', 'color.icon.selected']\n}, {\n  foreground: 'color.border.brand',\n  backgroundLight: 'elevation.surface.sunken',\n  backgroundDark: 'elevation.surface.overlay',\n  desiredContrast: 3,\n  // In light mode: darken the following tokens by one base token\n  // In dark mode: lighten the following tokens by one base toke\n  updatedTokens: ['color.border.brand', 'color.border.selected']\n}, {\n  foreground: 'color.chart.brand',\n  backgroundLight: 'elevation.surface.sunken',\n  backgroundDark: 'elevation.surface.overlay',\n  desiredContrast: 3,\n  // In light mode: darken the following tokens by one base token\n  // In dark mode: lighten the following tokens by one base token\n  updatedTokens: ['color.chart.brand', 'color.chart.brand.hovered']\n}];\nvar getColorFromTokenRaw = function getColorFromTokenRaw(tokenName, mode) {\n  return mode === 'light' ? tokenValuesLight[tokenName] : tokenValuesDark[tokenName];\n};\nexport var additionalContrastChecker = function additionalContrastChecker(_ref) {\n  var customThemeTokenMap = _ref.customThemeTokenMap,\n    mode = _ref.mode,\n    themeRamp = _ref.themeRamp;\n  var updatedCustomThemeTokenMap = {};\n  var brandTokens = Object.keys(customThemeTokenMap);\n  additionalChecks.forEach(function (pairing) {\n    var backgroundLight = pairing.backgroundLight,\n      backgroundDark = pairing.backgroundDark,\n      foreground = pairing.foreground,\n      desiredContrast = pairing.desiredContrast,\n      updatedTokens = pairing.updatedTokens;\n    var background = mode === 'light' ? backgroundLight : backgroundDark;\n    var foregroundTokenValue = customThemeTokenMap[foreground];\n    var backgroundTokenValue = customThemeTokenMap[background];\n    var foregroundColor = brandTokens.includes(foreground) ? typeof foregroundTokenValue === 'string' ? foregroundTokenValue : themeRamp[foregroundTokenValue] : getColorFromTokenRaw(foreground, mode);\n    var backgroundColor = brandTokens.includes(background) ? typeof backgroundTokenValue === 'string' ? backgroundTokenValue : themeRamp[backgroundTokenValue] : getColorFromTokenRaw(background, mode);\n    var contrast = getContrastRatio(foregroundColor, backgroundColor);\n    if (contrast <= desiredContrast) {\n      updatedTokens.forEach(function (token) {\n        var rampValue = customThemeTokenMap[token];\n        if (typeof rampValue === 'number') {\n          updatedCustomThemeTokenMap[token] = mode === 'light' ? rampValue + 1 : rampValue - 1;\n        }\n      });\n    }\n  });\n  return updatedCustomThemeTokenMap;\n};","map":{"version":3,"names":["tokenValuesDark","tokenValuesLight","getContrastRatio","additionalChecks","foreground","backgroundLight","backgroundDark","desiredContrast","updatedTokens","getColorFromTokenRaw","tokenName","mode","additionalContrastChecker","_ref","customThemeTokenMap","themeRamp","updatedCustomThemeTokenMap","brandTokens","Object","keys","forEach","pairing","background","foregroundTokenValue","backgroundTokenValue","foregroundColor","includes","backgroundColor","contrast","token","rampValue"],"sources":["/home/enterpi/Documents/iidm/pixel-kit/node_modules/@atlaskit/app-provider/node_modules/@atlaskit/tokens/dist/esm/utils/custom-theme-token-contrast-check.js"],"sourcesContent":["import tokenValuesDark from '../artifacts/atlassian-dark-token-value-for-contrast-check';\nimport tokenValuesLight from '../artifacts/atlassian-light-token-value-for-contrast-check';\nimport { getContrastRatio } from './color-utils';\nexport var additionalChecks = [{\n  foreground: 'color.text.brand',\n  backgroundLight: 'elevation.surface.sunken',\n  backgroundDark: 'elevation.surface.overlay',\n  desiredContrast: 4.5,\n  updatedTokens: [\n  // In light mode: darken the following tokens by one base token\n  // In dark mode: lighten the following tokens by one base token\n  'color.text.brand', 'color.text.selected', 'color.link', 'color.link.pressed', 'color.icon.brand', 'color.icon.selected']\n}, {\n  foreground: 'color.text.brand',\n  backgroundLight: 'color.background.selected',\n  backgroundDark: 'color.background.selected',\n  desiredContrast: 4.5,\n  // In light mode: darken the following tokens by one base token\n  // In dark mode: lighten the following tokens by one base toke\n  updatedTokens: ['color.text.brand', 'color.link', 'color.link.pressed']\n}, {\n  foreground: 'color.text.selected',\n  backgroundLight: 'color.background.selected',\n  backgroundDark: 'color.background.selected',\n  desiredContrast: 4.5,\n  // In light mode: darken the following tokens by one base token\n  // In dark mode: lighten the following tokens by one base token\n  updatedTokens: ['color.text.selected', 'color.icon.selected']\n}, {\n  foreground: 'color.border.brand',\n  backgroundLight: 'elevation.surface.sunken',\n  backgroundDark: 'elevation.surface.overlay',\n  desiredContrast: 3,\n  // In light mode: darken the following tokens by one base token\n  // In dark mode: lighten the following tokens by one base toke\n  updatedTokens: ['color.border.brand', 'color.border.selected']\n}, {\n  foreground: 'color.chart.brand',\n  backgroundLight: 'elevation.surface.sunken',\n  backgroundDark: 'elevation.surface.overlay',\n  desiredContrast: 3,\n  // In light mode: darken the following tokens by one base token\n  // In dark mode: lighten the following tokens by one base token\n  updatedTokens: ['color.chart.brand', 'color.chart.brand.hovered']\n}];\nvar getColorFromTokenRaw = function getColorFromTokenRaw(tokenName, mode) {\n  return mode === 'light' ? tokenValuesLight[tokenName] : tokenValuesDark[tokenName];\n};\nexport var additionalContrastChecker = function additionalContrastChecker(_ref) {\n  var customThemeTokenMap = _ref.customThemeTokenMap,\n    mode = _ref.mode,\n    themeRamp = _ref.themeRamp;\n  var updatedCustomThemeTokenMap = {};\n  var brandTokens = Object.keys(customThemeTokenMap);\n  additionalChecks.forEach(function (pairing) {\n    var backgroundLight = pairing.backgroundLight,\n      backgroundDark = pairing.backgroundDark,\n      foreground = pairing.foreground,\n      desiredContrast = pairing.desiredContrast,\n      updatedTokens = pairing.updatedTokens;\n    var background = mode === 'light' ? backgroundLight : backgroundDark;\n    var foregroundTokenValue = customThemeTokenMap[foreground];\n    var backgroundTokenValue = customThemeTokenMap[background];\n    var foregroundColor = brandTokens.includes(foreground) ? typeof foregroundTokenValue === 'string' ? foregroundTokenValue : themeRamp[foregroundTokenValue] : getColorFromTokenRaw(foreground, mode);\n    var backgroundColor = brandTokens.includes(background) ? typeof backgroundTokenValue === 'string' ? backgroundTokenValue : themeRamp[backgroundTokenValue] : getColorFromTokenRaw(background, mode);\n    var contrast = getContrastRatio(foregroundColor, backgroundColor);\n    if (contrast <= desiredContrast) {\n      updatedTokens.forEach(function (token) {\n        var rampValue = customThemeTokenMap[token];\n        if (typeof rampValue === 'number') {\n          updatedCustomThemeTokenMap[token] = mode === 'light' ? rampValue + 1 : rampValue - 1;\n        }\n      });\n    }\n  });\n  return updatedCustomThemeTokenMap;\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}