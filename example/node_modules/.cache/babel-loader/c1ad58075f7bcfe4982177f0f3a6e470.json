{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"];\n/** @jsx jsx */\nimport { createContext, Fragment, useContext } from 'react';\nimport { css, jsx } from '@emotion/react';\nimport invariant from 'tiny-invariant';\nimport surfaceColorMap from '../internal/color-map';\nimport { useSurface } from './surface-provider';\nvar asAllowlist = ['span', 'div', 'p', 'strong'];\nvar textAlignMap = {\n  center: css({\n    textAlign: 'center'\n  }),\n  end: css({\n    textAlign: 'end'\n  }),\n  start: css({\n    textAlign: 'start'\n  })\n};\nvar textTransformMap = {\n  none: css({\n    textTransform: 'none'\n  }),\n  lowercase: css({\n    textTransform: 'lowercase'\n  }),\n  uppercase: css({\n    textTransform: 'uppercase'\n  })\n};\nvar verticalAlignMap = {\n  top: css({\n    verticalAlign: 'top'\n  }),\n  middle: css({\n    verticalAlign: 'middle'\n  }),\n  bottom: css({\n    verticalAlign: 'bottom'\n  })\n};\nvar baseStyles = css({\n  boxSizing: 'border-box',\n  margin: \"var(--ds-space-0, 0px)\",\n  padding: \"var(--ds-space-0, 0px)\"\n});\nvar truncateStyles = css({\n  overflow: 'hidden',\n  textOverflow: 'ellipsis',\n  whiteSpace: 'nowrap'\n});\n\n/**\n * Custom hook designed to abstract the parsing of the color props and make it clearer in the future how color is reconciled between themes and tokens.\n */\nvar useColor = function useColor(colorProp) {\n  var surface = useSurface();\n  var inverseTextColor = surfaceColorMap[surface];\n\n  /**\n   * Where the color of the surface is inverted we override the user choice\n   * as there is no valid choice that is not covered by the override.\n   */\n  var color = inverseTextColor !== null && inverseTextColor !== void 0 ? inverseTextColor : colorProp;\n  return color;\n};\nvar HasTextAncestorContext = /*#__PURE__*/createContext(false);\nvar useHasTextAncestor = function useHasTextAncestor() {\n  return useContext(HasTextAncestorContext);\n};\n\n/**\n * __Text__\n *\n * Text is a primitive component that has the Atlassian Design System's design guidelines baked in.\n * This includes considerations for text attributes such as color, font size, font weight, and line height.\n * It renders a `span` by default.\n *\n * @internal\n */\nvar Text = function Text(_ref) {\n  var children = _ref.children,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'span' : _props$as,\n    colorProp = props.color,\n    fontSize = props.fontSize,\n    fontWeight = props.fontWeight,\n    lineHeight = props.lineHeight,\n    _props$shouldTruncate = props.shouldTruncate,\n    shouldTruncate = _props$shouldTruncate === void 0 ? false : _props$shouldTruncate,\n    textAlign = props.textAlign,\n    textTransform = props.textTransform,\n    verticalAlign = props.verticalAlign,\n    testId = props.testId,\n    UNSAFE_style = props.UNSAFE_style,\n    id = props.id;\n  invariant(asAllowlist.includes(Component), \"@atlaskit/ds-explorations: Text received an invalid \\\"as\\\" value of \\\"\".concat(Component, \"\\\"\"));\n  var color = useColor(colorProp);\n  var isWrapped = useHasTextAncestor();\n\n  /**\n   * If the text is already wrapped and applies no props we can just\n   * render the children directly as a fragment.\n   */\n  if (isWrapped && Object.keys(props).length === 0) {\n    return jsx(Fragment, null, children);\n  }\n  var component = jsx(Component, {\n    style: UNSAFE_style,\n    css: [baseStyles, fontFamilyMap.sans, color && textColorMap[color], fontSize && fontSizeMap[fontSize], fontWeight && fontWeightMap[fontWeight], lineHeight && lineHeightMap[lineHeight], shouldTruncate && truncateStyles, textAlign && textAlignMap[textAlign], textTransform && textTransformMap[textTransform], verticalAlign && verticalAlignMap[verticalAlign]],\n    \"data-testid\": testId,\n    id: id\n  }, children);\n  return isWrapped ?\n  // no need to re-apply context if the text is already wrapped\n  component : jsx(HasTextAncestorContext.Provider, {\n    value: true\n  }, component);\n};\nexport default Text;\n\n/**\n * THIS SECTION WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}\n * @codegen <<SignedSource::9433121c32ccc048039fa1dce6b3a3fc>>\n * @codegenId typography\n * @codegenCommand yarn codegen-styles\n * @codegenParams [\"fontSize\", \"fontWeight\", \"fontFamily\", \"lineHeight\"]\n * @codegenDependency ../../../tokens/src/artifacts/tokens-raw/atlassian-typography.tsx <<SignedSource::e6864487c53c4cc578daae3094d18dd9>>\n */\nvar fontSizeMap = {\n  'size.050': css({\n    fontSize: \"var(--ds-font-size-050, 11px)\"\n  }),\n  'size.075': css({\n    fontSize: \"var(--ds-font-size-075, 12px)\"\n  }),\n  'size.100': css({\n    fontSize: \"var(--ds-font-size-100, 14px)\"\n  }),\n  'size.200': css({\n    fontSize: \"var(--ds-font-size-200, 16px)\"\n  }),\n  'size.300': css({\n    fontSize: \"var(--ds-font-size-300, 20px)\"\n  }),\n  'size.400': css({\n    fontSize: \"var(--ds-font-size-400, 24px)\"\n  }),\n  'size.500': css({\n    fontSize: \"var(--ds-font-size-500, 29px)\"\n  }),\n  'size.600': css({\n    fontSize: \"var(--ds-font-size-600, 35px)\"\n  })\n};\nvar fontWeightMap = {\n  bold: css({\n    fontWeight: \"var(--ds-font-weight-bold, 700)\"\n  }),\n  medium: css({\n    fontWeight: \"var(--ds-font-weight-medium, 500)\"\n  }),\n  regular: css({\n    fontWeight: \"var(--ds-font-weight-regular, 400)\"\n  }),\n  semibold: css({\n    fontWeight: \"var(--ds-font-weight-semibold, 600)\"\n  })\n};\nvar fontFamilyMap = {\n  body: css({\n    fontFamily: \"var(--ds-font-family-body, ui-sans-serif, \\\"Segoe UI\\\", Ubuntu, system-ui, \\\"Helvetica Neue\\\", sans-serif)\"\n  }),\n  brand: css({\n    fontFamily: \"var(--ds-font-family-brand, Charlie Sans)\"\n  }),\n  code: css({\n    fontFamily: \"var(--ds-font-family-code, ui-monospace, Menlo, \\\"Segoe UI Mono\\\", \\\"Ubuntu Mono\\\", monospace)\"\n  }),\n  heading: css({\n    fontFamily: \"var(--ds-font-family-heading, ui-sans-serif, \\\"Segoe UI\\\", Ubuntu, system-ui, \\\"Helvetica Neue\\\", sans-serif)\"\n  }),\n  monospace: css({\n    fontFamily: \"var(--ds-font-family-monospace, ui-monospace, Menlo, \\\"Segoe UI Mono\\\", \\\"Ubuntu Mono\\\", monospace)\"\n  }),\n  sans: css({\n    fontFamily: \"var(--ds-font-family-sans, -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", \\\"Roboto\\\", \\\"Oxygen\\\", \\\"Ubuntu\\\", \\\"Fira Sans\\\", \\\"Droid Sans\\\", \\\"Helvetica Neue\\\", sans-serif)\"\n  })\n};\nvar lineHeightMap = {\n  'lineHeight.1': css({\n    lineHeight: \"var(--ds-font-lineHeight-1, 1)\"\n  }),\n  'lineHeight.100': css({\n    lineHeight: \"var(--ds-font-lineHeight-100, 16px)\"\n  }),\n  'lineHeight.200': css({\n    lineHeight: \"var(--ds-font-lineHeight-200, 20px)\"\n  }),\n  'lineHeight.300': css({\n    lineHeight: \"var(--ds-font-lineHeight-300, 24px)\"\n  }),\n  'lineHeight.400': css({\n    lineHeight: \"var(--ds-font-lineHeight-400, 28px)\"\n  }),\n  'lineHeight.500': css({\n    lineHeight: \"var(--ds-font-lineHeight-500, 32px)\"\n  }),\n  'lineHeight.600': css({\n    lineHeight: \"var(--ds-font-lineHeight-600, 40px)\"\n  })\n};\n/**\n * @codegenEnd\n */\n/**\n * THIS SECTION WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}\n * @codegen <<SignedSource::95d4f240e36e302a634e8633a0782cba>>\n * @codegenId colors\n * @codegenCommand yarn codegen-styles\n * @codegenParams [\"text\"]\n * @codegenDependency ../../../tokens/src/artifacts/tokens-raw/atlassian-light.tsx <<SignedSource::f1021f8d47ab63374e371ce18db72a1c>>\n */\nvar textColorMap = {\n  'color.text': css({\n    color: \"var(--ds-text, #172B4D)\"\n  }),\n  disabled: css({\n    color: \"var(--ds-text-disabled, #A5ADBA)\"\n  }),\n  inverse: css({\n    color: \"var(--ds-text-inverse, #FFFFFF)\"\n  }),\n  selected: css({\n    color: \"var(--ds-text-selected, #0052CC)\"\n  }),\n  brand: css({\n    color: \"var(--ds-text-brand, #0065FF)\"\n  }),\n  danger: css({\n    color: \"var(--ds-text-danger, #DE350B)\"\n  }),\n  warning: css({\n    color: \"var(--ds-text-warning, #974F0C)\"\n  }),\n  'warning.inverse': css({\n    color: \"var(--ds-text-warning-inverse, #172B4D)\"\n  }),\n  success: css({\n    color: \"var(--ds-text-success, #006644)\"\n  }),\n  discovery: css({\n    color: \"var(--ds-text-discovery, #403294)\"\n  }),\n  information: css({\n    color: \"var(--ds-text-information, #0052CC)\"\n  }),\n  subtlest: css({\n    color: \"var(--ds-text-subtlest, #7A869A)\"\n  }),\n  subtle: css({\n    color: \"var(--ds-text-subtle, #42526E)\"\n  })\n};\n\n/**\n * @codegenEnd\n */","map":{"version":3,"names":["_objectWithoutProperties","_excluded","createContext","Fragment","useContext","css","jsx","invariant","surfaceColorMap","useSurface","asAllowlist","textAlignMap","center","textAlign","end","start","textTransformMap","none","textTransform","lowercase","uppercase","verticalAlignMap","top","verticalAlign","middle","bottom","baseStyles","boxSizing","margin","padding","truncateStyles","overflow","textOverflow","whiteSpace","useColor","colorProp","surface","inverseTextColor","color","HasTextAncestorContext","useHasTextAncestor","Text","_ref","children","props","_props$as","as","Component","fontSize","fontWeight","lineHeight","_props$shouldTruncate","shouldTruncate","testId","UNSAFE_style","id","includes","concat","isWrapped","Object","keys","length","component","style","fontFamilyMap","sans","textColorMap","fontSizeMap","fontWeightMap","lineHeightMap","Provider","value","bold","medium","regular","semibold","body","fontFamily","brand","code","heading","monospace","disabled","inverse","selected","danger","warning","success","discovery","information","subtlest","subtle"],"sources":["/home/enterpi/Documents/iidm/pixel-kit/node_modules/@atlaskit/ds-explorations/dist/esm/components/text.partial.js"],"sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"];\n/** @jsx jsx */\nimport { createContext, Fragment, useContext } from 'react';\nimport { css, jsx } from '@emotion/react';\nimport invariant from 'tiny-invariant';\nimport surfaceColorMap from '../internal/color-map';\nimport { useSurface } from './surface-provider';\nvar asAllowlist = ['span', 'div', 'p', 'strong'];\nvar textAlignMap = {\n  center: css({\n    textAlign: 'center'\n  }),\n  end: css({\n    textAlign: 'end'\n  }),\n  start: css({\n    textAlign: 'start'\n  })\n};\nvar textTransformMap = {\n  none: css({\n    textTransform: 'none'\n  }),\n  lowercase: css({\n    textTransform: 'lowercase'\n  }),\n  uppercase: css({\n    textTransform: 'uppercase'\n  })\n};\nvar verticalAlignMap = {\n  top: css({\n    verticalAlign: 'top'\n  }),\n  middle: css({\n    verticalAlign: 'middle'\n  }),\n  bottom: css({\n    verticalAlign: 'bottom'\n  })\n};\nvar baseStyles = css({\n  boxSizing: 'border-box',\n  margin: \"var(--ds-space-0, 0px)\",\n  padding: \"var(--ds-space-0, 0px)\"\n});\nvar truncateStyles = css({\n  overflow: 'hidden',\n  textOverflow: 'ellipsis',\n  whiteSpace: 'nowrap'\n});\n\n/**\n * Custom hook designed to abstract the parsing of the color props and make it clearer in the future how color is reconciled between themes and tokens.\n */\nvar useColor = function useColor(colorProp) {\n  var surface = useSurface();\n  var inverseTextColor = surfaceColorMap[surface];\n\n  /**\n   * Where the color of the surface is inverted we override the user choice\n   * as there is no valid choice that is not covered by the override.\n   */\n  var color = inverseTextColor !== null && inverseTextColor !== void 0 ? inverseTextColor : colorProp;\n  return color;\n};\nvar HasTextAncestorContext = /*#__PURE__*/createContext(false);\nvar useHasTextAncestor = function useHasTextAncestor() {\n  return useContext(HasTextAncestorContext);\n};\n\n/**\n * __Text__\n *\n * Text is a primitive component that has the Atlassian Design System's design guidelines baked in.\n * This includes considerations for text attributes such as color, font size, font weight, and line height.\n * It renders a `span` by default.\n *\n * @internal\n */\nvar Text = function Text(_ref) {\n  var children = _ref.children,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'span' : _props$as,\n    colorProp = props.color,\n    fontSize = props.fontSize,\n    fontWeight = props.fontWeight,\n    lineHeight = props.lineHeight,\n    _props$shouldTruncate = props.shouldTruncate,\n    shouldTruncate = _props$shouldTruncate === void 0 ? false : _props$shouldTruncate,\n    textAlign = props.textAlign,\n    textTransform = props.textTransform,\n    verticalAlign = props.verticalAlign,\n    testId = props.testId,\n    UNSAFE_style = props.UNSAFE_style,\n    id = props.id;\n  invariant(asAllowlist.includes(Component), \"@atlaskit/ds-explorations: Text received an invalid \\\"as\\\" value of \\\"\".concat(Component, \"\\\"\"));\n  var color = useColor(colorProp);\n  var isWrapped = useHasTextAncestor();\n\n  /**\n   * If the text is already wrapped and applies no props we can just\n   * render the children directly as a fragment.\n   */\n  if (isWrapped && Object.keys(props).length === 0) {\n    return jsx(Fragment, null, children);\n  }\n  var component = jsx(Component, {\n    style: UNSAFE_style,\n    css: [baseStyles, fontFamilyMap.sans, color && textColorMap[color], fontSize && fontSizeMap[fontSize], fontWeight && fontWeightMap[fontWeight], lineHeight && lineHeightMap[lineHeight], shouldTruncate && truncateStyles, textAlign && textAlignMap[textAlign], textTransform && textTransformMap[textTransform], verticalAlign && verticalAlignMap[verticalAlign]],\n    \"data-testid\": testId,\n    id: id\n  }, children);\n  return isWrapped ?\n  // no need to re-apply context if the text is already wrapped\n  component : jsx(HasTextAncestorContext.Provider, {\n    value: true\n  }, component);\n};\nexport default Text;\n\n/**\n * THIS SECTION WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}\n * @codegen <<SignedSource::9433121c32ccc048039fa1dce6b3a3fc>>\n * @codegenId typography\n * @codegenCommand yarn codegen-styles\n * @codegenParams [\"fontSize\", \"fontWeight\", \"fontFamily\", \"lineHeight\"]\n * @codegenDependency ../../../tokens/src/artifacts/tokens-raw/atlassian-typography.tsx <<SignedSource::e6864487c53c4cc578daae3094d18dd9>>\n */\nvar fontSizeMap = {\n  'size.050': css({\n    fontSize: \"var(--ds-font-size-050, 11px)\"\n  }),\n  'size.075': css({\n    fontSize: \"var(--ds-font-size-075, 12px)\"\n  }),\n  'size.100': css({\n    fontSize: \"var(--ds-font-size-100, 14px)\"\n  }),\n  'size.200': css({\n    fontSize: \"var(--ds-font-size-200, 16px)\"\n  }),\n  'size.300': css({\n    fontSize: \"var(--ds-font-size-300, 20px)\"\n  }),\n  'size.400': css({\n    fontSize: \"var(--ds-font-size-400, 24px)\"\n  }),\n  'size.500': css({\n    fontSize: \"var(--ds-font-size-500, 29px)\"\n  }),\n  'size.600': css({\n    fontSize: \"var(--ds-font-size-600, 35px)\"\n  })\n};\nvar fontWeightMap = {\n  bold: css({\n    fontWeight: \"var(--ds-font-weight-bold, 700)\"\n  }),\n  medium: css({\n    fontWeight: \"var(--ds-font-weight-medium, 500)\"\n  }),\n  regular: css({\n    fontWeight: \"var(--ds-font-weight-regular, 400)\"\n  }),\n  semibold: css({\n    fontWeight: \"var(--ds-font-weight-semibold, 600)\"\n  })\n};\nvar fontFamilyMap = {\n  body: css({\n    fontFamily: \"var(--ds-font-family-body, ui-sans-serif, \\\"Segoe UI\\\", Ubuntu, system-ui, \\\"Helvetica Neue\\\", sans-serif)\"\n  }),\n  brand: css({\n    fontFamily: \"var(--ds-font-family-brand, Charlie Sans)\"\n  }),\n  code: css({\n    fontFamily: \"var(--ds-font-family-code, ui-monospace, Menlo, \\\"Segoe UI Mono\\\", \\\"Ubuntu Mono\\\", monospace)\"\n  }),\n  heading: css({\n    fontFamily: \"var(--ds-font-family-heading, ui-sans-serif, \\\"Segoe UI\\\", Ubuntu, system-ui, \\\"Helvetica Neue\\\", sans-serif)\"\n  }),\n  monospace: css({\n    fontFamily: \"var(--ds-font-family-monospace, ui-monospace, Menlo, \\\"Segoe UI Mono\\\", \\\"Ubuntu Mono\\\", monospace)\"\n  }),\n  sans: css({\n    fontFamily: \"var(--ds-font-family-sans, -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", \\\"Roboto\\\", \\\"Oxygen\\\", \\\"Ubuntu\\\", \\\"Fira Sans\\\", \\\"Droid Sans\\\", \\\"Helvetica Neue\\\", sans-serif)\"\n  })\n};\nvar lineHeightMap = {\n  'lineHeight.1': css({\n    lineHeight: \"var(--ds-font-lineHeight-1, 1)\"\n  }),\n  'lineHeight.100': css({\n    lineHeight: \"var(--ds-font-lineHeight-100, 16px)\"\n  }),\n  'lineHeight.200': css({\n    lineHeight: \"var(--ds-font-lineHeight-200, 20px)\"\n  }),\n  'lineHeight.300': css({\n    lineHeight: \"var(--ds-font-lineHeight-300, 24px)\"\n  }),\n  'lineHeight.400': css({\n    lineHeight: \"var(--ds-font-lineHeight-400, 28px)\"\n  }),\n  'lineHeight.500': css({\n    lineHeight: \"var(--ds-font-lineHeight-500, 32px)\"\n  }),\n  'lineHeight.600': css({\n    lineHeight: \"var(--ds-font-lineHeight-600, 40px)\"\n  })\n};\n/**\n * @codegenEnd\n */\n/**\n * THIS SECTION WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}\n * @codegen <<SignedSource::95d4f240e36e302a634e8633a0782cba>>\n * @codegenId colors\n * @codegenCommand yarn codegen-styles\n * @codegenParams [\"text\"]\n * @codegenDependency ../../../tokens/src/artifacts/tokens-raw/atlassian-light.tsx <<SignedSource::f1021f8d47ab63374e371ce18db72a1c>>\n */\nvar textColorMap = {\n  'color.text': css({\n    color: \"var(--ds-text, #172B4D)\"\n  }),\n  disabled: css({\n    color: \"var(--ds-text-disabled, #A5ADBA)\"\n  }),\n  inverse: css({\n    color: \"var(--ds-text-inverse, #FFFFFF)\"\n  }),\n  selected: css({\n    color: \"var(--ds-text-selected, #0052CC)\"\n  }),\n  brand: css({\n    color: \"var(--ds-text-brand, #0065FF)\"\n  }),\n  danger: css({\n    color: \"var(--ds-text-danger, #DE350B)\"\n  }),\n  warning: css({\n    color: \"var(--ds-text-warning, #974F0C)\"\n  }),\n  'warning.inverse': css({\n    color: \"var(--ds-text-warning-inverse, #172B4D)\"\n  }),\n  success: css({\n    color: \"var(--ds-text-success, #006644)\"\n  }),\n  discovery: css({\n    color: \"var(--ds-text-discovery, #403294)\"\n  }),\n  information: css({\n    color: \"var(--ds-text-information, #0052CC)\"\n  }),\n  subtlest: css({\n    color: \"var(--ds-text-subtlest, #7A869A)\"\n  }),\n  subtle: css({\n    color: \"var(--ds-text-subtle, #42526E)\"\n  })\n};\n\n/**\n * @codegenEnd\n */"],"mappings":"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"},"metadata":{},"sourceType":"module"}