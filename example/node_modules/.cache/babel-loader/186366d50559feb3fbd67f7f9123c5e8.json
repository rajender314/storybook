{"ast":null,"code":"import React, { forwardRef } from 'react';\nimport { UNSAFE_Text as Text } from '@atlaskit/ds-explorations';\nimport Heading from '@atlaskit/heading';\nimport { Box, Inline, Stack, xcss } from '@atlaskit/primitives';\nimport { getAppearanceIconStyles } from './internal/appearance-icon';\nvar sectionMessageStyles = xcss({\n  wordBreak: 'break-word',\n  borderRadius: 'border.radius'\n});\nvar bleedStyles = xcss({\n  display: 'flex',\n  marginBlock: \"var(--ds-space-negative-025, -2px)\"\n});\n\n/**\n * __Section message__\n *\n * A section message is used to alert users to a particular section of the screen.\n *\n * - [Examples](https://atlassian.design/components/section-message/examples)\n * - [Code](https://atlassian.design/components/section-message/code)\n * - [Usage](https://atlassian.design/components/section-message/usage)\n */\nvar SectionMessage = /*#__PURE__*/forwardRef(function SectionMessage(_ref, ref) {\n  var children = _ref.children,\n    _ref$appearance = _ref.appearance,\n    appearance = _ref$appearance === void 0 ? 'information' : _ref$appearance,\n    actions = _ref.actions,\n    title = _ref.title,\n    icon = _ref.icon,\n    testId = _ref.testId;\n  var _getAppearanceIconSty = getAppearanceIconStyles(appearance, icon),\n    primaryColor = _getAppearanceIconSty.primaryIconColor,\n    secondaryColor = _getAppearanceIconSty.backgroundColor,\n    Icon = _getAppearanceIconSty.Icon;\n  var actionElements = actions && actions.type === React.Fragment ? actions.props.children : actions;\n  var actionsArray = React.Children.toArray(actionElements);\n  return /*#__PURE__*/React.createElement(Box, {\n    as: \"section\",\n    backgroundColor: appearanceMap[appearance],\n    padding: \"space.200\",\n    testId: testId,\n    ref: ref,\n    xcss: sectionMessageStyles\n  }, /*#__PURE__*/React.createElement(Inline, {\n    space: \"space.200\",\n    alignBlock: \"stretch\"\n  }, /*#__PURE__*/React.createElement(Box, {\n    xcss: bleedStyles\n  }, /*#__PURE__*/React.createElement(Icon, {\n    size: \"medium\",\n    primaryColor: primaryColor,\n    secondaryColor: secondaryColor\n  })), /*#__PURE__*/React.createElement(Stack, {\n    space: \"space.100\",\n    testId: testId && \"\".concat(testId, \"--content\")\n  }, !!title && /*#__PURE__*/React.createElement(Heading, {\n    as: \"h2\",\n    level: \"h500\"\n  }, title), /*#__PURE__*/React.createElement(Text, null, children), actionsArray.length > 0 && /*#__PURE__*/React.createElement(Inline, {\n    shouldWrap: true,\n    testId: testId && \"\".concat(testId, \"--actions\"),\n    separator: \"\\xB7\",\n    space: \"space.100\",\n    rowSpace: \"space.0\"\n  }, actionsArray))));\n});\nvar appearanceMap = {\n  information: 'color.background.information',\n  warning: 'color.background.warning',\n  error: 'color.background.danger',\n  success: 'color.background.success',\n  discovery: 'color.background.discovery'\n};\nSectionMessage.displayName = 'SectionMessage';\nexport default SectionMessage;","map":{"version":3,"names":["React","forwardRef","UNSAFE_Text","Text","Heading","Box","Inline","Stack","xcss","getAppearanceIconStyles","sectionMessageStyles","wordBreak","borderRadius","bleedStyles","display","marginBlock","SectionMessage","_ref","ref","children","_ref$appearance","appearance","actions","title","icon","testId","_getAppearanceIconSty","primaryColor","primaryIconColor","secondaryColor","backgroundColor","Icon","actionElements","type","Fragment","props","actionsArray","Children","toArray","createElement","as","appearanceMap","padding","space","alignBlock","size","concat","level","length","shouldWrap","separator","rowSpace","information","warning","error","success","discovery","displayName"],"sources":["/home/enterpi/Documents/iidm/pixel-kit/node_modules/@atlaskit/section-message/dist/esm/section-message.js"],"sourcesContent":["import React, { forwardRef } from 'react';\nimport { UNSAFE_Text as Text } from '@atlaskit/ds-explorations';\nimport Heading from '@atlaskit/heading';\nimport { Box, Inline, Stack, xcss } from '@atlaskit/primitives';\nimport { getAppearanceIconStyles } from './internal/appearance-icon';\nvar sectionMessageStyles = xcss({\n  wordBreak: 'break-word',\n  borderRadius: 'border.radius'\n});\nvar bleedStyles = xcss({\n  display: 'flex',\n  marginBlock: \"var(--ds-space-negative-025, -2px)\"\n});\n\n/**\n * __Section message__\n *\n * A section message is used to alert users to a particular section of the screen.\n *\n * - [Examples](https://atlassian.design/components/section-message/examples)\n * - [Code](https://atlassian.design/components/section-message/code)\n * - [Usage](https://atlassian.design/components/section-message/usage)\n */\nvar SectionMessage = /*#__PURE__*/forwardRef(function SectionMessage(_ref, ref) {\n  var children = _ref.children,\n    _ref$appearance = _ref.appearance,\n    appearance = _ref$appearance === void 0 ? 'information' : _ref$appearance,\n    actions = _ref.actions,\n    title = _ref.title,\n    icon = _ref.icon,\n    testId = _ref.testId;\n  var _getAppearanceIconSty = getAppearanceIconStyles(appearance, icon),\n    primaryColor = _getAppearanceIconSty.primaryIconColor,\n    secondaryColor = _getAppearanceIconSty.backgroundColor,\n    Icon = _getAppearanceIconSty.Icon;\n  var actionElements = actions && actions.type === React.Fragment ? actions.props.children : actions;\n  var actionsArray = React.Children.toArray(actionElements);\n  return /*#__PURE__*/React.createElement(Box, {\n    as: \"section\",\n    backgroundColor: appearanceMap[appearance],\n    padding: \"space.200\",\n    testId: testId,\n    ref: ref,\n    xcss: sectionMessageStyles\n  }, /*#__PURE__*/React.createElement(Inline, {\n    space: \"space.200\",\n    alignBlock: \"stretch\"\n  }, /*#__PURE__*/React.createElement(Box, {\n    xcss: bleedStyles\n  }, /*#__PURE__*/React.createElement(Icon, {\n    size: \"medium\",\n    primaryColor: primaryColor,\n    secondaryColor: secondaryColor\n  })), /*#__PURE__*/React.createElement(Stack, {\n    space: \"space.100\",\n    testId: testId && \"\".concat(testId, \"--content\")\n  }, !!title && /*#__PURE__*/React.createElement(Heading, {\n    as: \"h2\",\n    level: \"h500\"\n  }, title), /*#__PURE__*/React.createElement(Text, null, children), actionsArray.length > 0 && /*#__PURE__*/React.createElement(Inline, {\n    shouldWrap: true,\n    testId: testId && \"\".concat(testId, \"--actions\"),\n    separator: \"\\xB7\",\n    space: \"space.100\",\n    rowSpace: \"space.0\"\n  }, actionsArray))));\n});\nvar appearanceMap = {\n  information: 'color.background.information',\n  warning: 'color.background.warning',\n  error: 'color.background.danger',\n  success: 'color.background.success',\n  discovery: 'color.background.discovery'\n};\nSectionMessage.displayName = 'SectionMessage';\nexport default SectionMessage;"],"mappings":"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"},"metadata":{},"sourceType":"module"}