{"ast":null,"code":"/**\n * Below lines are copied from @material/material-color-utilities.\n * Do not modify it.\n */\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// This file is automatically generated. Do not modify it.\n\nimport * as mathUtils from './math-utils';\n\n/**\n * Color science utilities.\n *\n * Utility methods for color science constants and color space\n * conversions that aren't HCT or CAM16.\n */\n\nvar SRGB_TO_XYZ = [[0.41233895, 0.35762064, 0.18051042], [0.2126, 0.7152, 0.0722], [0.01932141, 0.11916382, 0.95034478]];\nvar XYZ_TO_SRGB = [[3.2413774792388685, -1.5376652402851851, -0.49885366846268053], [-0.9691452513005321, 1.8758853451067872, 0.04156585616912061], [0.05562093689691305, -0.20395524564742123, 1.0571799111220335]];\nvar WHITE_POINT_D65 = [95.047, 100.0, 108.883];\n\n/**\n * Converts a color from RGB components to ARGB format.\n */\nexport function argbFromRgb(red, green, blue) {\n  return (255 << 24 | (red & 255) << 16 | (green & 255) << 8 | blue & 255) >>> 0;\n}\n\n/**\n * Converts a color from linear RGB components to ARGB format.\n */\nexport function argbFromLinrgb(linrgb) {\n  var r = delinearized(linrgb[0]);\n  var g = delinearized(linrgb[1]);\n  var b = delinearized(linrgb[2]);\n  return argbFromRgb(r, g, b);\n}\n\n/**\n * Returns the alpha component of a color in ARGB format.\n */\nexport function alphaFromArgb(argb) {\n  return argb >> 24 & 255;\n}\n\n/**\n * Returns the red component of a color in ARGB format.\n */\nexport function redFromArgb(argb) {\n  return argb >> 16 & 255;\n}\n\n/**\n * Returns the green component of a color in ARGB format.\n */\nexport function greenFromArgb(argb) {\n  return argb >> 8 & 255;\n}\n\n/**\n * Returns the blue component of a color in ARGB format.\n */\nexport function blueFromArgb(argb) {\n  return argb & 255;\n}\n\n/**\n * Returns whether a color in ARGB format is opaque.\n */\nexport function isOpaque(argb) {\n  return alphaFromArgb(argb) >= 255;\n}\n\n/**\n * Converts a color from ARGB to XYZ.\n */\nexport function argbFromXyz(x, y, z) {\n  var matrix = XYZ_TO_SRGB;\n  var linearR = matrix[0][0] * x + matrix[0][1] * y + matrix[0][2] * z;\n  var linearG = matrix[1][0] * x + matrix[1][1] * y + matrix[1][2] * z;\n  var linearB = matrix[2][0] * x + matrix[2][1] * y + matrix[2][2] * z;\n  var r = delinearized(linearR);\n  var g = delinearized(linearG);\n  var b = delinearized(linearB);\n  return argbFromRgb(r, g, b);\n}\n\n/**\n * Converts a color from XYZ to ARGB.\n */\nexport function xyzFromArgb(argb) {\n  var r = linearized(redFromArgb(argb));\n  var g = linearized(greenFromArgb(argb));\n  var b = linearized(blueFromArgb(argb));\n  return mathUtils.matrixMultiply([r, g, b], SRGB_TO_XYZ);\n}\n\n/**\n * Converts an L* value to an ARGB representation.\n *\n * @param lstar L* in L*a*b*\n * @return ARGB representation of grayscale color with lightness\n * matching L*\n */\nexport function argbFromLstar(lstar) {\n  var y = yFromLstar(lstar);\n  var component = delinearized(y);\n  return argbFromRgb(component, component, component);\n}\n\n/**\n * Computes the L* value of a color in ARGB representation.\n *\n * @param argb ARGB representation of a color\n * @return L*, from L*a*b*, coordinate of the color\n */\nexport function lstarFromArgb(argb) {\n  var y = xyzFromArgb(argb)[1];\n  return 116.0 * labF(y / 100.0) - 16.0;\n}\n\n/**\n * Converts an L* value to a Y value.\n *\n * L* in L*a*b* and Y in XYZ measure the same quantity, luminance.\n *\n * L* measures perceptual luminance, a linear scale. Y in XYZ\n * measures relative luminance, a logarithmic scale.\n *\n * @param lstar L* in L*a*b*\n * @return Y in XYZ\n */\nexport function yFromLstar(lstar) {\n  return 100.0 * labInvf((lstar + 16.0) / 116.0);\n}\n\n/**\n * Converts a Y value to an L* value.\n *\n * L* in L*a*b* and Y in XYZ measure the same quantity, luminance.\n *\n * L* measures perceptual luminance, a linear scale. Y in XYZ\n * measures relative luminance, a logarithmic scale.\n *\n * @param y Y in XYZ\n * @return L* in L*a*b*\n */\nexport function lstarFromY(y) {\n  return labF(y / 100.0) * 116.0 - 16.0;\n}\n\n/**\n * Linearizes an RGB component.\n *\n * @param rgbComponent 0 <= rgb_component <= 255, represents R/G/B\n * channel\n * @return 0.0 <= output <= 100.0, color channel converted to\n * linear RGB space\n */\nexport function linearized(rgbComponent) {\n  var normalized = rgbComponent / 255.0;\n  if (normalized <= 0.040449936) {\n    return normalized / 12.92 * 100.0;\n  } else {\n    return Math.pow((normalized + 0.055) / 1.055, 2.4) * 100.0;\n  }\n}\n\n/**\n * Delinearizes an RGB component.\n *\n * @param rgbComponent 0.0 <= rgb_component <= 100.0, represents\n * linear R/G/B channel\n * @return 0 <= output <= 255, color channel converted to regular\n * RGB space\n */\nexport function delinearized(rgbComponent) {\n  var normalized = rgbComponent / 100.0;\n  var delinearized = 0.0;\n  if (normalized <= 0.0031308) {\n    delinearized = normalized * 12.92;\n  } else {\n    delinearized = 1.055 * Math.pow(normalized, 1.0 / 2.4) - 0.055;\n  }\n  return mathUtils.clampInt(0, 255, Math.round(delinearized * 255.0));\n}\n\n/**\n * Returns the standard white point; white on a sunny day.\n *\n * @return The white point\n */\nexport function whitePointD65() {\n  return WHITE_POINT_D65;\n}\n\n/**\n * RGBA component\n *\n * @param r Red value should be between 0-255\n * @param g Green value should be between 0-255\n * @param b Blue value should be between 0-255\n * @param a Alpha value should be between 0-255\n */\n\n/**\n * Return RGBA from a given int32 color\n *\n * @param argb ARGB representation of a int32 color.\n * @return RGBA representation of a int32 color.\n */\nexport function rgbaFromArgb(argb) {\n  var r = redFromArgb(argb);\n  var g = greenFromArgb(argb);\n  var b = blueFromArgb(argb);\n  var a = alphaFromArgb(argb);\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n}\n\n/**\n * Return int32 color from a given RGBA component\n *\n * @param rgba RGBA representation of a int32 color.\n * @returns ARGB representation of a int32 color.\n */\nexport function argbFromRgba(_ref) {\n  var r = _ref.r,\n    g = _ref.g,\n    b = _ref.b,\n    a = _ref.a;\n  var rValue = clampComponent(r);\n  var gValue = clampComponent(g);\n  var bValue = clampComponent(b);\n  var aValue = clampComponent(a);\n  return aValue << 24 | rValue << 16 | gValue << 8 | bValue;\n}\nfunction clampComponent(value) {\n  if (value < 0) {\n    return 0;\n  }\n  if (value > 255) {\n    return 255;\n  }\n  return value;\n}\nfunction labF(t) {\n  var e = 216.0 / 24389.0;\n  var kappa = 24389.0 / 27.0;\n  if (t > e) {\n    return Math.pow(t, 1.0 / 3.0);\n  } else {\n    return (kappa * t + 16) / 116;\n  }\n}\nfunction labInvf(ft) {\n  var e = 216.0 / 24389.0;\n  var kappa = 24389.0 / 27.0;\n  var ft3 = ft * ft * ft;\n  if (ft3 > e) {\n    return ft3;\n  } else {\n    return (116 * ft - 16) / kappa;\n  }\n}","map":{"version":3,"names":["mathUtils","SRGB_TO_XYZ","XYZ_TO_SRGB","WHITE_POINT_D65","argbFromRgb","red","green","blue","argbFromLinrgb","linrgb","r","delinearized","g","b","alphaFromArgb","argb","redFromArgb","greenFromArgb","blueFromArgb","isOpaque","argbFromXyz","x","y","z","matrix","linearR","linearG","linearB","xyzFromArgb","linearized","matrixMultiply","argbFromLstar","lstar","yFromLstar","component","lstarFromArgb","labF","labInvf","lstarFromY","rgbComponent","normalized","Math","pow","clampInt","round","whitePointD65","rgbaFromArgb","a","argbFromRgba","_ref","rValue","clampComponent","gValue","bValue","aValue","value","t","e","kappa","ft","ft3"],"sources":["/home/enterpi/Documents/iidm/pixel-kit/node_modules/@atlaskit/primitives/node_modules/@atlaskit/tokens/dist/esm/utils/hct-color-utils/color-utils.js"],"sourcesContent":["/**\n * Below lines are copied from @material/material-color-utilities.\n * Do not modify it.\n */\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// This file is automatically generated. Do not modify it.\n\nimport * as mathUtils from './math-utils';\n\n/**\n * Color science utilities.\n *\n * Utility methods for color science constants and color space\n * conversions that aren't HCT or CAM16.\n */\n\nvar SRGB_TO_XYZ = [[0.41233895, 0.35762064, 0.18051042], [0.2126, 0.7152, 0.0722], [0.01932141, 0.11916382, 0.95034478]];\nvar XYZ_TO_SRGB = [[3.2413774792388685, -1.5376652402851851, -0.49885366846268053], [-0.9691452513005321, 1.8758853451067872, 0.04156585616912061], [0.05562093689691305, -0.20395524564742123, 1.0571799111220335]];\nvar WHITE_POINT_D65 = [95.047, 100.0, 108.883];\n\n/**\n * Converts a color from RGB components to ARGB format.\n */\nexport function argbFromRgb(red, green, blue) {\n  return (255 << 24 | (red & 255) << 16 | (green & 255) << 8 | blue & 255) >>> 0;\n}\n\n/**\n * Converts a color from linear RGB components to ARGB format.\n */\nexport function argbFromLinrgb(linrgb) {\n  var r = delinearized(linrgb[0]);\n  var g = delinearized(linrgb[1]);\n  var b = delinearized(linrgb[2]);\n  return argbFromRgb(r, g, b);\n}\n\n/**\n * Returns the alpha component of a color in ARGB format.\n */\nexport function alphaFromArgb(argb) {\n  return argb >> 24 & 255;\n}\n\n/**\n * Returns the red component of a color in ARGB format.\n */\nexport function redFromArgb(argb) {\n  return argb >> 16 & 255;\n}\n\n/**\n * Returns the green component of a color in ARGB format.\n */\nexport function greenFromArgb(argb) {\n  return argb >> 8 & 255;\n}\n\n/**\n * Returns the blue component of a color in ARGB format.\n */\nexport function blueFromArgb(argb) {\n  return argb & 255;\n}\n\n/**\n * Returns whether a color in ARGB format is opaque.\n */\nexport function isOpaque(argb) {\n  return alphaFromArgb(argb) >= 255;\n}\n\n/**\n * Converts a color from ARGB to XYZ.\n */\nexport function argbFromXyz(x, y, z) {\n  var matrix = XYZ_TO_SRGB;\n  var linearR = matrix[0][0] * x + matrix[0][1] * y + matrix[0][2] * z;\n  var linearG = matrix[1][0] * x + matrix[1][1] * y + matrix[1][2] * z;\n  var linearB = matrix[2][0] * x + matrix[2][1] * y + matrix[2][2] * z;\n  var r = delinearized(linearR);\n  var g = delinearized(linearG);\n  var b = delinearized(linearB);\n  return argbFromRgb(r, g, b);\n}\n\n/**\n * Converts a color from XYZ to ARGB.\n */\nexport function xyzFromArgb(argb) {\n  var r = linearized(redFromArgb(argb));\n  var g = linearized(greenFromArgb(argb));\n  var b = linearized(blueFromArgb(argb));\n  return mathUtils.matrixMultiply([r, g, b], SRGB_TO_XYZ);\n}\n\n/**\n * Converts an L* value to an ARGB representation.\n *\n * @param lstar L* in L*a*b*\n * @return ARGB representation of grayscale color with lightness\n * matching L*\n */\nexport function argbFromLstar(lstar) {\n  var y = yFromLstar(lstar);\n  var component = delinearized(y);\n  return argbFromRgb(component, component, component);\n}\n\n/**\n * Computes the L* value of a color in ARGB representation.\n *\n * @param argb ARGB representation of a color\n * @return L*, from L*a*b*, coordinate of the color\n */\nexport function lstarFromArgb(argb) {\n  var y = xyzFromArgb(argb)[1];\n  return 116.0 * labF(y / 100.0) - 16.0;\n}\n\n/**\n * Converts an L* value to a Y value.\n *\n * L* in L*a*b* and Y in XYZ measure the same quantity, luminance.\n *\n * L* measures perceptual luminance, a linear scale. Y in XYZ\n * measures relative luminance, a logarithmic scale.\n *\n * @param lstar L* in L*a*b*\n * @return Y in XYZ\n */\nexport function yFromLstar(lstar) {\n  return 100.0 * labInvf((lstar + 16.0) / 116.0);\n}\n\n/**\n * Converts a Y value to an L* value.\n *\n * L* in L*a*b* and Y in XYZ measure the same quantity, luminance.\n *\n * L* measures perceptual luminance, a linear scale. Y in XYZ\n * measures relative luminance, a logarithmic scale.\n *\n * @param y Y in XYZ\n * @return L* in L*a*b*\n */\nexport function lstarFromY(y) {\n  return labF(y / 100.0) * 116.0 - 16.0;\n}\n\n/**\n * Linearizes an RGB component.\n *\n * @param rgbComponent 0 <= rgb_component <= 255, represents R/G/B\n * channel\n * @return 0.0 <= output <= 100.0, color channel converted to\n * linear RGB space\n */\nexport function linearized(rgbComponent) {\n  var normalized = rgbComponent / 255.0;\n  if (normalized <= 0.040449936) {\n    return normalized / 12.92 * 100.0;\n  } else {\n    return Math.pow((normalized + 0.055) / 1.055, 2.4) * 100.0;\n  }\n}\n\n/**\n * Delinearizes an RGB component.\n *\n * @param rgbComponent 0.0 <= rgb_component <= 100.0, represents\n * linear R/G/B channel\n * @return 0 <= output <= 255, color channel converted to regular\n * RGB space\n */\nexport function delinearized(rgbComponent) {\n  var normalized = rgbComponent / 100.0;\n  var delinearized = 0.0;\n  if (normalized <= 0.0031308) {\n    delinearized = normalized * 12.92;\n  } else {\n    delinearized = 1.055 * Math.pow(normalized, 1.0 / 2.4) - 0.055;\n  }\n  return mathUtils.clampInt(0, 255, Math.round(delinearized * 255.0));\n}\n\n/**\n * Returns the standard white point; white on a sunny day.\n *\n * @return The white point\n */\nexport function whitePointD65() {\n  return WHITE_POINT_D65;\n}\n\n/**\n * RGBA component\n *\n * @param r Red value should be between 0-255\n * @param g Green value should be between 0-255\n * @param b Blue value should be between 0-255\n * @param a Alpha value should be between 0-255\n */\n\n/**\n * Return RGBA from a given int32 color\n *\n * @param argb ARGB representation of a int32 color.\n * @return RGBA representation of a int32 color.\n */\nexport function rgbaFromArgb(argb) {\n  var r = redFromArgb(argb);\n  var g = greenFromArgb(argb);\n  var b = blueFromArgb(argb);\n  var a = alphaFromArgb(argb);\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n}\n\n/**\n * Return int32 color from a given RGBA component\n *\n * @param rgba RGBA representation of a int32 color.\n * @returns ARGB representation of a int32 color.\n */\nexport function argbFromRgba(_ref) {\n  var r = _ref.r,\n    g = _ref.g,\n    b = _ref.b,\n    a = _ref.a;\n  var rValue = clampComponent(r);\n  var gValue = clampComponent(g);\n  var bValue = clampComponent(b);\n  var aValue = clampComponent(a);\n  return aValue << 24 | rValue << 16 | gValue << 8 | bValue;\n}\nfunction clampComponent(value) {\n  if (value < 0) {\n    return 0;\n  }\n  if (value > 255) {\n    return 255;\n  }\n  return value;\n}\nfunction labF(t) {\n  var e = 216.0 / 24389.0;\n  var kappa = 24389.0 / 27.0;\n  if (t > e) {\n    return Math.pow(t, 1.0 / 3.0);\n  } else {\n    return (kappa * t + 16) / 116;\n  }\n}\nfunction labInvf(ft) {\n  var e = 216.0 / 24389.0;\n  var kappa = 24389.0 / 27.0;\n  var ft3 = ft * ft * ft;\n  if (ft3 > e) {\n    return ft3;\n  } else {\n    return (116 * ft - 16) / kappa;\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}