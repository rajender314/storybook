{"ast":null,"code":"import { debug } from './debug';\nvar pkgName = '@atlaskit/platform-feature-flags';\nexport var PFF_GLOBAL_KEY = '__PLATFORM_FEATURE_FLAGS__';\nvar hasProcessEnv = typeof process !== 'undefined' && typeof process.env !== 'undefined';\n\n// FF global overrides can be configured by test runners or Storybook\nvar ENV_ENABLE_PLATFORM_FF = hasProcessEnv ?\n// Use global \"process\" variable and process.env['FLAG_NAME'] syntax, so it can be replaced by webpack DefinePlugin\nprocess.env['ENABLE_PLATFORM_FF'] === 'true' : false;\n\n// STORYBOOK_ENABLE_PLATFORM_FF is included as storybook only allows env vars prefixed with STORYBOOK\n// https://github.com/storybookjs/storybook/issues/12270\n\nvar ENV_STORYBOOK_ENABLE_PLATFORM_FF = hasProcessEnv ?\n// Use global \"process\" variable and process.env['FLAG_NAME'] syntax, so it can be replaced by webpack DefinePlugin\nprocess.env['STORYBOOK_ENABLE_PLATFORM_FF'] === 'true' : false;\nvar ENABLE_GLOBAL_PLATFORM_FF_OVERRIDE = ENV_ENABLE_PLATFORM_FF || ENV_STORYBOOK_ENABLE_PLATFORM_FF;\nvar DEFAULT_PFF_GLOBAL = {\n  // In development mode we want to capture any feature flag checks that happen using the default resolver and log this result when the resolver is replaced.\n  // This is because evaluating feature flags when the resolver/FF client is loaded asynchronously could cause unexpected issues.\n  earlyResolvedFlags: new Map(),\n  booleanResolver: function booleanResolver(flagKey) {\n    if (process.env.NODE_ENV !== 'production') {\n      var unresolvedFlagCount = this.earlyResolvedFlags.get(flagKey) || 0;\n      this.earlyResolvedFlags.set(flagKey, unresolvedFlagCount + 1);\n    }\n    return false;\n  }\n};\nvar globalVar = typeof window !== 'undefined' ? window : globalThis;\nglobalVar[PFF_GLOBAL_KEY] = globalVar[PFF_GLOBAL_KEY] || DEFAULT_PFF_GLOBAL;\nexport function setBooleanResolver(resolver) {\n  globalVar[PFF_GLOBAL_KEY].booleanResolver = resolver;\n  if (process.env.NODE_ENV !== 'production') {\n    var _globalVar$PFF_GLOBAL;\n    if (((_globalVar$PFF_GLOBAL = globalVar[PFF_GLOBAL_KEY]) === null || _globalVar$PFF_GLOBAL === void 0 || (_globalVar$PFF_GLOBAL = _globalVar$PFF_GLOBAL.earlyResolvedFlags) === null || _globalVar$PFF_GLOBAL === void 0 ? void 0 : _globalVar$PFF_GLOBAL.size) > 0) {\n      debug(\"[%s]: The following list of Feature Flags were called, the following number of times, before setBooleanResolver.\", pkgName, Array.from(globalVar[PFF_GLOBAL_KEY].earlyResolvedFlags.entries()));\n      globalVar[PFF_GLOBAL_KEY].earlyResolvedFlags.clear();\n    }\n  }\n}\nexport function resolveBooleanFlag(flagKey) {\n  if (ENABLE_GLOBAL_PLATFORM_FF_OVERRIDE) {\n    debug('[%s]: The feature flags were enabled while running tests. The flag \"%s\" will be always enabled.', pkgName, flagKey);\n    return true;\n  }\n  try {\n    var _globalVar$PFF_GLOBAL2;\n    var result = (_globalVar$PFF_GLOBAL2 = globalVar[PFF_GLOBAL_KEY]) === null || _globalVar$PFF_GLOBAL2 === void 0 ? void 0 : _globalVar$PFF_GLOBAL2.booleanResolver(flagKey);\n    if (typeof result !== 'boolean') {\n      // eslint-disable-next-line no-console\n      console.warn(\"\".concat(flagKey, \" resolved to a non-boolean value, returning false for safety\"));\n      return false;\n    }\n    return result;\n  } catch (e) {\n    return false;\n  }\n}","map":{"version":3,"names":["debug","pkgName","PFF_GLOBAL_KEY","hasProcessEnv","process","env","ENV_ENABLE_PLATFORM_FF","ENV_STORYBOOK_ENABLE_PLATFORM_FF","ENABLE_GLOBAL_PLATFORM_FF_OVERRIDE","DEFAULT_PFF_GLOBAL","earlyResolvedFlags","Map","booleanResolver","flagKey","NODE_ENV","unresolvedFlagCount","get","set","globalVar","window","globalThis","setBooleanResolver","resolver","_globalVar$PFF_GLOBAL","size","Array","from","entries","clear","resolveBooleanFlag","_globalVar$PFF_GLOBAL2","result","console","warn","concat","e"],"sources":["/home/enterpi/Documents/iidm/pixel-kit/node_modules/@atlaskit/platform-feature-flags/dist/esm/resolvers.js"],"sourcesContent":["import { debug } from './debug';\nvar pkgName = '@atlaskit/platform-feature-flags';\nexport var PFF_GLOBAL_KEY = '__PLATFORM_FEATURE_FLAGS__';\nvar hasProcessEnv = typeof process !== 'undefined' && typeof process.env !== 'undefined';\n\n// FF global overrides can be configured by test runners or Storybook\nvar ENV_ENABLE_PLATFORM_FF = hasProcessEnv ?\n// Use global \"process\" variable and process.env['FLAG_NAME'] syntax, so it can be replaced by webpack DefinePlugin\nprocess.env['ENABLE_PLATFORM_FF'] === 'true' : false;\n\n// STORYBOOK_ENABLE_PLATFORM_FF is included as storybook only allows env vars prefixed with STORYBOOK\n// https://github.com/storybookjs/storybook/issues/12270\n\nvar ENV_STORYBOOK_ENABLE_PLATFORM_FF = hasProcessEnv ?\n// Use global \"process\" variable and process.env['FLAG_NAME'] syntax, so it can be replaced by webpack DefinePlugin\nprocess.env['STORYBOOK_ENABLE_PLATFORM_FF'] === 'true' : false;\nvar ENABLE_GLOBAL_PLATFORM_FF_OVERRIDE = ENV_ENABLE_PLATFORM_FF || ENV_STORYBOOK_ENABLE_PLATFORM_FF;\nvar DEFAULT_PFF_GLOBAL = {\n  // In development mode we want to capture any feature flag checks that happen using the default resolver and log this result when the resolver is replaced.\n  // This is because evaluating feature flags when the resolver/FF client is loaded asynchronously could cause unexpected issues.\n  earlyResolvedFlags: new Map(),\n  booleanResolver: function booleanResolver(flagKey) {\n    if (process.env.NODE_ENV !== 'production') {\n      var unresolvedFlagCount = this.earlyResolvedFlags.get(flagKey) || 0;\n      this.earlyResolvedFlags.set(flagKey, unresolvedFlagCount + 1);\n    }\n    return false;\n  }\n};\nvar globalVar = typeof window !== 'undefined' ? window : globalThis;\nglobalVar[PFF_GLOBAL_KEY] = globalVar[PFF_GLOBAL_KEY] || DEFAULT_PFF_GLOBAL;\nexport function setBooleanResolver(resolver) {\n  globalVar[PFF_GLOBAL_KEY].booleanResolver = resolver;\n  if (process.env.NODE_ENV !== 'production') {\n    var _globalVar$PFF_GLOBAL;\n    if (((_globalVar$PFF_GLOBAL = globalVar[PFF_GLOBAL_KEY]) === null || _globalVar$PFF_GLOBAL === void 0 || (_globalVar$PFF_GLOBAL = _globalVar$PFF_GLOBAL.earlyResolvedFlags) === null || _globalVar$PFF_GLOBAL === void 0 ? void 0 : _globalVar$PFF_GLOBAL.size) > 0) {\n      debug(\"[%s]: The following list of Feature Flags were called, the following number of times, before setBooleanResolver.\", pkgName, Array.from(globalVar[PFF_GLOBAL_KEY].earlyResolvedFlags.entries()));\n      globalVar[PFF_GLOBAL_KEY].earlyResolvedFlags.clear();\n    }\n  }\n}\nexport function resolveBooleanFlag(flagKey) {\n  if (ENABLE_GLOBAL_PLATFORM_FF_OVERRIDE) {\n    debug('[%s]: The feature flags were enabled while running tests. The flag \"%s\" will be always enabled.', pkgName, flagKey);\n    return true;\n  }\n  try {\n    var _globalVar$PFF_GLOBAL2;\n    var result = (_globalVar$PFF_GLOBAL2 = globalVar[PFF_GLOBAL_KEY]) === null || _globalVar$PFF_GLOBAL2 === void 0 ? void 0 : _globalVar$PFF_GLOBAL2.booleanResolver(flagKey);\n    if (typeof result !== 'boolean') {\n      // eslint-disable-next-line no-console\n      console.warn(\"\".concat(flagKey, \" resolved to a non-boolean value, returning false for safety\"));\n      return false;\n    }\n    return result;\n  } catch (e) {\n    return false;\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}