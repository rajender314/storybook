{"ast":null,"code":"const calculateDelay = (context, policy) => {\n  const {\n    attempt\n  } = context;\n  const {\n    delay,\n    factor\n  } = policy;\n  const retryAttempt = attempt - 1; // Do not use a delay on the first retry, or when the configured delay is 0\n\n  if (retryAttempt === 1 || delay === 0) {\n    return 0;\n  } // Linear factor, like: https://github.com/Polly-Contrib/Polly.Contrib.WaitAndRetry#wait-and-retry-with-linear-back-off\n\n  const add = factor * delay;\n  return delay + add * (retryAttempt - 2);\n};\nconst sleep = delay => new Promise(resolve => setTimeout(resolve, delay));\nconst getPolicy = configuration => {\n  var _configuration$delay, _configuration$factor, _configuration$maxAtt;\n  return {\n    delay: Math.max(0, (_configuration$delay = configuration.delay) != null ? _configuration$delay : 0),\n    factor: Math.max(0, (_configuration$factor = configuration.factor) != null ? _configuration$factor : 0),\n    maxAttempts: Math.max(0, (_configuration$maxAtt = configuration.maxAttempts) != null ? _configuration$maxAtt : 0)\n  };\n};\nexport function retry(retryable, policyConfiguration = {}) {\n  const policy = getPolicy(policyConfiguration);\n  const {\n    maxAttempts\n  } = policy;\n  const context = {\n    attempt: 1,\n    attemptsRemaining: maxAttempts\n  };\n  const onError = async err => {\n    if (context.attemptsRemaining === 0) {\n      throw err;\n    }\n    context.attempt += 1;\n    context.attemptsRemaining -= 1;\n    const delay = calculateDelay(context, policy);\n    if (delay) {\n      await sleep(delay);\n    }\n    return retryable().catch(onError);\n  };\n  return retryable().catch(onError);\n}","map":{"version":3,"names":["calculateDelay","context","policy","attempt","delay","factor","retryAttempt","add","sleep","Promise","resolve","setTimeout","getPolicy","configuration","_configuration$delay","_configuration$factor","_configuration$maxAtt","Math","max","maxAttempts","retry","retryable","policyConfiguration","attemptsRemaining","onError","err","catch"],"sources":["../../../../src/lazy/retry/index.tsx"],"sourcesContent":["export type RetryPolicy = {\n  delay: number;\n  factor: number;\n  maxAttempts: number;\n};\n\nexport type RetryPolicyConfiguration = Partial<RetryPolicy>;\n\ntype AttemptContext = {\n  attempt: number;\n  attemptsRemaining: number;\n};\n\nexport type Retryable<T> = () => Promise<T>;\n\nconst calculateDelay = (context: AttemptContext, policy: RetryPolicy) => {\n  const { attempt } = context;\n  const { delay, factor } = policy;\n\n  const retryAttempt = attempt - 1;\n  // Do not use a delay on the first retry, or when the configured delay is 0\n  if (retryAttempt === 1 || delay === 0) {\n    return 0;\n  }\n\n  // Linear factor, like: https://github.com/Polly-Contrib/Polly.Contrib.WaitAndRetry#wait-and-retry-with-linear-back-off\n  const add = factor * delay;\n\n  return delay + add * (retryAttempt - 2);\n};\n\nconst sleep = (delay: number) =>\n  new Promise(resolve => setTimeout(resolve, delay));\n\nconst getPolicy = (configuration: Partial<RetryPolicy>): RetryPolicy => ({\n  delay: Math.max(0, configuration.delay ?? 0),\n  factor: Math.max(0, configuration.factor ?? 0),\n  maxAttempts: Math.max(0, configuration.maxAttempts ?? 0),\n});\n\nexport function retry<T>(\n  retryable: Retryable<T>,\n  policyConfiguration: RetryPolicyConfiguration = {}\n) {\n  const policy = getPolicy(policyConfiguration);\n\n  const { maxAttempts } = policy;\n  const context: AttemptContext = {\n    attempt: 1,\n    attemptsRemaining: maxAttempts,\n  };\n\n  const onError = async (err: Error): Promise<T> => {\n    if (context.attemptsRemaining === 0) {\n      throw err;\n    }\n\n    context.attempt += 1;\n    context.attemptsRemaining -= 1;\n\n    const delay = calculateDelay(context, policy);\n    if (delay) {\n      await sleep(delay);\n    }\n\n    return retryable().catch(onError);\n  };\n\n  return retryable().catch(onError);\n}\n"],"mappings":"AAeA,MAAMA,cAAc,GAAGA,CAACC,OAAD,EAA0BC,MAA1B,KAAkD;EACvE,MAAM;IAAEC;EAAF,IAAcF,OAApB;EACA,MAAM;IAAEG,KAAF;IAASC;EAAT,IAAoBH,MAA1B;EAEA,MAAMI,YAAY,GAAGH,OAAO,GAAG,CAA/B,CAJuE,CAKvE;;EACA,IAAIG,YAAY,KAAK,CAAjB,IAAsBF,KAAK,KAAK,CAApC,EAAuC;IACrC,OAAO,CAAP;EACD,CARsE,CAUvE;;EACA,MAAMG,GAAG,GAAGF,MAAM,GAAGD,KAArB;EAEA,OAAOA,KAAK,GAAGG,GAAG,IAAID,YAAY,GAAG,CAAnB,CAAlB;AACD,CAdD;AAgBA,MAAME,KAAK,GAAIJ,KAAD,IACZ,IAAIK,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAUN,KAAV,CAAjC,CADF;AAGA,MAAMQ,SAAS,GAAIC,aAAD;EAAA,IAAAC,oBAAA,EAAAC,qBAAA,EAAAC,qBAAA;EAAA,OAAuD;IACvEZ,KAAK,EAAEa,IAAI,CAACC,GAAL,CAAS,CAAT,GAAAJ,oBAAA,GAAYD,aAAa,CAACT,KAA1B,YAAAU,oBAAA,GAAmC,CAAnC,CADgE;IAEvET,MAAM,EAAEY,IAAI,CAACC,GAAL,CAAS,CAAT,GAAAH,qBAAA,GAAYF,aAAa,CAACR,MAA1B,YAAAU,qBAAA,GAAoC,CAApC,CAF+D;IAGvEI,WAAW,EAAEF,IAAI,CAACC,GAAL,CAAS,CAAT,GAAAF,qBAAA,GAAYH,aAAa,CAACM,WAA1B,YAAAH,qBAAA,GAAyC,CAAzC;EAH0D,CAAvD;AAAA,CAAlB;AAMA,OAAO,SAASI,KAATA,CACLC,SADK,EAELC,mBAA6C,GAAG,EAF3C,EAGL;EACA,MAAMpB,MAAM,GAAGU,SAAS,CAACU,mBAAD,CAAxB;EAEA,MAAM;IAAEH;EAAF,IAAkBjB,MAAxB;EACA,MAAMD,OAAuB,GAAG;IAC9BE,OAAO,EAAE,CADqB;IAE9BoB,iBAAiB,EAAEJ;EAFW,CAAhC;EAKA,MAAMK,OAAO,GAAG,MAAOC,GAAP,IAAkC;IAChD,IAAIxB,OAAO,CAACsB,iBAAR,KAA8B,CAAlC,EAAqC;MACnC,MAAME,GAAN;IACD;IAEDxB,OAAO,CAACE,OAAR,IAAmB,CAAnB;IACAF,OAAO,CAACsB,iBAAR,IAA6B,CAA7B;IAEA,MAAMnB,KAAK,GAAGJ,cAAc,CAACC,OAAD,EAAUC,MAAV,CAA5B;IACA,IAAIE,KAAJ,EAAW;MACT,MAAMI,KAAK,CAACJ,KAAD,CAAX;IACD;IAED,OAAOiB,SAAS,GAAGK,KAAZ,CAAkBF,OAAlB,CAAP;EACD,CAdD;EAgBA,OAAOH,SAAS,GAAGK,KAAZ,CAAkBF,OAAlB,CAAP;AACD"},"metadata":{},"sourceType":"module"}