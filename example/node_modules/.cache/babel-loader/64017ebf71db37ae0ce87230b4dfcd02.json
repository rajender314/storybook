{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar _class2;\n/**\n * Below lines are copied from @material/material-color-utilities.\n * Do not modify it.\n */\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as utils from './color-utils';\nimport * as math from './math-utils';\n\n/**\n * A color system built using CAM16 hue and chroma, and L* from\n * L*a*b*.\n *\n * Using L* creates a link between the color system, contrast, and thus\n * accessibility. Contrast ratio depends on relative luminance, or Y in the XYZ\n * color space. L*, or perceptual luminance can be calculated from Y.\n *\n * Unlike Y, L* is linear to human perception, allowing trivial creation of\n * accurate color tones.\n *\n * Unlike contrast ratio, measuring contrast in L* is linear, and simple to\n * calculate. A difference of 40 in HCT tone guarantees a contrast ratio >= 3.0,\n * and a difference of 50 guarantees a contrast ratio >= 4.5.\n */\n\n/**\n * HCT, hue, chroma, and tone. A color system that provides a perceptually\n * accurate color measurement system that can also accurately render what colors\n * will appear as in different lighting environments.\n */\nexport var Hct = /*#__PURE__*/function () {\n  function Hct(argb) {\n    _classCallCheck(this, Hct);\n    this.argb = argb;\n    var cam = Cam16.fromInt(argb);\n    this.internalHue = cam.hue;\n    this.internalChroma = cam.chroma;\n    this.internalTone = utils.lstarFromArgb(argb);\n    this.argb = argb;\n  }\n  _createClass(Hct, [{\n    key: \"toInt\",\n    value: function toInt() {\n      return this.argb;\n    }\n\n    /**\n     * A number, in degrees, representing ex. red, orange, yellow, etc.\n     * Ranges from 0 <= hue < 360.\n     */\n  }, {\n    key: \"hue\",\n    get: function get() {\n      return this.internalHue;\n    }\n\n    /**\n     * @param newHue 0 <= newHue < 360; invalid values are corrected.\n     * Chroma may decrease because chroma has a different maximum for any given\n     * hue and tone.\n     */,\n    set: function set(newHue) {\n      this.setInternalState(HctSolver.solveToInt(newHue, this.internalChroma, this.internalTone));\n    }\n  }, {\n    key: \"chroma\",\n    get: function get() {\n      return this.internalChroma;\n    }\n\n    /**\n     * @param newChroma 0 <= newChroma < ?\n     * Chroma may decrease because chroma has a different maximum for any given\n     * hue and tone.\n     */,\n    set: function set(newChroma) {\n      this.setInternalState(HctSolver.solveToInt(this.internalHue, newChroma, this.internalTone));\n    }\n\n    /**\n     * Lightness. Ranges from 0 to 100.\n     */\n  }, {\n    key: \"tone\",\n    get: function get() {\n      return this.internalTone;\n    }\n\n    /**\n     * @param newTone 0 <= newTone <= 100; invalid valids are corrected.\n     * Chroma may decrease because chroma has a different maximum for any given\n     * hue and tone.\n     */,\n    set: function set(newTone) {\n      this.setInternalState(HctSolver.solveToInt(this.internalHue, this.internalChroma, newTone));\n    }\n  }, {\n    key: \"setInternalState\",\n    value: function setInternalState(argb) {\n      var cam = Cam16.fromInt(argb);\n      this.internalHue = cam.hue;\n      this.internalChroma = cam.chroma;\n      this.internalTone = utils.lstarFromArgb(argb);\n      this.argb = argb;\n    }\n\n    /**\n     * Translates a color into different [ViewingConditions].\n     *\n     * Colors change appearance. They look different with lights on versus off,\n     * the same color, as in hex code, on white looks different when on black.\n     * This is called color relativity, most famously explicated by Josef Albers\n     * in Interaction of Color.\n     *\n     * In color science, color appearance models can account for this and\n     * calculate the appearance of a color in different settings. HCT is based on\n     * CAM16, a color appearance model, and uses it to make these calculations.\n     *\n     * See [ViewingConditions.make] for parameters affecting color appearance.\n     */\n  }, {\n    key: \"inViewingConditions\",\n    value: function inViewingConditions(vc) {\n      // 1. Use CAM16 to find XYZ coordinates of color in specified VC.\n      var cam = Cam16.fromInt(this.toInt());\n      var viewedInVc = cam.xyzInViewingConditions(vc);\n\n      // 2. Create CAM16 of those XYZ coordinates in default VC.\n      var recastInVc = Cam16.fromXyzInViewingConditions(viewedInVc[0], viewedInVc[1], viewedInVc[2], ViewingConditions.make());\n\n      // 3. Create HCT from:\n      // - CAM16 using default VC with XYZ coordinates in specified VC.\n      // - L* converted from Y in XYZ coordinates in specified VC.\n      var recastHct = Hct.from(recastInVc.hue, recastInVc.chroma, utils.lstarFromY(viewedInVc[1]));\n      return recastHct;\n    }\n  }], [{\n    key: \"from\",\n    value:\n    /**\n     * @param hue 0 <= hue < 360; invalid values are corrected.\n     * @param chroma 0 <= chroma < ?; Informally, colorfulness. The color\n     *     returned may be lower than the requested chroma. Chroma has a different\n     *     maximum for any given hue and tone.\n     * @param tone 0 <= tone <= 100; invalid values are corrected.\n     * @return HCT representation of a color in default viewing conditions.\n     */\n\n    function from(hue, chroma, tone) {\n      return new Hct(HctSolver.solveToInt(hue, chroma, tone));\n    }\n\n    /**\n     * @param argb ARGB representation of a color.\n     * @return HCT representation of a color in default viewing conditions\n     */\n  }, {\n    key: \"fromInt\",\n    value: function fromInt(argb) {\n      return new Hct(argb);\n    }\n  }]);\n  return Hct;\n}();\n\n/**\n * CAM16, a color appearance model. Colors are not just defined by their hex\n * code, but rather, a hex code and viewing conditions.\n *\n * CAM16 instances also have coordinates in the CAM16-UCS space, called J*, a*,\n * b*, or jstar, astar, bstar in code. CAM16-UCS is included in the CAM16\n * specification, and should be used when measuring distances between colors.\n *\n * In traditional color spaces, a color can be identified solely by the\n * observer's measurement of the color. Color appearance models such as CAM16\n * also use information about the environment where the color was\n * observed, known as the viewing conditions.\n *\n * For example, white under the traditional assumption of a midday sun white\n * point is accurately measured as a slightly chromatic blue by CAM16. (roughly,\n * hue 203, chroma 3, lightness 100)\n */\nvar Cam16 = /*#__PURE__*/function () {\n  /**\n   * All of the CAM16 dimensions can be calculated from 3 of the dimensions, in\n   * the following combinations:\n   *      -  {j or q} and {c, m, or s} and hue\n   *      - jstar, astar, bstar\n   * Prefer using a static method that constructs from 3 of those dimensions.\n   * This constructor is intended for those methods to use to return all\n   * possible dimensions.\n   *\n   * @param hue\n   * @param chroma informally, colorfulness / color intensity. like saturation\n   *     in HSL, except perceptually accurate.\n   * @param j lightness\n   * @param q brightness; ratio of lightness to white point's lightness\n   * @param m colorfulness\n   * @param s saturation; ratio of chroma to white point's chroma\n   * @param jstar CAM16-UCS J coordinate\n   * @param astar CAM16-UCS a coordinate\n   * @param bstar CAM16-UCS b coordinate\n   */\n  function Cam16(hue, chroma, j, q, m, s, jstar, astar, bstar) {\n    _classCallCheck(this, Cam16);\n    this.hue = hue;\n    this.chroma = chroma;\n    this.j = j;\n    this.q = q;\n    this.m = m;\n    this.s = s;\n    this.jstar = jstar;\n    this.astar = astar;\n    this.bstar = bstar;\n  }\n\n  /**\n   * CAM16 instances also have coordinates in the CAM16-UCS space, called J*,\n   * a*, b*, or jstar, astar, bstar in code. CAM16-UCS is included in the CAM16\n   * specification, and is used to measure distances between colors.\n   */\n  _createClass(Cam16, [{\n    key: \"distance\",\n    value: function distance(other) {\n      var dJ = this.jstar - other.jstar;\n      var dA = this.astar - other.astar;\n      var dB = this.bstar - other.bstar;\n      var dEPrime = Math.sqrt(dJ * dJ + dA * dA + dB * dB);\n      var dE = 1.41 * Math.pow(dEPrime, 0.63);\n      return dE;\n    }\n\n    /**\n     * @param argb ARGB representation of a color.\n     * @return CAM16 color, assuming the color was viewed in default viewing\n     *     conditions.\n     */\n  }, {\n    key: \"toInt\",\n    value:\n    /**\n     *  @return ARGB representation of color, assuming the color was viewed in\n     *     default viewing conditions, which are near-identical to the default\n     *     viewing conditions for sRGB.\n     */\n    function toInt() {\n      return this.viewed(ViewingConditions.DEFAULT);\n    }\n\n    /**\n     * @param viewingConditions Information about the environment where the color\n     *     will be viewed.\n     * @return ARGB representation of color\n     */\n  }, {\n    key: \"viewed\",\n    value: function viewed(viewingConditions) {\n      var alpha = this.chroma === 0.0 || this.j === 0.0 ? 0.0 : this.chroma / Math.sqrt(this.j / 100.0);\n      var t = Math.pow(alpha / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73), 1.0 / 0.9);\n      var hRad = this.hue * Math.PI / 180.0;\n      var eHue = 0.25 * (Math.cos(hRad + 2.0) + 3.8);\n      var ac = viewingConditions.aw * Math.pow(this.j / 100.0, 1.0 / viewingConditions.c / viewingConditions.z);\n      var p1 = eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;\n      var p2 = ac / viewingConditions.nbb;\n      var hSin = Math.sin(hRad);\n      var hCos = Math.cos(hRad);\n      var gamma = 23.0 * (p2 + 0.305) * t / (23.0 * p1 + 11.0 * t * hCos + 108.0 * t * hSin);\n      var a = gamma * hCos;\n      var b = gamma * hSin;\n      var rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;\n      var gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;\n      var bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;\n      var rCBase = Math.max(0, 27.13 * Math.abs(rA) / (400.0 - Math.abs(rA)));\n      var rC = math.signum(rA) * (100.0 / viewingConditions.fl) * Math.pow(rCBase, 1.0 / 0.42);\n      var gCBase = Math.max(0, 27.13 * Math.abs(gA) / (400.0 - Math.abs(gA)));\n      var gC = math.signum(gA) * (100.0 / viewingConditions.fl) * Math.pow(gCBase, 1.0 / 0.42);\n      var bCBase = Math.max(0, 27.13 * Math.abs(bA) / (400.0 - Math.abs(bA)));\n      var bC = math.signum(bA) * (100.0 / viewingConditions.fl) * Math.pow(bCBase, 1.0 / 0.42);\n      var rF = rC / viewingConditions.rgbD[0];\n      var gF = gC / viewingConditions.rgbD[1];\n      var bF = bC / viewingConditions.rgbD[2];\n      var x = 1.86206786 * rF - 1.01125463 * gF + 0.14918677 * bF;\n      var y = 0.38752654 * rF + 0.62144744 * gF - 0.00897398 * bF;\n      var z = -0.0158415 * rF - 0.03412294 * gF + 1.04996444 * bF;\n      var argb = utils.argbFromXyz(x, y, z);\n      return argb;\n    }\n\n    /// Given color expressed in XYZ and viewed in [viewingConditions], convert to\n    /// CAM16.\n  }, {\n    key: \"xyzInViewingConditions\",\n    value:\n    /// XYZ representation of CAM16 seen in [viewingConditions].\n    function xyzInViewingConditions(viewingConditions) {\n      var alpha = this.chroma === 0.0 || this.j === 0.0 ? 0.0 : this.chroma / Math.sqrt(this.j / 100.0);\n      var t = Math.pow(alpha / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73), 1.0 / 0.9);\n      var hRad = this.hue * Math.PI / 180.0;\n      var eHue = 0.25 * (Math.cos(hRad + 2.0) + 3.8);\n      var ac = viewingConditions.aw * Math.pow(this.j / 100.0, 1.0 / viewingConditions.c / viewingConditions.z);\n      var p1 = eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;\n      var p2 = ac / viewingConditions.nbb;\n      var hSin = Math.sin(hRad);\n      var hCos = Math.cos(hRad);\n      var gamma = 23.0 * (p2 + 0.305) * t / (23.0 * p1 + 11 * t * hCos + 108.0 * t * hSin);\n      var a = gamma * hCos;\n      var b = gamma * hSin;\n      var rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;\n      var gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;\n      var bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;\n      var rCBase = Math.max(0, 27.13 * Math.abs(rA) / (400.0 - Math.abs(rA)));\n      var rC = math.signum(rA) * (100.0 / viewingConditions.fl) * Math.pow(rCBase, 1.0 / 0.42);\n      var gCBase = Math.max(0, 27.13 * Math.abs(gA) / (400.0 - Math.abs(gA)));\n      var gC = math.signum(gA) * (100.0 / viewingConditions.fl) * Math.pow(gCBase, 1.0 / 0.42);\n      var bCBase = Math.max(0, 27.13 * Math.abs(bA) / (400.0 - Math.abs(bA)));\n      var bC = math.signum(bA) * (100.0 / viewingConditions.fl) * Math.pow(bCBase, 1.0 / 0.42);\n      var rF = rC / viewingConditions.rgbD[0];\n      var gF = gC / viewingConditions.rgbD[1];\n      var bF = bC / viewingConditions.rgbD[2];\n      var x = 1.86206786 * rF - 1.01125463 * gF + 0.14918677 * bF;\n      var y = 0.38752654 * rF + 0.62144744 * gF - 0.00897398 * bF;\n      var z = -0.0158415 * rF - 0.03412294 * gF + 1.04996444 * bF;\n      return [x, y, z];\n    }\n  }], [{\n    key: \"fromInt\",\n    value: function fromInt(argb) {\n      return Cam16.fromIntInViewingConditions(argb, ViewingConditions.DEFAULT);\n    }\n\n    /**\n     * @param argb ARGB representation of a color.\n     * @param viewingConditions Information about the environment where the color\n     *     was observed.\n     * @return CAM16 color.\n     */\n  }, {\n    key: \"fromIntInViewingConditions\",\n    value: function fromIntInViewingConditions(argb, viewingConditions) {\n      var red = (argb & 0x00ff0000) >> 16;\n      var green = (argb & 0x0000ff00) >> 8;\n      var blue = argb & 0x000000ff;\n      var redL = utils.linearized(red);\n      var greenL = utils.linearized(green);\n      var blueL = utils.linearized(blue);\n      var x = 0.41233895 * redL + 0.35762064 * greenL + 0.18051042 * blueL;\n      var y = 0.2126 * redL + 0.7152 * greenL + 0.0722 * blueL;\n      var z = 0.01932141 * redL + 0.11916382 * greenL + 0.95034478 * blueL;\n      var rC = 0.401288 * x + 0.650173 * y - 0.051461 * z;\n      var gC = -0.250268 * x + 1.204414 * y + 0.045854 * z;\n      var bC = -0.002079 * x + 0.048952 * y + 0.953127 * z;\n      var rD = viewingConditions.rgbD[0] * rC;\n      var gD = viewingConditions.rgbD[1] * gC;\n      var bD = viewingConditions.rgbD[2] * bC;\n      var rAF = Math.pow(viewingConditions.fl * Math.abs(rD) / 100.0, 0.42);\n      var gAF = Math.pow(viewingConditions.fl * Math.abs(gD) / 100.0, 0.42);\n      var bAF = Math.pow(viewingConditions.fl * Math.abs(bD) / 100.0, 0.42);\n      var rA = math.signum(rD) * 400.0 * rAF / (rAF + 27.13);\n      var gA = math.signum(gD) * 400.0 * gAF / (gAF + 27.13);\n      var bA = math.signum(bD) * 400.0 * bAF / (bAF + 27.13);\n      var a = (11.0 * rA + -12.0 * gA + bA) / 11.0;\n      var b = (rA + gA - 2.0 * bA) / 9.0;\n      var u = (20.0 * rA + 20.0 * gA + 21.0 * bA) / 20.0;\n      var p2 = (40.0 * rA + 20.0 * gA + bA) / 20.0;\n      var atan2 = Math.atan2(b, a);\n      var atanDegrees = atan2 * 180.0 / Math.PI;\n      var hue = atanDegrees < 0 ? atanDegrees + 360.0 : atanDegrees >= 360 ? atanDegrees - 360.0 : atanDegrees;\n      var hueRadians = hue * Math.PI / 180.0;\n      var ac = p2 * viewingConditions.nbb;\n      var j = 100.0 * Math.pow(ac / viewingConditions.aw, viewingConditions.c * viewingConditions.z);\n      var q = 4.0 / viewingConditions.c * Math.sqrt(j / 100.0) * (viewingConditions.aw + 4.0) * viewingConditions.fLRoot;\n      var huePrime = hue < 20.14 ? hue + 360 : hue;\n      var eHue = 0.25 * (Math.cos(huePrime * Math.PI / 180.0 + 2.0) + 3.8);\n      var p1 = 50000.0 / 13.0 * eHue * viewingConditions.nc * viewingConditions.ncb;\n      var t = p1 * Math.sqrt(a * a + b * b) / (u + 0.305);\n      var alpha = Math.pow(t, 0.9) * Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);\n      var c = alpha * Math.sqrt(j / 100.0);\n      var m = c * viewingConditions.fLRoot;\n      var s = 50.0 * Math.sqrt(alpha * viewingConditions.c / (viewingConditions.aw + 4.0));\n      var jstar = (1.0 + 100.0 * 0.007) * j / (1.0 + 0.007 * j);\n      var mstar = 1.0 / 0.0228 * Math.log(1.0 + 0.0228 * m);\n      var astar = mstar * Math.cos(hueRadians);\n      var bstar = mstar * Math.sin(hueRadians);\n      return new Cam16(hue, c, j, q, m, s, jstar, astar, bstar);\n    }\n\n    /**\n     * @param j CAM16 lightness\n     * @param c CAM16 chroma\n     * @param h CAM16 hue\n     */\n  }, {\n    key: \"fromJch\",\n    value: function fromJch(j, c, h) {\n      return Cam16.fromJchInViewingConditions(j, c, h, ViewingConditions.DEFAULT);\n    }\n\n    /**\n     * @param j CAM16 lightness\n     * @param c CAM16 chroma\n     * @param h CAM16 hue\n     * @param viewingConditions Information about the environment where the color\n     *     was observed.\n     */\n  }, {\n    key: \"fromJchInViewingConditions\",\n    value: function fromJchInViewingConditions(j, c, h, viewingConditions) {\n      var q = 4.0 / viewingConditions.c * Math.sqrt(j / 100.0) * (viewingConditions.aw + 4.0) * viewingConditions.fLRoot;\n      var m = c * viewingConditions.fLRoot;\n      var alpha = c / Math.sqrt(j / 100.0);\n      var s = 50.0 * Math.sqrt(alpha * viewingConditions.c / (viewingConditions.aw + 4.0));\n      var hueRadians = h * Math.PI / 180.0;\n      var jstar = (1.0 + 100.0 * 0.007) * j / (1.0 + 0.007 * j);\n      var mstar = 1.0 / 0.0228 * Math.log(1.0 + 0.0228 * m);\n      var astar = mstar * Math.cos(hueRadians);\n      var bstar = mstar * Math.sin(hueRadians);\n      return new Cam16(h, c, j, q, m, s, jstar, astar, bstar);\n    }\n\n    /**\n     * @param jstar CAM16-UCS lightness.\n     * @param astar CAM16-UCS a dimension. Like a* in L*a*b*, it is a Cartesian\n     *     coordinate on the Y axis.\n     * @param bstar CAM16-UCS b dimension. Like a* in L*a*b*, it is a Cartesian\n     *     coordinate on the X axis.\n     */\n  }, {\n    key: \"fromUcs\",\n    value: function fromUcs(jstar, astar, bstar) {\n      return Cam16.fromUcsInViewingConditions(jstar, astar, bstar, ViewingConditions.DEFAULT);\n    }\n\n    /**\n     * @param jstar CAM16-UCS lightness.\n     * @param astar CAM16-UCS a dimension. Like a* in L*a*b*, it is a Cartesian\n     *     coordinate on the Y axis.\n     * @param bstar CAM16-UCS b dimension. Like a* in L*a*b*, it is a Cartesian\n     *     coordinate on the X axis.\n     * @param viewingConditions Information about the environment where the color\n     *     was observed.\n     */\n  }, {\n    key: \"fromUcsInViewingConditions\",\n    value: function fromUcsInViewingConditions(jstar, astar, bstar, viewingConditions) {\n      var a = astar;\n      var b = bstar;\n      var m = Math.sqrt(a * a + b * b);\n      var M = (Math.exp(m * 0.0228) - 1.0) / 0.0228;\n      var c = M / viewingConditions.fLRoot;\n      var h = Math.atan2(b, a) * (180.0 / Math.PI);\n      if (h < 0.0) {\n        h += 360.0;\n      }\n      var j = jstar / (1 - (jstar - 100) * 0.007);\n      return Cam16.fromJchInViewingConditions(j, c, h, viewingConditions);\n    }\n  }, {\n    key: \"fromXyzInViewingConditions\",\n    value: function fromXyzInViewingConditions(x, y, z, viewingConditions) {\n      // Transform XYZ to 'cone'/'rgb' responses\n\n      var rC = 0.401288 * x + 0.650173 * y - 0.051461 * z;\n      var gC = -0.250268 * x + 1.204414 * y + 0.045854 * z;\n      var bC = -0.002079 * x + 0.048952 * y + 0.953127 * z;\n\n      // Discount illuminant\n      var rD = viewingConditions.rgbD[0] * rC;\n      var gD = viewingConditions.rgbD[1] * gC;\n      var bD = viewingConditions.rgbD[2] * bC;\n\n      // chromatic adaptation\n      var rAF = Math.pow(viewingConditions.fl * Math.abs(rD) / 100.0, 0.42);\n      var gAF = Math.pow(viewingConditions.fl * Math.abs(gD) / 100.0, 0.42);\n      var bAF = Math.pow(viewingConditions.fl * Math.abs(bD) / 100.0, 0.42);\n      var rA = math.signum(rD) * 400.0 * rAF / (rAF + 27.13);\n      var gA = math.signum(gD) * 400.0 * gAF / (gAF + 27.13);\n      var bA = math.signum(bD) * 400.0 * bAF / (bAF + 27.13);\n\n      // redness-greenness\n      var a = (11.0 * rA + -12.0 * gA + bA) / 11.0;\n      // yellowness-blueness\n      var b = (rA + gA - 2.0 * bA) / 9.0;\n\n      // auxiliary components\n      var u = (20.0 * rA + 20.0 * gA + 21.0 * bA) / 20.0;\n      var p2 = (40.0 * rA + 20.0 * gA + bA) / 20.0;\n\n      // hue\n      var atan2 = Math.atan2(b, a);\n      var atanDegrees = atan2 * 180.0 / Math.PI;\n      var hue = atanDegrees < 0 ? atanDegrees + 360.0 : atanDegrees >= 360 ? atanDegrees - 360 : atanDegrees;\n      var hueRadians = hue * Math.PI / 180.0;\n\n      // achromatic response to color\n      var ac = p2 * viewingConditions.nbb;\n\n      // CAM16 lightness and brightness\n      var J = 100.0 * Math.pow(ac / viewingConditions.aw, viewingConditions.c * viewingConditions.z);\n      var Q = 4.0 / viewingConditions.c * Math.sqrt(J / 100.0) * (viewingConditions.aw + 4.0) * viewingConditions.fLRoot;\n      var huePrime = hue < 20.14 ? hue + 360 : hue;\n      var eHue = 1.0 / 4.0 * (Math.cos(huePrime * Math.PI / 180.0 + 2.0) + 3.8);\n      var p1 = 50000.0 / 13.0 * eHue * viewingConditions.nc * viewingConditions.ncb;\n      var t = p1 * Math.sqrt(a * a + b * b) / (u + 0.305);\n      var alpha = Math.pow(t, 0.9) * Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);\n      // CAM16 chroma, colorfulness, chroma\n      var C = alpha * Math.sqrt(J / 100.0);\n      var M = C * viewingConditions.fLRoot;\n      var s = 50.0 * Math.sqrt(alpha * viewingConditions.c / (viewingConditions.aw + 4.0));\n\n      // CAM16-UCS components\n      var jstar = (1.0 + 100.0 * 0.007) * J / (1.0 + 0.007 * J);\n      var mstar = Math.log(1.0 + 0.0228 * M) / 0.0228;\n      var astar = mstar * Math.cos(hueRadians);\n      var bstar = mstar * Math.sin(hueRadians);\n      return new Cam16(hue, C, J, Q, M, s, jstar, astar, bstar);\n    }\n  }]);\n  return Cam16;\n}(); // This file is automatically generated. Do not modify it.\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable:class-as-namespace\n/**\n * A class that solves the HCT equation.\n */\nvar HctSolver = /*#__PURE__*/function () {\n  function HctSolver() {\n    _classCallCheck(this, HctSolver);\n  }\n  _createClass(HctSolver, null, [{\n    key: \"sanitizeRadians\",\n    value:\n    /**\n     * Sanitizes a small enough angle in radians.\n     *\n     * @param angle An angle in radians; must not deviate too much\n     * from 0.\n     * @return A coterminal angle between 0 and 2pi.\n     */\n    function sanitizeRadians(angle) {\n      return (angle + Math.PI * 8) % (Math.PI * 2);\n    }\n\n    /**\n     * Delinearizes an RGB component, returning a floating-point\n     * number.\n     *\n     * @param rgbComponent 0.0 <= rgb_component <= 100.0, represents\n     * linear R/G/B channel\n     * @return 0.0 <= output <= 255.0, color channel converted to\n     * regular RGB space\n     */\n  }, {\n    key: \"trueDelinearized\",\n    value: function trueDelinearized(rgbComponent) {\n      var normalized = rgbComponent / 100.0;\n      var delinearized = 0.0;\n      if (normalized <= 0.0031308) {\n        delinearized = normalized * 12.92;\n      } else {\n        delinearized = 1.055 * Math.pow(normalized, 1.0 / 2.4) - 0.055;\n      }\n      return delinearized * 255.0;\n    }\n  }, {\n    key: \"chromaticAdaptation\",\n    value: function chromaticAdaptation(component) {\n      var af = Math.pow(Math.abs(component), 0.42);\n      return math.signum(component) * 400.0 * af / (af + 27.13);\n    }\n\n    /**\n     * Returns the hue of a linear RGB color in CAM16.\n     *\n     * @param linrgb The linear RGB coordinates of a color.\n     * @return The hue of the color in CAM16, in radians.\n     */\n  }, {\n    key: \"hueOf\",\n    value: function hueOf(linrgb) {\n      var scaledDiscount = math.matrixMultiply(linrgb, HctSolver.SCALED_DISCOUNT_FROM_LINRGB);\n      var rA = HctSolver.chromaticAdaptation(scaledDiscount[0]);\n      var gA = HctSolver.chromaticAdaptation(scaledDiscount[1]);\n      var bA = HctSolver.chromaticAdaptation(scaledDiscount[2]);\n      // redness-greenness\n      var a = (11.0 * rA + -12.0 * gA + bA) / 11.0;\n      // yellowness-blueness\n      var b = (rA + gA - 2.0 * bA) / 9.0;\n      return Math.atan2(b, a);\n    }\n  }, {\n    key: \"areInCyclicOrder\",\n    value: function areInCyclicOrder(a, b, c) {\n      var deltaAB = HctSolver.sanitizeRadians(b - a);\n      var deltaAC = HctSolver.sanitizeRadians(c - a);\n      return deltaAB < deltaAC;\n    }\n\n    /**\n     * Solves the lerp equation.\n     *\n     * @param source The starting number.\n     * @param mid The number in the middle.\n     * @param target The ending number.\n     * @return A number t such that lerp(source, target, t) = mid.\n     */\n  }, {\n    key: \"intercept\",\n    value: function intercept(source, mid, target) {\n      return (mid - source) / (target - source);\n    }\n  }, {\n    key: \"lerpPoint\",\n    value: function lerpPoint(source, t, target) {\n      return [source[0] + (target[0] - source[0]) * t, source[1] + (target[1] - source[1]) * t, source[2] + (target[2] - source[2]) * t];\n    }\n\n    /**\n     * Intersects a segment with a plane.\n     *\n     * @param source The coordinates of point A.\n     * @param coordinate The R-, G-, or B-coordinate of the plane.\n     * @param target The coordinates of point B.\n     * @param axis The axis the plane is perpendicular with. (0: R, 1:\n     * G, 2: B)\n     * @return The intersection point of the segment AB with the plane\n     * R=coordinate, G=coordinate, or B=coordinate\n     */\n  }, {\n    key: \"setCoordinate\",\n    value: function setCoordinate(source, coordinate, target, axis) {\n      var t = HctSolver.intercept(source[axis], coordinate, target[axis]);\n      return HctSolver.lerpPoint(source, t, target);\n    }\n  }, {\n    key: \"isBounded\",\n    value: function isBounded(x) {\n      return 0.0 <= x && x <= 100.0;\n    }\n\n    /**\n     * Returns the nth possible vertex of the polygonal intersection.\n     *\n     * @param y The Y value of the plane.\n     * @param n The zero-based index of the point. 0 <= n <= 11.\n     * @return The nth possible vertex of the polygonal intersection\n     * of the y plane and the RGB cube, in linear RGB coordinates, if\n     * it exists. If this possible vertex lies outside of the cube,\n     * [-1.0, -1.0, -1.0] is returned.\n     */\n  }, {\n    key: \"nthVertex\",\n    value: function nthVertex(y, n) {\n      var kR = HctSolver.Y_FROM_LINRGB[0];\n      var kG = HctSolver.Y_FROM_LINRGB[1];\n      var kB = HctSolver.Y_FROM_LINRGB[2];\n      var coordA = n % 4 <= 1 ? 0.0 : 100.0;\n      var coordB = n % 2 === 0 ? 0.0 : 100.0;\n      if (n < 4) {\n        var g = coordA;\n        var b = coordB;\n        var r = (y - g * kG - b * kB) / kR;\n        if (HctSolver.isBounded(r)) {\n          return [r, g, b];\n        } else {\n          return [-1.0, -1.0, -1.0];\n        }\n      } else if (n < 8) {\n        var _b = coordA;\n        var _r = coordB;\n        var _g = (y - _r * kR - _b * kB) / kG;\n        if (HctSolver.isBounded(_g)) {\n          return [_r, _g, _b];\n        } else {\n          return [-1.0, -1.0, -1.0];\n        }\n      } else {\n        var _r2 = coordA;\n        var _g2 = coordB;\n        var _b2 = (y - _r2 * kR - _g2 * kG) / kB;\n        if (HctSolver.isBounded(_b2)) {\n          return [_r2, _g2, _b2];\n        } else {\n          return [-1.0, -1.0, -1.0];\n        }\n      }\n    }\n\n    /**\n     * Finds the segment containing the desired color.\n     *\n     * @param y The Y value of the color.\n     * @param targetHue The hue of the color.\n     * @return A list of two sets of linear RGB coordinates, each\n     * corresponding to an endpoint of the segment containing the\n     * desired color.\n     */\n  }, {\n    key: \"bisectToSegment\",\n    value: function bisectToSegment(y, targetHue) {\n      var left = [-1.0, -1.0, -1.0];\n      var right = left;\n      var leftHue = 0.0;\n      var rightHue = 0.0;\n      var initialized = false;\n      var uncut = true;\n      for (var _n = 0; _n < 12; _n++) {\n        var mid = HctSolver.nthVertex(y, _n);\n        if (mid[0] < 0) {\n          continue;\n        }\n        var midHue = HctSolver.hueOf(mid);\n        if (!initialized) {\n          left = mid;\n          right = mid;\n          leftHue = midHue;\n          rightHue = midHue;\n          initialized = true;\n          continue;\n        }\n        if (uncut || HctSolver.areInCyclicOrder(leftHue, midHue, rightHue)) {\n          uncut = false;\n          if (HctSolver.areInCyclicOrder(leftHue, targetHue, midHue)) {\n            right = mid;\n            rightHue = midHue;\n          } else {\n            left = mid;\n            leftHue = midHue;\n          }\n        }\n      }\n      return [left, right];\n    }\n  }, {\n    key: \"midpoint\",\n    value: function midpoint(a, b) {\n      return [(a[0] + b[0]) / 2, (a[1] + b[1]) / 2, (a[2] + b[2]) / 2];\n    }\n  }, {\n    key: \"criticalPlaneBelow\",\n    value: function criticalPlaneBelow(x) {\n      return Math.floor(x - 0.5);\n    }\n  }, {\n    key: \"criticalPlaneAbove\",\n    value: function criticalPlaneAbove(x) {\n      return Math.ceil(x - 0.5);\n    }\n\n    /**\n     * Finds a color with the given Y and hue on the boundary of the\n     * cube.\n     *\n     * @param y The Y value of the color.\n     * @param targetHue The hue of the color.\n     * @return The desired color, in linear RGB coordinates.\n     */\n  }, {\n    key: \"bisectToLimit\",\n    value: function bisectToLimit(y, targetHue) {\n      var segment = HctSolver.bisectToSegment(y, targetHue);\n      var left = segment[0];\n      var leftHue = HctSolver.hueOf(left);\n      var right = segment[1];\n      for (var axis = 0; axis < 3; axis++) {\n        if (left[axis] !== right[axis]) {\n          var lPlane = -1;\n          var rPlane = 255;\n          if (left[axis] < right[axis]) {\n            lPlane = HctSolver.criticalPlaneBelow(HctSolver.trueDelinearized(left[axis]));\n            rPlane = HctSolver.criticalPlaneAbove(HctSolver.trueDelinearized(right[axis]));\n          } else {\n            lPlane = HctSolver.criticalPlaneAbove(HctSolver.trueDelinearized(left[axis]));\n            rPlane = HctSolver.criticalPlaneBelow(HctSolver.trueDelinearized(right[axis]));\n          }\n          for (var i = 0; i < 8; i++) {\n            if (Math.abs(rPlane - lPlane) <= 1) {\n              break;\n            } else {\n              var mPlane = Math.floor((lPlane + rPlane) / 2.0);\n              var midPlaneCoordinate = HctSolver.CRITICAL_PLANES[mPlane];\n              var mid = HctSolver.setCoordinate(left, midPlaneCoordinate, right, axis);\n              var midHue = HctSolver.hueOf(mid);\n              if (HctSolver.areInCyclicOrder(leftHue, targetHue, midHue)) {\n                right = mid;\n                rPlane = mPlane;\n              } else {\n                left = mid;\n                leftHue = midHue;\n                lPlane = mPlane;\n              }\n            }\n          }\n        }\n      }\n      return HctSolver.midpoint(left, right);\n    }\n  }, {\n    key: \"inverseChromaticAdaptation\",\n    value: function inverseChromaticAdaptation(adapted) {\n      var adaptedAbs = Math.abs(adapted);\n      var base = Math.max(0, 27.13 * adaptedAbs / (400.0 - adaptedAbs));\n      return math.signum(adapted) * Math.pow(base, 1.0 / 0.42);\n    }\n\n    /**\n     * Finds a color with the given hue, chroma, and Y.\n     *\n     * @param hueRadians The desired hue in radians.\n     * @param chroma The desired chroma.\n     * @param y The desired Y.\n     * @return The desired color as a hexadecimal integer, if found; 0\n     * otherwise.\n     */\n  }, {\n    key: \"findResultByJ\",\n    value: function findResultByJ(hueRadians, chroma, y) {\n      // Initial estimate of j.\n      var j = Math.sqrt(y) * 11.0;\n      // ===========================================================\n      // Operations inlined from Cam16 to avoid repeated calculation\n      // ===========================================================\n      var viewingConditions = ViewingConditions.DEFAULT;\n      var tInnerCoeff = 1 / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);\n      var eHue = 0.25 * (Math.cos(hueRadians + 2.0) + 3.8);\n      var p1 = eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;\n      var hSin = Math.sin(hueRadians);\n      var hCos = Math.cos(hueRadians);\n      for (var iterationRound = 0; iterationRound < 5; iterationRound++) {\n        // ===========================================================\n        // Operations inlined from Cam16 to avoid repeated calculation\n        // ===========================================================\n        var jNormalized = j / 100.0;\n        var alpha = chroma === 0.0 || j === 0.0 ? 0.0 : chroma / Math.sqrt(jNormalized);\n        var t = Math.pow(alpha * tInnerCoeff, 1.0 / 0.9);\n        var ac = viewingConditions.aw * Math.pow(jNormalized, 1.0 / viewingConditions.c / viewingConditions.z);\n        var p2 = ac / viewingConditions.nbb;\n        var gamma = 23.0 * (p2 + 0.305) * t / (23.0 * p1 + 11 * t * hCos + 108.0 * t * hSin);\n        var a = gamma * hCos;\n        var b = gamma * hSin;\n        var rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;\n        var gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;\n        var bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;\n        var rCScaled = HctSolver.inverseChromaticAdaptation(rA);\n        var gCScaled = HctSolver.inverseChromaticAdaptation(gA);\n        var bCScaled = HctSolver.inverseChromaticAdaptation(bA);\n        var linrgb = math.matrixMultiply([rCScaled, gCScaled, bCScaled], HctSolver.LINRGB_FROM_SCALED_DISCOUNT);\n        // ===========================================================\n        // Operations inlined from Cam16 to avoid repeated calculation\n        // ===========================================================\n        if (linrgb[0] < 0 || linrgb[1] < 0 || linrgb[2] < 0) {\n          return 0;\n        }\n        var kR = HctSolver.Y_FROM_LINRGB[0];\n        var kG = HctSolver.Y_FROM_LINRGB[1];\n        var kB = HctSolver.Y_FROM_LINRGB[2];\n        var fnj = kR * linrgb[0] + kG * linrgb[1] + kB * linrgb[2];\n        if (fnj <= 0) {\n          return 0;\n        }\n        if (iterationRound === 4 || Math.abs(fnj - y) < 0.002) {\n          if (linrgb[0] > 100.01 || linrgb[1] > 100.01 || linrgb[2] > 100.01) {\n            return 0;\n          }\n          return utils.argbFromLinrgb(linrgb);\n        }\n        // Iterates with Newton method,\n        // Using 2 * fn(j) / j as the approximation of fn'(j)\n        j = j - (fnj - y) * j / (2 * fnj);\n      }\n      return 0;\n    }\n\n    /**\n     * Finds an sRGB color with the given hue, chroma, and L*, if\n     * possible.\n     *\n     * @param hueDegrees The desired hue, in degrees.\n     * @param chroma The desired chroma.\n     * @param lstar The desired L*.\n     * @return A hexadecimal representing the sRGB color. The color\n     * has sufficiently close hue, chroma, and L* to the desired\n     * values, if possible; otherwise, the hue and L* will be\n     * sufficiently close, and chroma will be maximized.\n     */\n  }, {\n    key: \"solveToInt\",\n    value: function solveToInt(hueDegrees, chroma, lstar) {\n      if (chroma < 0.0001 || lstar < 0.0001 || lstar > 99.9999) {\n        return utils.argbFromLstar(lstar);\n      }\n      hueDegrees = math.sanitizeDegreesDouble(hueDegrees);\n      var hueRadians = hueDegrees / 180 * Math.PI;\n      var y = utils.yFromLstar(lstar);\n      var exactAnswer = HctSolver.findResultByJ(hueRadians, chroma, y);\n      if (exactAnswer !== 0) {\n        return exactAnswer;\n      }\n      var linrgb = HctSolver.bisectToLimit(y, hueRadians);\n      return utils.argbFromLinrgb(linrgb);\n    }\n\n    /**\n     * Finds an sRGB color with the given hue, chroma, and L*, if\n     * possible.\n     *\n     * @param hueDegrees The desired hue, in degrees.\n     * @param chroma The desired chroma.\n     * @param lstar The desired L*.\n     * @return An CAM16 object representing the sRGB color. The color\n     * has sufficiently close hue, chroma, and L* to the desired\n     * values, if possible; otherwise, the hue and L* will be\n     * sufficiently close, and chroma will be maximized.\n     */\n  }, {\n    key: \"solveToCam\",\n    value: function solveToCam(hueDegrees, chroma, lstar) {\n      return Cam16.fromInt(HctSolver.solveToInt(hueDegrees, chroma, lstar));\n    }\n  }]);\n  return HctSolver;\n}();\n_defineProperty(HctSolver, \"SCALED_DISCOUNT_FROM_LINRGB\", [[0.001200833568784504, 0.002389694492170889, 0.0002795742885861124], [0.0005891086651375999, 0.0029785502573438758, 0.0003270666104008398], [0.00010146692491640572, 0.0005364214359186694, 0.0032979401770712076]]);\n_defineProperty(HctSolver, \"LINRGB_FROM_SCALED_DISCOUNT\", [[1373.2198709594231, -1100.4251190754821, -7.278681089101213], [-271.815969077903, 559.6580465940733, -32.46047482791194], [1.9622899599665666, -57.173814538844006, 308.7233197812385]]);\n_defineProperty(HctSolver, \"Y_FROM_LINRGB\", [0.2126, 0.7152, 0.0722]);\n_defineProperty(HctSolver, \"CRITICAL_PLANES\", [0.015176349177441876, 0.045529047532325624, 0.07588174588720938, 0.10623444424209313, 0.13658714259697685, 0.16693984095186062, 0.19729253930674434, 0.2276452376616281, 0.2579979360165119, 0.28835063437139563, 0.3188300904430532, 0.350925934958123, 0.3848314933096426, 0.42057480301049466, 0.458183274052838, 0.4976837250274023, 0.5391024159806381, 0.5824650784040898, 0.6277969426914107, 0.6751227633498623, 0.7244668422128921, 0.775853049866786, 0.829304845476233, 0.8848452951698498, 0.942497089126609, 1.0022825574869039, 1.0642236851973577, 1.1283421258858297, 1.1946592148522128, 1.2631959812511864, 1.3339731595349034, 1.407011200216447, 1.4823302800086415, 1.5599503113873272, 1.6398909516233677, 1.7221716113234105, 1.8068114625156377, 1.8938294463134073, 1.9832442801866852, 2.075074464868551, 2.1693382909216234, 2.2660538449872063, 2.36523901573795, 2.4669114995532007, 2.5710888059345764, 2.6777882626779785, 2.7870270208169257, 2.898822059350997, 3.0131901897720907, 3.1301480604002863, 3.2497121605402226, 3.3718988244681087, 3.4967242352587946, 3.624204428461639, 3.754355295633311, 3.887192587735158, 4.022731918402185, 4.160988767090289, 4.301978482107941, 4.445716283538092, 4.592217266055746, 4.741496401646282, 4.893568542229298, 5.048448422192488, 5.20615066083972, 5.3666897647573375, 5.5300801301023865, 5.696336044816294, 5.865471690767354, 6.037501145825082, 6.212438385869475, 6.390297286737924, 6.571091626112461, 6.7548350853498045, 6.941541251256611, 7.131223617812143, 7.323895587840543, 7.5195704746346665, 7.7182615035334345, 7.919981813454504, 8.124744458384042, 8.332562408825165, 8.543448553206703, 8.757415699253682, 8.974476575321063, 9.194643831691977, 9.417930041841839, 9.644347703669503, 9.873909240696694, 10.106627003236781, 10.342513269534024, 10.58158024687427, 10.8238400726681, 11.069304815507364, 11.317986476196008, 11.569896988756009, 11.825048221409341, 12.083451977536606, 12.345119996613247, 12.610063955123938, 12.878295467455942, 13.149826086772048, 13.42466730586372, 13.702830557985108, 13.984327217668513, 14.269168601521828, 14.55736596900856, 14.848930523210871, 15.143873411576273, 15.44220572664832, 15.743938506781891, 16.04908273684337, 16.35764934889634, 16.66964922287304, 16.985093187232053, 17.30399201960269, 17.62635644741625, 17.95219714852476, 18.281524751807332, 18.614349837764564, 18.95068293910138, 19.290534541298456, 19.633915083172692, 19.98083495742689, 20.331304511189067, 20.685334046541502, 21.042933821039977, 21.404114048223256, 21.76888489811322, 22.137256497705877, 22.50923893145328, 22.884842241736916, 23.264076429332462, 23.6469514538663, 24.033477234264016, 24.42366364919083, 24.817520537484558, 25.21505769858089, 25.61628489293138, 26.021211842414342, 26.429848230738664, 26.842203703840827, 27.258287870275353, 27.678110301598522, 28.10168053274597, 28.529008062403893, 28.96010235337422, 29.39497283293396, 29.83362889318845, 30.276079891419332, 30.722335150426627, 31.172403958865512, 31.62629557157785, 32.08401920991837, 32.54558406207592, 33.010999283389665, 33.4802739966603, 33.953417292456834, 34.430438229418264, 34.911345834551085, 35.39614910352207, 35.88485700094671, 36.37747846067349, 36.87402238606382, 37.37449765026789, 37.87891309649659, 38.38727753828926, 38.89959975977785, 39.41588851594697, 39.93615253289054, 40.460400508064545, 40.98864111053629, 41.520882981230194, 42.05713473317016, 42.597404951718396, 43.141702194811224, 43.6900349931913, 44.24241185063697, 44.798841244188324, 45.35933162437017, 45.92389141541209, 46.49252901546552, 47.065252796817916, 47.64207110610409, 48.22299226451468, 48.808024568002054, 49.3971762874833, 49.9904556690408, 50.587870934119984, 51.189430279724725, 51.79514187861014, 52.40501387947288, 53.0190544071392, 53.637271562750364, 54.259673423945976, 54.88626804504493, 55.517063457223934, 56.15206766869424, 56.79128866487574, 57.43473440856916, 58.08241284012621, 58.734331877617365, 59.39049941699807, 60.05092333227251, 60.715611475655585, 61.38457167773311, 62.057811747619894, 62.7353394731159, 63.417162620860914, 64.10328893648692, 64.79372614476921, 65.48848194977529, 66.18756403501224, 66.89098006357258, 67.59873767827808, 68.31084450182222, 69.02730813691093, 69.74813616640164, 70.47333615344107, 71.20291564160104, 71.93688215501312, 72.67524319850172, 73.41800625771542, 74.16517879925733, 74.9167682708136, 75.67278210128072, 76.43322770089146, 77.1981124613393, 77.96744375590167, 78.74122893956174, 79.51947534912904, 80.30219030335869, 81.08938110306934, 81.88105503125999, 82.67721935322541, 83.4778813166706, 84.28304815182372, 85.09272707154808, 85.90692527145302, 86.72564993000343, 87.54890820862819, 88.3767072518277, 89.2090541872801, 90.04595612594655, 90.88742016217518, 91.73345337380438, 92.58406282226491, 93.43925555268066, 94.29903859396902, 95.16341895893969, 96.03240364439274, 96.9059996312159, 97.78421388448044, 98.6670533535366, 99.55452497210776]);\nexport var ViewingConditions = /*#__PURE__*/function () {\n  /**\n   * Parameters are intermediate values of the CAM16 conversion process. Their\n   * names are shorthand for technical color science terminology, this class\n   * would not benefit from documenting them individually. A brief overview\n   * is available in the CAM16 specification, and a complete overview requires\n   * a color science textbook, such as Fairchild's Color Appearance Models.\n   */\n  function ViewingConditions(n, aw, nbb, ncb, c, nc, rgbD, fl, fLRoot, z) {\n    _classCallCheck(this, ViewingConditions);\n    this.n = n;\n    this.aw = aw;\n    this.nbb = nbb;\n    this.ncb = ncb;\n    this.c = c;\n    this.nc = nc;\n    this.rgbD = rgbD;\n    this.fl = fl;\n    this.fLRoot = fLRoot;\n    this.z = z;\n  }\n  _createClass(ViewingConditions, null, [{\n    key: \"make\",\n    value:\n    /**\n     * Create ViewingConditions from a simple, physically relevant, set of\n     * parameters.\n     *\n     * @param whitePoint White point, measured in the XYZ color space.\n     *     default = D65, or sunny day afternoon\n     * @param adaptingLuminance The luminance of the adapting field. Informally,\n     *     how bright it is in the room where the color is viewed. Can be\n     *     calculated from lux by multiplying lux by 0.0586. default = 11.72,\n     *     or 200 lux.\n     * @param backgroundLstar The lightness of the area surrounding the color.\n     *     measured by L* in L*a*b*. default = 50.0\n     * @param surround A general description of the lighting surrounding the\n     *     color. 0 is pitch dark, like watching a movie in a theater. 1.0 is a\n     *     dimly light room, like watching TV at home at night. 2.0 means there\n     *     is no difference between the lighting on the color and around it.\n     *     default = 2.0\n     * @param discountingIlluminant Whether the eye accounts for the tint of the\n     *     ambient lighting, such as knowing an apple is still red in green light.\n     *     default = false, the eye does not perform this process on\n     *       self-luminous objects like displays.\n     */\n    function make() {\n      var whitePoint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : utils.whitePointD65();\n      var adaptingLuminance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200.0 / Math.PI * utils.yFromLstar(50.0) / 100.0;\n      var backgroundLstar = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 50.0;\n      var surround = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2.0;\n      var discountingIlluminant = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var xyz = whitePoint;\n      var rW = xyz[0] * 0.401288 + xyz[1] * 0.650173 + xyz[2] * -0.051461;\n      var gW = xyz[0] * -0.250268 + xyz[1] * 1.204414 + xyz[2] * 0.045854;\n      var bW = xyz[0] * -0.002079 + xyz[1] * 0.048952 + xyz[2] * 0.953127;\n      var f = 0.8 + surround / 10.0;\n      var c = f >= 0.9 ? math.lerp(0.59, 0.69, (f - 0.9) * 10.0) : math.lerp(0.525, 0.59, (f - 0.8) * 10.0);\n      var d = discountingIlluminant ? 1.0 : f * (1.0 - 1.0 / 3.6 * Math.exp((-adaptingLuminance - 42.0) / 92.0));\n      d = d > 1.0 ? 1.0 : d < 0.0 ? 0.0 : d;\n      var nc = f;\n      var rgbD = [d * (100.0 / rW) + 1.0 - d, d * (100.0 / gW) + 1.0 - d, d * (100.0 / bW) + 1.0 - d];\n      var k = 1.0 / (5.0 * adaptingLuminance + 1.0);\n      var k4 = k * k * k * k;\n      var k4F = 1.0 - k4;\n      var fl = k4 * adaptingLuminance + 0.1 * k4F * k4F * Math.cbrt(5.0 * adaptingLuminance);\n      var n = utils.yFromLstar(backgroundLstar) / whitePoint[1];\n      var z = 1.48 + Math.sqrt(n);\n      var nbb = 0.725 / Math.pow(n, 0.2);\n      var ncb = nbb;\n      var rgbAFactors = [Math.pow(fl * rgbD[0] * rW / 100.0, 0.42), Math.pow(fl * rgbD[1] * gW / 100.0, 0.42), Math.pow(fl * rgbD[2] * bW / 100.0, 0.42)];\n      var rgbA = [400.0 * rgbAFactors[0] / (rgbAFactors[0] + 27.13), 400.0 * rgbAFactors[1] / (rgbAFactors[1] + 27.13), 400.0 * rgbAFactors[2] / (rgbAFactors[2] + 27.13)];\n      var aw = (2.0 * rgbA[0] + rgbA[1] + 0.05 * rgbA[2]) * nbb;\n      return new ViewingConditions(n, aw, nbb, ncb, c, nc, rgbD, fl, Math.pow(fl, 0.25), z);\n    }\n  }]);\n  return ViewingConditions;\n}();\n_class2 = ViewingConditions;\n/**\n * sRGB-like viewing conditions.\n */\n_defineProperty(ViewingConditions, \"DEFAULT\", _class2.make());","map":{"version":3,"names":["_defineProperty","_classCallCheck","_createClass","_class2","utils","math","Hct","argb","cam","Cam16","fromInt","internalHue","hue","internalChroma","chroma","internalTone","lstarFromArgb","key","value","toInt","get","set","newHue","setInternalState","HctSolver","solveToInt","newChroma","newTone","inViewingConditions","vc","viewedInVc","xyzInViewingConditions","recastInVc","fromXyzInViewingConditions","ViewingConditions","make","recastHct","from","lstarFromY","tone","j","q","m","s","jstar","astar","bstar","distance","other","dJ","dA","dB","dEPrime","Math","sqrt","dE","pow","viewed","DEFAULT","viewingConditions","alpha","t","n","hRad","PI","eHue","cos","ac","aw","c","z","p1","nc","ncb","p2","nbb","hSin","sin","hCos","gamma","a","b","rA","gA","bA","rCBase","max","abs","rC","signum","fl","gCBase","gC","bCBase","bC","rF","rgbD","gF","bF","x","y","argbFromXyz","fromIntInViewingConditions","red","green","blue","redL","linearized","greenL","blueL","rD","gD","bD","rAF","gAF","bAF","u","atan2","atanDegrees","hueRadians","fLRoot","huePrime","mstar","log","fromJch","h","fromJchInViewingConditions","fromUcs","fromUcsInViewingConditions","M","exp","J","Q","C","sanitizeRadians","angle","trueDelinearized","rgbComponent","normalized","delinearized","chromaticAdaptation","component","af","hueOf","linrgb","scaledDiscount","matrixMultiply","SCALED_DISCOUNT_FROM_LINRGB","areInCyclicOrder","deltaAB","deltaAC","intercept","source","mid","target","lerpPoint","setCoordinate","coordinate","axis","isBounded","nthVertex","kR","Y_FROM_LINRGB","kG","kB","coordA","coordB","g","r","_b","_r","_g","_r2","_g2","_b2","bisectToSegment","targetHue","left","right","leftHue","rightHue","initialized","uncut","_n","midHue","midpoint","criticalPlaneBelow","floor","criticalPlaneAbove","ceil","bisectToLimit","segment","lPlane","rPlane","i","mPlane","midPlaneCoordinate","CRITICAL_PLANES","inverseChromaticAdaptation","adapted","adaptedAbs","base","findResultByJ","tInnerCoeff","iterationRound","jNormalized","rCScaled","gCScaled","bCScaled","LINRGB_FROM_SCALED_DISCOUNT","fnj","argbFromLinrgb","hueDegrees","lstar","argbFromLstar","sanitizeDegreesDouble","yFromLstar","exactAnswer","solveToCam","whitePoint","arguments","length","undefined","whitePointD65","adaptingLuminance","backgroundLstar","surround","discountingIlluminant","xyz","rW","gW","bW","f","lerp","d","k","k4","k4F","cbrt","rgbAFactors","rgbA"],"sources":["/home/enterpi/Documents/iidm/pixel-kit/node_modules/@atlaskit/modal-dialog/node_modules/@atlaskit/tokens/dist/esm/utils/hct-color-utils/hct.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar _class2;\n/**\n * Below lines are copied from @material/material-color-utilities.\n * Do not modify it.\n */\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as utils from './color-utils';\nimport * as math from './math-utils';\n\n/**\n * A color system built using CAM16 hue and chroma, and L* from\n * L*a*b*.\n *\n * Using L* creates a link between the color system, contrast, and thus\n * accessibility. Contrast ratio depends on relative luminance, or Y in the XYZ\n * color space. L*, or perceptual luminance can be calculated from Y.\n *\n * Unlike Y, L* is linear to human perception, allowing trivial creation of\n * accurate color tones.\n *\n * Unlike contrast ratio, measuring contrast in L* is linear, and simple to\n * calculate. A difference of 40 in HCT tone guarantees a contrast ratio >= 3.0,\n * and a difference of 50 guarantees a contrast ratio >= 4.5.\n */\n\n/**\n * HCT, hue, chroma, and tone. A color system that provides a perceptually\n * accurate color measurement system that can also accurately render what colors\n * will appear as in different lighting environments.\n */\nexport var Hct = /*#__PURE__*/function () {\n  function Hct(argb) {\n    _classCallCheck(this, Hct);\n    this.argb = argb;\n    var cam = Cam16.fromInt(argb);\n    this.internalHue = cam.hue;\n    this.internalChroma = cam.chroma;\n    this.internalTone = utils.lstarFromArgb(argb);\n    this.argb = argb;\n  }\n  _createClass(Hct, [{\n    key: \"toInt\",\n    value: function toInt() {\n      return this.argb;\n    }\n\n    /**\n     * A number, in degrees, representing ex. red, orange, yellow, etc.\n     * Ranges from 0 <= hue < 360.\n     */\n  }, {\n    key: \"hue\",\n    get: function get() {\n      return this.internalHue;\n    }\n\n    /**\n     * @param newHue 0 <= newHue < 360; invalid values are corrected.\n     * Chroma may decrease because chroma has a different maximum for any given\n     * hue and tone.\n     */,\n    set: function set(newHue) {\n      this.setInternalState(HctSolver.solveToInt(newHue, this.internalChroma, this.internalTone));\n    }\n  }, {\n    key: \"chroma\",\n    get: function get() {\n      return this.internalChroma;\n    }\n\n    /**\n     * @param newChroma 0 <= newChroma < ?\n     * Chroma may decrease because chroma has a different maximum for any given\n     * hue and tone.\n     */,\n    set: function set(newChroma) {\n      this.setInternalState(HctSolver.solveToInt(this.internalHue, newChroma, this.internalTone));\n    }\n\n    /**\n     * Lightness. Ranges from 0 to 100.\n     */\n  }, {\n    key: \"tone\",\n    get: function get() {\n      return this.internalTone;\n    }\n\n    /**\n     * @param newTone 0 <= newTone <= 100; invalid valids are corrected.\n     * Chroma may decrease because chroma has a different maximum for any given\n     * hue and tone.\n     */,\n    set: function set(newTone) {\n      this.setInternalState(HctSolver.solveToInt(this.internalHue, this.internalChroma, newTone));\n    }\n  }, {\n    key: \"setInternalState\",\n    value: function setInternalState(argb) {\n      var cam = Cam16.fromInt(argb);\n      this.internalHue = cam.hue;\n      this.internalChroma = cam.chroma;\n      this.internalTone = utils.lstarFromArgb(argb);\n      this.argb = argb;\n    }\n\n    /**\n     * Translates a color into different [ViewingConditions].\n     *\n     * Colors change appearance. They look different with lights on versus off,\n     * the same color, as in hex code, on white looks different when on black.\n     * This is called color relativity, most famously explicated by Josef Albers\n     * in Interaction of Color.\n     *\n     * In color science, color appearance models can account for this and\n     * calculate the appearance of a color in different settings. HCT is based on\n     * CAM16, a color appearance model, and uses it to make these calculations.\n     *\n     * See [ViewingConditions.make] for parameters affecting color appearance.\n     */\n  }, {\n    key: \"inViewingConditions\",\n    value: function inViewingConditions(vc) {\n      // 1. Use CAM16 to find XYZ coordinates of color in specified VC.\n      var cam = Cam16.fromInt(this.toInt());\n      var viewedInVc = cam.xyzInViewingConditions(vc);\n\n      // 2. Create CAM16 of those XYZ coordinates in default VC.\n      var recastInVc = Cam16.fromXyzInViewingConditions(viewedInVc[0], viewedInVc[1], viewedInVc[2], ViewingConditions.make());\n\n      // 3. Create HCT from:\n      // - CAM16 using default VC with XYZ coordinates in specified VC.\n      // - L* converted from Y in XYZ coordinates in specified VC.\n      var recastHct = Hct.from(recastInVc.hue, recastInVc.chroma, utils.lstarFromY(viewedInVc[1]));\n      return recastHct;\n    }\n  }], [{\n    key: \"from\",\n    value:\n    /**\n     * @param hue 0 <= hue < 360; invalid values are corrected.\n     * @param chroma 0 <= chroma < ?; Informally, colorfulness. The color\n     *     returned may be lower than the requested chroma. Chroma has a different\n     *     maximum for any given hue and tone.\n     * @param tone 0 <= tone <= 100; invalid values are corrected.\n     * @return HCT representation of a color in default viewing conditions.\n     */\n\n    function from(hue, chroma, tone) {\n      return new Hct(HctSolver.solveToInt(hue, chroma, tone));\n    }\n\n    /**\n     * @param argb ARGB representation of a color.\n     * @return HCT representation of a color in default viewing conditions\n     */\n  }, {\n    key: \"fromInt\",\n    value: function fromInt(argb) {\n      return new Hct(argb);\n    }\n  }]);\n  return Hct;\n}();\n\n/**\n * CAM16, a color appearance model. Colors are not just defined by their hex\n * code, but rather, a hex code and viewing conditions.\n *\n * CAM16 instances also have coordinates in the CAM16-UCS space, called J*, a*,\n * b*, or jstar, astar, bstar in code. CAM16-UCS is included in the CAM16\n * specification, and should be used when measuring distances between colors.\n *\n * In traditional color spaces, a color can be identified solely by the\n * observer's measurement of the color. Color appearance models such as CAM16\n * also use information about the environment where the color was\n * observed, known as the viewing conditions.\n *\n * For example, white under the traditional assumption of a midday sun white\n * point is accurately measured as a slightly chromatic blue by CAM16. (roughly,\n * hue 203, chroma 3, lightness 100)\n */\nvar Cam16 = /*#__PURE__*/function () {\n  /**\n   * All of the CAM16 dimensions can be calculated from 3 of the dimensions, in\n   * the following combinations:\n   *      -  {j or q} and {c, m, or s} and hue\n   *      - jstar, astar, bstar\n   * Prefer using a static method that constructs from 3 of those dimensions.\n   * This constructor is intended for those methods to use to return all\n   * possible dimensions.\n   *\n   * @param hue\n   * @param chroma informally, colorfulness / color intensity. like saturation\n   *     in HSL, except perceptually accurate.\n   * @param j lightness\n   * @param q brightness; ratio of lightness to white point's lightness\n   * @param m colorfulness\n   * @param s saturation; ratio of chroma to white point's chroma\n   * @param jstar CAM16-UCS J coordinate\n   * @param astar CAM16-UCS a coordinate\n   * @param bstar CAM16-UCS b coordinate\n   */\n  function Cam16(hue, chroma, j, q, m, s, jstar, astar, bstar) {\n    _classCallCheck(this, Cam16);\n    this.hue = hue;\n    this.chroma = chroma;\n    this.j = j;\n    this.q = q;\n    this.m = m;\n    this.s = s;\n    this.jstar = jstar;\n    this.astar = astar;\n    this.bstar = bstar;\n  }\n\n  /**\n   * CAM16 instances also have coordinates in the CAM16-UCS space, called J*,\n   * a*, b*, or jstar, astar, bstar in code. CAM16-UCS is included in the CAM16\n   * specification, and is used to measure distances between colors.\n   */\n  _createClass(Cam16, [{\n    key: \"distance\",\n    value: function distance(other) {\n      var dJ = this.jstar - other.jstar;\n      var dA = this.astar - other.astar;\n      var dB = this.bstar - other.bstar;\n      var dEPrime = Math.sqrt(dJ * dJ + dA * dA + dB * dB);\n      var dE = 1.41 * Math.pow(dEPrime, 0.63);\n      return dE;\n    }\n\n    /**\n     * @param argb ARGB representation of a color.\n     * @return CAM16 color, assuming the color was viewed in default viewing\n     *     conditions.\n     */\n  }, {\n    key: \"toInt\",\n    value:\n    /**\n     *  @return ARGB representation of color, assuming the color was viewed in\n     *     default viewing conditions, which are near-identical to the default\n     *     viewing conditions for sRGB.\n     */\n    function toInt() {\n      return this.viewed(ViewingConditions.DEFAULT);\n    }\n\n    /**\n     * @param viewingConditions Information about the environment where the color\n     *     will be viewed.\n     * @return ARGB representation of color\n     */\n  }, {\n    key: \"viewed\",\n    value: function viewed(viewingConditions) {\n      var alpha = this.chroma === 0.0 || this.j === 0.0 ? 0.0 : this.chroma / Math.sqrt(this.j / 100.0);\n      var t = Math.pow(alpha / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73), 1.0 / 0.9);\n      var hRad = this.hue * Math.PI / 180.0;\n      var eHue = 0.25 * (Math.cos(hRad + 2.0) + 3.8);\n      var ac = viewingConditions.aw * Math.pow(this.j / 100.0, 1.0 / viewingConditions.c / viewingConditions.z);\n      var p1 = eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;\n      var p2 = ac / viewingConditions.nbb;\n      var hSin = Math.sin(hRad);\n      var hCos = Math.cos(hRad);\n      var gamma = 23.0 * (p2 + 0.305) * t / (23.0 * p1 + 11.0 * t * hCos + 108.0 * t * hSin);\n      var a = gamma * hCos;\n      var b = gamma * hSin;\n      var rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;\n      var gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;\n      var bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;\n      var rCBase = Math.max(0, 27.13 * Math.abs(rA) / (400.0 - Math.abs(rA)));\n      var rC = math.signum(rA) * (100.0 / viewingConditions.fl) * Math.pow(rCBase, 1.0 / 0.42);\n      var gCBase = Math.max(0, 27.13 * Math.abs(gA) / (400.0 - Math.abs(gA)));\n      var gC = math.signum(gA) * (100.0 / viewingConditions.fl) * Math.pow(gCBase, 1.0 / 0.42);\n      var bCBase = Math.max(0, 27.13 * Math.abs(bA) / (400.0 - Math.abs(bA)));\n      var bC = math.signum(bA) * (100.0 / viewingConditions.fl) * Math.pow(bCBase, 1.0 / 0.42);\n      var rF = rC / viewingConditions.rgbD[0];\n      var gF = gC / viewingConditions.rgbD[1];\n      var bF = bC / viewingConditions.rgbD[2];\n      var x = 1.86206786 * rF - 1.01125463 * gF + 0.14918677 * bF;\n      var y = 0.38752654 * rF + 0.62144744 * gF - 0.00897398 * bF;\n      var z = -0.0158415 * rF - 0.03412294 * gF + 1.04996444 * bF;\n      var argb = utils.argbFromXyz(x, y, z);\n      return argb;\n    }\n\n    /// Given color expressed in XYZ and viewed in [viewingConditions], convert to\n    /// CAM16.\n  }, {\n    key: \"xyzInViewingConditions\",\n    value:\n    /// XYZ representation of CAM16 seen in [viewingConditions].\n    function xyzInViewingConditions(viewingConditions) {\n      var alpha = this.chroma === 0.0 || this.j === 0.0 ? 0.0 : this.chroma / Math.sqrt(this.j / 100.0);\n      var t = Math.pow(alpha / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73), 1.0 / 0.9);\n      var hRad = this.hue * Math.PI / 180.0;\n      var eHue = 0.25 * (Math.cos(hRad + 2.0) + 3.8);\n      var ac = viewingConditions.aw * Math.pow(this.j / 100.0, 1.0 / viewingConditions.c / viewingConditions.z);\n      var p1 = eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;\n      var p2 = ac / viewingConditions.nbb;\n      var hSin = Math.sin(hRad);\n      var hCos = Math.cos(hRad);\n      var gamma = 23.0 * (p2 + 0.305) * t / (23.0 * p1 + 11 * t * hCos + 108.0 * t * hSin);\n      var a = gamma * hCos;\n      var b = gamma * hSin;\n      var rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;\n      var gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;\n      var bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;\n      var rCBase = Math.max(0, 27.13 * Math.abs(rA) / (400.0 - Math.abs(rA)));\n      var rC = math.signum(rA) * (100.0 / viewingConditions.fl) * Math.pow(rCBase, 1.0 / 0.42);\n      var gCBase = Math.max(0, 27.13 * Math.abs(gA) / (400.0 - Math.abs(gA)));\n      var gC = math.signum(gA) * (100.0 / viewingConditions.fl) * Math.pow(gCBase, 1.0 / 0.42);\n      var bCBase = Math.max(0, 27.13 * Math.abs(bA) / (400.0 - Math.abs(bA)));\n      var bC = math.signum(bA) * (100.0 / viewingConditions.fl) * Math.pow(bCBase, 1.0 / 0.42);\n      var rF = rC / viewingConditions.rgbD[0];\n      var gF = gC / viewingConditions.rgbD[1];\n      var bF = bC / viewingConditions.rgbD[2];\n      var x = 1.86206786 * rF - 1.01125463 * gF + 0.14918677 * bF;\n      var y = 0.38752654 * rF + 0.62144744 * gF - 0.00897398 * bF;\n      var z = -0.0158415 * rF - 0.03412294 * gF + 1.04996444 * bF;\n      return [x, y, z];\n    }\n  }], [{\n    key: \"fromInt\",\n    value: function fromInt(argb) {\n      return Cam16.fromIntInViewingConditions(argb, ViewingConditions.DEFAULT);\n    }\n\n    /**\n     * @param argb ARGB representation of a color.\n     * @param viewingConditions Information about the environment where the color\n     *     was observed.\n     * @return CAM16 color.\n     */\n  }, {\n    key: \"fromIntInViewingConditions\",\n    value: function fromIntInViewingConditions(argb, viewingConditions) {\n      var red = (argb & 0x00ff0000) >> 16;\n      var green = (argb & 0x0000ff00) >> 8;\n      var blue = argb & 0x000000ff;\n      var redL = utils.linearized(red);\n      var greenL = utils.linearized(green);\n      var blueL = utils.linearized(blue);\n      var x = 0.41233895 * redL + 0.35762064 * greenL + 0.18051042 * blueL;\n      var y = 0.2126 * redL + 0.7152 * greenL + 0.0722 * blueL;\n      var z = 0.01932141 * redL + 0.11916382 * greenL + 0.95034478 * blueL;\n      var rC = 0.401288 * x + 0.650173 * y - 0.051461 * z;\n      var gC = -0.250268 * x + 1.204414 * y + 0.045854 * z;\n      var bC = -0.002079 * x + 0.048952 * y + 0.953127 * z;\n      var rD = viewingConditions.rgbD[0] * rC;\n      var gD = viewingConditions.rgbD[1] * gC;\n      var bD = viewingConditions.rgbD[2] * bC;\n      var rAF = Math.pow(viewingConditions.fl * Math.abs(rD) / 100.0, 0.42);\n      var gAF = Math.pow(viewingConditions.fl * Math.abs(gD) / 100.0, 0.42);\n      var bAF = Math.pow(viewingConditions.fl * Math.abs(bD) / 100.0, 0.42);\n      var rA = math.signum(rD) * 400.0 * rAF / (rAF + 27.13);\n      var gA = math.signum(gD) * 400.0 * gAF / (gAF + 27.13);\n      var bA = math.signum(bD) * 400.0 * bAF / (bAF + 27.13);\n      var a = (11.0 * rA + -12.0 * gA + bA) / 11.0;\n      var b = (rA + gA - 2.0 * bA) / 9.0;\n      var u = (20.0 * rA + 20.0 * gA + 21.0 * bA) / 20.0;\n      var p2 = (40.0 * rA + 20.0 * gA + bA) / 20.0;\n      var atan2 = Math.atan2(b, a);\n      var atanDegrees = atan2 * 180.0 / Math.PI;\n      var hue = atanDegrees < 0 ? atanDegrees + 360.0 : atanDegrees >= 360 ? atanDegrees - 360.0 : atanDegrees;\n      var hueRadians = hue * Math.PI / 180.0;\n      var ac = p2 * viewingConditions.nbb;\n      var j = 100.0 * Math.pow(ac / viewingConditions.aw, viewingConditions.c * viewingConditions.z);\n      var q = 4.0 / viewingConditions.c * Math.sqrt(j / 100.0) * (viewingConditions.aw + 4.0) * viewingConditions.fLRoot;\n      var huePrime = hue < 20.14 ? hue + 360 : hue;\n      var eHue = 0.25 * (Math.cos(huePrime * Math.PI / 180.0 + 2.0) + 3.8);\n      var p1 = 50000.0 / 13.0 * eHue * viewingConditions.nc * viewingConditions.ncb;\n      var t = p1 * Math.sqrt(a * a + b * b) / (u + 0.305);\n      var alpha = Math.pow(t, 0.9) * Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);\n      var c = alpha * Math.sqrt(j / 100.0);\n      var m = c * viewingConditions.fLRoot;\n      var s = 50.0 * Math.sqrt(alpha * viewingConditions.c / (viewingConditions.aw + 4.0));\n      var jstar = (1.0 + 100.0 * 0.007) * j / (1.0 + 0.007 * j);\n      var mstar = 1.0 / 0.0228 * Math.log(1.0 + 0.0228 * m);\n      var astar = mstar * Math.cos(hueRadians);\n      var bstar = mstar * Math.sin(hueRadians);\n      return new Cam16(hue, c, j, q, m, s, jstar, astar, bstar);\n    }\n\n    /**\n     * @param j CAM16 lightness\n     * @param c CAM16 chroma\n     * @param h CAM16 hue\n     */\n  }, {\n    key: \"fromJch\",\n    value: function fromJch(j, c, h) {\n      return Cam16.fromJchInViewingConditions(j, c, h, ViewingConditions.DEFAULT);\n    }\n\n    /**\n     * @param j CAM16 lightness\n     * @param c CAM16 chroma\n     * @param h CAM16 hue\n     * @param viewingConditions Information about the environment where the color\n     *     was observed.\n     */\n  }, {\n    key: \"fromJchInViewingConditions\",\n    value: function fromJchInViewingConditions(j, c, h, viewingConditions) {\n      var q = 4.0 / viewingConditions.c * Math.sqrt(j / 100.0) * (viewingConditions.aw + 4.0) * viewingConditions.fLRoot;\n      var m = c * viewingConditions.fLRoot;\n      var alpha = c / Math.sqrt(j / 100.0);\n      var s = 50.0 * Math.sqrt(alpha * viewingConditions.c / (viewingConditions.aw + 4.0));\n      var hueRadians = h * Math.PI / 180.0;\n      var jstar = (1.0 + 100.0 * 0.007) * j / (1.0 + 0.007 * j);\n      var mstar = 1.0 / 0.0228 * Math.log(1.0 + 0.0228 * m);\n      var astar = mstar * Math.cos(hueRadians);\n      var bstar = mstar * Math.sin(hueRadians);\n      return new Cam16(h, c, j, q, m, s, jstar, astar, bstar);\n    }\n\n    /**\n     * @param jstar CAM16-UCS lightness.\n     * @param astar CAM16-UCS a dimension. Like a* in L*a*b*, it is a Cartesian\n     *     coordinate on the Y axis.\n     * @param bstar CAM16-UCS b dimension. Like a* in L*a*b*, it is a Cartesian\n     *     coordinate on the X axis.\n     */\n  }, {\n    key: \"fromUcs\",\n    value: function fromUcs(jstar, astar, bstar) {\n      return Cam16.fromUcsInViewingConditions(jstar, astar, bstar, ViewingConditions.DEFAULT);\n    }\n\n    /**\n     * @param jstar CAM16-UCS lightness.\n     * @param astar CAM16-UCS a dimension. Like a* in L*a*b*, it is a Cartesian\n     *     coordinate on the Y axis.\n     * @param bstar CAM16-UCS b dimension. Like a* in L*a*b*, it is a Cartesian\n     *     coordinate on the X axis.\n     * @param viewingConditions Information about the environment where the color\n     *     was observed.\n     */\n  }, {\n    key: \"fromUcsInViewingConditions\",\n    value: function fromUcsInViewingConditions(jstar, astar, bstar, viewingConditions) {\n      var a = astar;\n      var b = bstar;\n      var m = Math.sqrt(a * a + b * b);\n      var M = (Math.exp(m * 0.0228) - 1.0) / 0.0228;\n      var c = M / viewingConditions.fLRoot;\n      var h = Math.atan2(b, a) * (180.0 / Math.PI);\n      if (h < 0.0) {\n        h += 360.0;\n      }\n      var j = jstar / (1 - (jstar - 100) * 0.007);\n      return Cam16.fromJchInViewingConditions(j, c, h, viewingConditions);\n    }\n  }, {\n    key: \"fromXyzInViewingConditions\",\n    value: function fromXyzInViewingConditions(x, y, z, viewingConditions) {\n      // Transform XYZ to 'cone'/'rgb' responses\n\n      var rC = 0.401288 * x + 0.650173 * y - 0.051461 * z;\n      var gC = -0.250268 * x + 1.204414 * y + 0.045854 * z;\n      var bC = -0.002079 * x + 0.048952 * y + 0.953127 * z;\n\n      // Discount illuminant\n      var rD = viewingConditions.rgbD[0] * rC;\n      var gD = viewingConditions.rgbD[1] * gC;\n      var bD = viewingConditions.rgbD[2] * bC;\n\n      // chromatic adaptation\n      var rAF = Math.pow(viewingConditions.fl * Math.abs(rD) / 100.0, 0.42);\n      var gAF = Math.pow(viewingConditions.fl * Math.abs(gD) / 100.0, 0.42);\n      var bAF = Math.pow(viewingConditions.fl * Math.abs(bD) / 100.0, 0.42);\n      var rA = math.signum(rD) * 400.0 * rAF / (rAF + 27.13);\n      var gA = math.signum(gD) * 400.0 * gAF / (gAF + 27.13);\n      var bA = math.signum(bD) * 400.0 * bAF / (bAF + 27.13);\n\n      // redness-greenness\n      var a = (11.0 * rA + -12.0 * gA + bA) / 11.0;\n      // yellowness-blueness\n      var b = (rA + gA - 2.0 * bA) / 9.0;\n\n      // auxiliary components\n      var u = (20.0 * rA + 20.0 * gA + 21.0 * bA) / 20.0;\n      var p2 = (40.0 * rA + 20.0 * gA + bA) / 20.0;\n\n      // hue\n      var atan2 = Math.atan2(b, a);\n      var atanDegrees = atan2 * 180.0 / Math.PI;\n      var hue = atanDegrees < 0 ? atanDegrees + 360.0 : atanDegrees >= 360 ? atanDegrees - 360 : atanDegrees;\n      var hueRadians = hue * Math.PI / 180.0;\n\n      // achromatic response to color\n      var ac = p2 * viewingConditions.nbb;\n\n      // CAM16 lightness and brightness\n      var J = 100.0 * Math.pow(ac / viewingConditions.aw, viewingConditions.c * viewingConditions.z);\n      var Q = 4.0 / viewingConditions.c * Math.sqrt(J / 100.0) * (viewingConditions.aw + 4.0) * viewingConditions.fLRoot;\n      var huePrime = hue < 20.14 ? hue + 360 : hue;\n      var eHue = 1.0 / 4.0 * (Math.cos(huePrime * Math.PI / 180.0 + 2.0) + 3.8);\n      var p1 = 50000.0 / 13.0 * eHue * viewingConditions.nc * viewingConditions.ncb;\n      var t = p1 * Math.sqrt(a * a + b * b) / (u + 0.305);\n      var alpha = Math.pow(t, 0.9) * Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);\n      // CAM16 chroma, colorfulness, chroma\n      var C = alpha * Math.sqrt(J / 100.0);\n      var M = C * viewingConditions.fLRoot;\n      var s = 50.0 * Math.sqrt(alpha * viewingConditions.c / (viewingConditions.aw + 4.0));\n\n      // CAM16-UCS components\n      var jstar = (1.0 + 100.0 * 0.007) * J / (1.0 + 0.007 * J);\n      var mstar = Math.log(1.0 + 0.0228 * M) / 0.0228;\n      var astar = mstar * Math.cos(hueRadians);\n      var bstar = mstar * Math.sin(hueRadians);\n      return new Cam16(hue, C, J, Q, M, s, jstar, astar, bstar);\n    }\n  }]);\n  return Cam16;\n}(); // This file is automatically generated. Do not modify it.\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable:class-as-namespace\n/**\n * A class that solves the HCT equation.\n */\nvar HctSolver = /*#__PURE__*/function () {\n  function HctSolver() {\n    _classCallCheck(this, HctSolver);\n  }\n  _createClass(HctSolver, null, [{\n    key: \"sanitizeRadians\",\n    value:\n    /**\n     * Sanitizes a small enough angle in radians.\n     *\n     * @param angle An angle in radians; must not deviate too much\n     * from 0.\n     * @return A coterminal angle between 0 and 2pi.\n     */\n    function sanitizeRadians(angle) {\n      return (angle + Math.PI * 8) % (Math.PI * 2);\n    }\n\n    /**\n     * Delinearizes an RGB component, returning a floating-point\n     * number.\n     *\n     * @param rgbComponent 0.0 <= rgb_component <= 100.0, represents\n     * linear R/G/B channel\n     * @return 0.0 <= output <= 255.0, color channel converted to\n     * regular RGB space\n     */\n  }, {\n    key: \"trueDelinearized\",\n    value: function trueDelinearized(rgbComponent) {\n      var normalized = rgbComponent / 100.0;\n      var delinearized = 0.0;\n      if (normalized <= 0.0031308) {\n        delinearized = normalized * 12.92;\n      } else {\n        delinearized = 1.055 * Math.pow(normalized, 1.0 / 2.4) - 0.055;\n      }\n      return delinearized * 255.0;\n    }\n  }, {\n    key: \"chromaticAdaptation\",\n    value: function chromaticAdaptation(component) {\n      var af = Math.pow(Math.abs(component), 0.42);\n      return math.signum(component) * 400.0 * af / (af + 27.13);\n    }\n\n    /**\n     * Returns the hue of a linear RGB color in CAM16.\n     *\n     * @param linrgb The linear RGB coordinates of a color.\n     * @return The hue of the color in CAM16, in radians.\n     */\n  }, {\n    key: \"hueOf\",\n    value: function hueOf(linrgb) {\n      var scaledDiscount = math.matrixMultiply(linrgb, HctSolver.SCALED_DISCOUNT_FROM_LINRGB);\n      var rA = HctSolver.chromaticAdaptation(scaledDiscount[0]);\n      var gA = HctSolver.chromaticAdaptation(scaledDiscount[1]);\n      var bA = HctSolver.chromaticAdaptation(scaledDiscount[2]);\n      // redness-greenness\n      var a = (11.0 * rA + -12.0 * gA + bA) / 11.0;\n      // yellowness-blueness\n      var b = (rA + gA - 2.0 * bA) / 9.0;\n      return Math.atan2(b, a);\n    }\n  }, {\n    key: \"areInCyclicOrder\",\n    value: function areInCyclicOrder(a, b, c) {\n      var deltaAB = HctSolver.sanitizeRadians(b - a);\n      var deltaAC = HctSolver.sanitizeRadians(c - a);\n      return deltaAB < deltaAC;\n    }\n\n    /**\n     * Solves the lerp equation.\n     *\n     * @param source The starting number.\n     * @param mid The number in the middle.\n     * @param target The ending number.\n     * @return A number t such that lerp(source, target, t) = mid.\n     */\n  }, {\n    key: \"intercept\",\n    value: function intercept(source, mid, target) {\n      return (mid - source) / (target - source);\n    }\n  }, {\n    key: \"lerpPoint\",\n    value: function lerpPoint(source, t, target) {\n      return [source[0] + (target[0] - source[0]) * t, source[1] + (target[1] - source[1]) * t, source[2] + (target[2] - source[2]) * t];\n    }\n\n    /**\n     * Intersects a segment with a plane.\n     *\n     * @param source The coordinates of point A.\n     * @param coordinate The R-, G-, or B-coordinate of the plane.\n     * @param target The coordinates of point B.\n     * @param axis The axis the plane is perpendicular with. (0: R, 1:\n     * G, 2: B)\n     * @return The intersection point of the segment AB with the plane\n     * R=coordinate, G=coordinate, or B=coordinate\n     */\n  }, {\n    key: \"setCoordinate\",\n    value: function setCoordinate(source, coordinate, target, axis) {\n      var t = HctSolver.intercept(source[axis], coordinate, target[axis]);\n      return HctSolver.lerpPoint(source, t, target);\n    }\n  }, {\n    key: \"isBounded\",\n    value: function isBounded(x) {\n      return 0.0 <= x && x <= 100.0;\n    }\n\n    /**\n     * Returns the nth possible vertex of the polygonal intersection.\n     *\n     * @param y The Y value of the plane.\n     * @param n The zero-based index of the point. 0 <= n <= 11.\n     * @return The nth possible vertex of the polygonal intersection\n     * of the y plane and the RGB cube, in linear RGB coordinates, if\n     * it exists. If this possible vertex lies outside of the cube,\n     * [-1.0, -1.0, -1.0] is returned.\n     */\n  }, {\n    key: \"nthVertex\",\n    value: function nthVertex(y, n) {\n      var kR = HctSolver.Y_FROM_LINRGB[0];\n      var kG = HctSolver.Y_FROM_LINRGB[1];\n      var kB = HctSolver.Y_FROM_LINRGB[2];\n      var coordA = n % 4 <= 1 ? 0.0 : 100.0;\n      var coordB = n % 2 === 0 ? 0.0 : 100.0;\n      if (n < 4) {\n        var g = coordA;\n        var b = coordB;\n        var r = (y - g * kG - b * kB) / kR;\n        if (HctSolver.isBounded(r)) {\n          return [r, g, b];\n        } else {\n          return [-1.0, -1.0, -1.0];\n        }\n      } else if (n < 8) {\n        var _b = coordA;\n        var _r = coordB;\n        var _g = (y - _r * kR - _b * kB) / kG;\n        if (HctSolver.isBounded(_g)) {\n          return [_r, _g, _b];\n        } else {\n          return [-1.0, -1.0, -1.0];\n        }\n      } else {\n        var _r2 = coordA;\n        var _g2 = coordB;\n        var _b2 = (y - _r2 * kR - _g2 * kG) / kB;\n        if (HctSolver.isBounded(_b2)) {\n          return [_r2, _g2, _b2];\n        } else {\n          return [-1.0, -1.0, -1.0];\n        }\n      }\n    }\n\n    /**\n     * Finds the segment containing the desired color.\n     *\n     * @param y The Y value of the color.\n     * @param targetHue The hue of the color.\n     * @return A list of two sets of linear RGB coordinates, each\n     * corresponding to an endpoint of the segment containing the\n     * desired color.\n     */\n  }, {\n    key: \"bisectToSegment\",\n    value: function bisectToSegment(y, targetHue) {\n      var left = [-1.0, -1.0, -1.0];\n      var right = left;\n      var leftHue = 0.0;\n      var rightHue = 0.0;\n      var initialized = false;\n      var uncut = true;\n      for (var _n = 0; _n < 12; _n++) {\n        var mid = HctSolver.nthVertex(y, _n);\n        if (mid[0] < 0) {\n          continue;\n        }\n        var midHue = HctSolver.hueOf(mid);\n        if (!initialized) {\n          left = mid;\n          right = mid;\n          leftHue = midHue;\n          rightHue = midHue;\n          initialized = true;\n          continue;\n        }\n        if (uncut || HctSolver.areInCyclicOrder(leftHue, midHue, rightHue)) {\n          uncut = false;\n          if (HctSolver.areInCyclicOrder(leftHue, targetHue, midHue)) {\n            right = mid;\n            rightHue = midHue;\n          } else {\n            left = mid;\n            leftHue = midHue;\n          }\n        }\n      }\n      return [left, right];\n    }\n  }, {\n    key: \"midpoint\",\n    value: function midpoint(a, b) {\n      return [(a[0] + b[0]) / 2, (a[1] + b[1]) / 2, (a[2] + b[2]) / 2];\n    }\n  }, {\n    key: \"criticalPlaneBelow\",\n    value: function criticalPlaneBelow(x) {\n      return Math.floor(x - 0.5);\n    }\n  }, {\n    key: \"criticalPlaneAbove\",\n    value: function criticalPlaneAbove(x) {\n      return Math.ceil(x - 0.5);\n    }\n\n    /**\n     * Finds a color with the given Y and hue on the boundary of the\n     * cube.\n     *\n     * @param y The Y value of the color.\n     * @param targetHue The hue of the color.\n     * @return The desired color, in linear RGB coordinates.\n     */\n  }, {\n    key: \"bisectToLimit\",\n    value: function bisectToLimit(y, targetHue) {\n      var segment = HctSolver.bisectToSegment(y, targetHue);\n      var left = segment[0];\n      var leftHue = HctSolver.hueOf(left);\n      var right = segment[1];\n      for (var axis = 0; axis < 3; axis++) {\n        if (left[axis] !== right[axis]) {\n          var lPlane = -1;\n          var rPlane = 255;\n          if (left[axis] < right[axis]) {\n            lPlane = HctSolver.criticalPlaneBelow(HctSolver.trueDelinearized(left[axis]));\n            rPlane = HctSolver.criticalPlaneAbove(HctSolver.trueDelinearized(right[axis]));\n          } else {\n            lPlane = HctSolver.criticalPlaneAbove(HctSolver.trueDelinearized(left[axis]));\n            rPlane = HctSolver.criticalPlaneBelow(HctSolver.trueDelinearized(right[axis]));\n          }\n          for (var i = 0; i < 8; i++) {\n            if (Math.abs(rPlane - lPlane) <= 1) {\n              break;\n            } else {\n              var mPlane = Math.floor((lPlane + rPlane) / 2.0);\n              var midPlaneCoordinate = HctSolver.CRITICAL_PLANES[mPlane];\n              var mid = HctSolver.setCoordinate(left, midPlaneCoordinate, right, axis);\n              var midHue = HctSolver.hueOf(mid);\n              if (HctSolver.areInCyclicOrder(leftHue, targetHue, midHue)) {\n                right = mid;\n                rPlane = mPlane;\n              } else {\n                left = mid;\n                leftHue = midHue;\n                lPlane = mPlane;\n              }\n            }\n          }\n        }\n      }\n      return HctSolver.midpoint(left, right);\n    }\n  }, {\n    key: \"inverseChromaticAdaptation\",\n    value: function inverseChromaticAdaptation(adapted) {\n      var adaptedAbs = Math.abs(adapted);\n      var base = Math.max(0, 27.13 * adaptedAbs / (400.0 - adaptedAbs));\n      return math.signum(adapted) * Math.pow(base, 1.0 / 0.42);\n    }\n\n    /**\n     * Finds a color with the given hue, chroma, and Y.\n     *\n     * @param hueRadians The desired hue in radians.\n     * @param chroma The desired chroma.\n     * @param y The desired Y.\n     * @return The desired color as a hexadecimal integer, if found; 0\n     * otherwise.\n     */\n  }, {\n    key: \"findResultByJ\",\n    value: function findResultByJ(hueRadians, chroma, y) {\n      // Initial estimate of j.\n      var j = Math.sqrt(y) * 11.0;\n      // ===========================================================\n      // Operations inlined from Cam16 to avoid repeated calculation\n      // ===========================================================\n      var viewingConditions = ViewingConditions.DEFAULT;\n      var tInnerCoeff = 1 / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);\n      var eHue = 0.25 * (Math.cos(hueRadians + 2.0) + 3.8);\n      var p1 = eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;\n      var hSin = Math.sin(hueRadians);\n      var hCos = Math.cos(hueRadians);\n      for (var iterationRound = 0; iterationRound < 5; iterationRound++) {\n        // ===========================================================\n        // Operations inlined from Cam16 to avoid repeated calculation\n        // ===========================================================\n        var jNormalized = j / 100.0;\n        var alpha = chroma === 0.0 || j === 0.0 ? 0.0 : chroma / Math.sqrt(jNormalized);\n        var t = Math.pow(alpha * tInnerCoeff, 1.0 / 0.9);\n        var ac = viewingConditions.aw * Math.pow(jNormalized, 1.0 / viewingConditions.c / viewingConditions.z);\n        var p2 = ac / viewingConditions.nbb;\n        var gamma = 23.0 * (p2 + 0.305) * t / (23.0 * p1 + 11 * t * hCos + 108.0 * t * hSin);\n        var a = gamma * hCos;\n        var b = gamma * hSin;\n        var rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;\n        var gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;\n        var bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;\n        var rCScaled = HctSolver.inverseChromaticAdaptation(rA);\n        var gCScaled = HctSolver.inverseChromaticAdaptation(gA);\n        var bCScaled = HctSolver.inverseChromaticAdaptation(bA);\n        var linrgb = math.matrixMultiply([rCScaled, gCScaled, bCScaled], HctSolver.LINRGB_FROM_SCALED_DISCOUNT);\n        // ===========================================================\n        // Operations inlined from Cam16 to avoid repeated calculation\n        // ===========================================================\n        if (linrgb[0] < 0 || linrgb[1] < 0 || linrgb[2] < 0) {\n          return 0;\n        }\n        var kR = HctSolver.Y_FROM_LINRGB[0];\n        var kG = HctSolver.Y_FROM_LINRGB[1];\n        var kB = HctSolver.Y_FROM_LINRGB[2];\n        var fnj = kR * linrgb[0] + kG * linrgb[1] + kB * linrgb[2];\n        if (fnj <= 0) {\n          return 0;\n        }\n        if (iterationRound === 4 || Math.abs(fnj - y) < 0.002) {\n          if (linrgb[0] > 100.01 || linrgb[1] > 100.01 || linrgb[2] > 100.01) {\n            return 0;\n          }\n          return utils.argbFromLinrgb(linrgb);\n        }\n        // Iterates with Newton method,\n        // Using 2 * fn(j) / j as the approximation of fn'(j)\n        j = j - (fnj - y) * j / (2 * fnj);\n      }\n      return 0;\n    }\n\n    /**\n     * Finds an sRGB color with the given hue, chroma, and L*, if\n     * possible.\n     *\n     * @param hueDegrees The desired hue, in degrees.\n     * @param chroma The desired chroma.\n     * @param lstar The desired L*.\n     * @return A hexadecimal representing the sRGB color. The color\n     * has sufficiently close hue, chroma, and L* to the desired\n     * values, if possible; otherwise, the hue and L* will be\n     * sufficiently close, and chroma will be maximized.\n     */\n  }, {\n    key: \"solveToInt\",\n    value: function solveToInt(hueDegrees, chroma, lstar) {\n      if (chroma < 0.0001 || lstar < 0.0001 || lstar > 99.9999) {\n        return utils.argbFromLstar(lstar);\n      }\n      hueDegrees = math.sanitizeDegreesDouble(hueDegrees);\n      var hueRadians = hueDegrees / 180 * Math.PI;\n      var y = utils.yFromLstar(lstar);\n      var exactAnswer = HctSolver.findResultByJ(hueRadians, chroma, y);\n      if (exactAnswer !== 0) {\n        return exactAnswer;\n      }\n      var linrgb = HctSolver.bisectToLimit(y, hueRadians);\n      return utils.argbFromLinrgb(linrgb);\n    }\n\n    /**\n     * Finds an sRGB color with the given hue, chroma, and L*, if\n     * possible.\n     *\n     * @param hueDegrees The desired hue, in degrees.\n     * @param chroma The desired chroma.\n     * @param lstar The desired L*.\n     * @return An CAM16 object representing the sRGB color. The color\n     * has sufficiently close hue, chroma, and L* to the desired\n     * values, if possible; otherwise, the hue and L* will be\n     * sufficiently close, and chroma will be maximized.\n     */\n  }, {\n    key: \"solveToCam\",\n    value: function solveToCam(hueDegrees, chroma, lstar) {\n      return Cam16.fromInt(HctSolver.solveToInt(hueDegrees, chroma, lstar));\n    }\n  }]);\n  return HctSolver;\n}();\n_defineProperty(HctSolver, \"SCALED_DISCOUNT_FROM_LINRGB\", [[0.001200833568784504, 0.002389694492170889, 0.0002795742885861124], [0.0005891086651375999, 0.0029785502573438758, 0.0003270666104008398], [0.00010146692491640572, 0.0005364214359186694, 0.0032979401770712076]]);\n_defineProperty(HctSolver, \"LINRGB_FROM_SCALED_DISCOUNT\", [[1373.2198709594231, -1100.4251190754821, -7.278681089101213], [-271.815969077903, 559.6580465940733, -32.46047482791194], [1.9622899599665666, -57.173814538844006, 308.7233197812385]]);\n_defineProperty(HctSolver, \"Y_FROM_LINRGB\", [0.2126, 0.7152, 0.0722]);\n_defineProperty(HctSolver, \"CRITICAL_PLANES\", [0.015176349177441876, 0.045529047532325624, 0.07588174588720938, 0.10623444424209313, 0.13658714259697685, 0.16693984095186062, 0.19729253930674434, 0.2276452376616281, 0.2579979360165119, 0.28835063437139563, 0.3188300904430532, 0.350925934958123, 0.3848314933096426, 0.42057480301049466, 0.458183274052838, 0.4976837250274023, 0.5391024159806381, 0.5824650784040898, 0.6277969426914107, 0.6751227633498623, 0.7244668422128921, 0.775853049866786, 0.829304845476233, 0.8848452951698498, 0.942497089126609, 1.0022825574869039, 1.0642236851973577, 1.1283421258858297, 1.1946592148522128, 1.2631959812511864, 1.3339731595349034, 1.407011200216447, 1.4823302800086415, 1.5599503113873272, 1.6398909516233677, 1.7221716113234105, 1.8068114625156377, 1.8938294463134073, 1.9832442801866852, 2.075074464868551, 2.1693382909216234, 2.2660538449872063, 2.36523901573795, 2.4669114995532007, 2.5710888059345764, 2.6777882626779785, 2.7870270208169257, 2.898822059350997, 3.0131901897720907, 3.1301480604002863, 3.2497121605402226, 3.3718988244681087, 3.4967242352587946, 3.624204428461639, 3.754355295633311, 3.887192587735158, 4.022731918402185, 4.160988767090289, 4.301978482107941, 4.445716283538092, 4.592217266055746, 4.741496401646282, 4.893568542229298, 5.048448422192488, 5.20615066083972, 5.3666897647573375, 5.5300801301023865, 5.696336044816294, 5.865471690767354, 6.037501145825082, 6.212438385869475, 6.390297286737924, 6.571091626112461, 6.7548350853498045, 6.941541251256611, 7.131223617812143, 7.323895587840543, 7.5195704746346665, 7.7182615035334345, 7.919981813454504, 8.124744458384042, 8.332562408825165, 8.543448553206703, 8.757415699253682, 8.974476575321063, 9.194643831691977, 9.417930041841839, 9.644347703669503, 9.873909240696694, 10.106627003236781, 10.342513269534024, 10.58158024687427, 10.8238400726681, 11.069304815507364, 11.317986476196008, 11.569896988756009, 11.825048221409341, 12.083451977536606, 12.345119996613247, 12.610063955123938, 12.878295467455942, 13.149826086772048, 13.42466730586372, 13.702830557985108, 13.984327217668513, 14.269168601521828, 14.55736596900856, 14.848930523210871, 15.143873411576273, 15.44220572664832, 15.743938506781891, 16.04908273684337, 16.35764934889634, 16.66964922287304, 16.985093187232053, 17.30399201960269, 17.62635644741625, 17.95219714852476, 18.281524751807332, 18.614349837764564, 18.95068293910138, 19.290534541298456, 19.633915083172692, 19.98083495742689, 20.331304511189067, 20.685334046541502, 21.042933821039977, 21.404114048223256, 21.76888489811322, 22.137256497705877, 22.50923893145328, 22.884842241736916, 23.264076429332462, 23.6469514538663, 24.033477234264016, 24.42366364919083, 24.817520537484558, 25.21505769858089, 25.61628489293138, 26.021211842414342, 26.429848230738664, 26.842203703840827, 27.258287870275353, 27.678110301598522, 28.10168053274597, 28.529008062403893, 28.96010235337422, 29.39497283293396, 29.83362889318845, 30.276079891419332, 30.722335150426627, 31.172403958865512, 31.62629557157785, 32.08401920991837, 32.54558406207592, 33.010999283389665, 33.4802739966603, 33.953417292456834, 34.430438229418264, 34.911345834551085, 35.39614910352207, 35.88485700094671, 36.37747846067349, 36.87402238606382, 37.37449765026789, 37.87891309649659, 38.38727753828926, 38.89959975977785, 39.41588851594697, 39.93615253289054, 40.460400508064545, 40.98864111053629, 41.520882981230194, 42.05713473317016, 42.597404951718396, 43.141702194811224, 43.6900349931913, 44.24241185063697, 44.798841244188324, 45.35933162437017, 45.92389141541209, 46.49252901546552, 47.065252796817916, 47.64207110610409, 48.22299226451468, 48.808024568002054, 49.3971762874833, 49.9904556690408, 50.587870934119984, 51.189430279724725, 51.79514187861014, 52.40501387947288, 53.0190544071392, 53.637271562750364, 54.259673423945976, 54.88626804504493, 55.517063457223934, 56.15206766869424, 56.79128866487574, 57.43473440856916, 58.08241284012621, 58.734331877617365, 59.39049941699807, 60.05092333227251, 60.715611475655585, 61.38457167773311, 62.057811747619894, 62.7353394731159, 63.417162620860914, 64.10328893648692, 64.79372614476921, 65.48848194977529, 66.18756403501224, 66.89098006357258, 67.59873767827808, 68.31084450182222, 69.02730813691093, 69.74813616640164, 70.47333615344107, 71.20291564160104, 71.93688215501312, 72.67524319850172, 73.41800625771542, 74.16517879925733, 74.9167682708136, 75.67278210128072, 76.43322770089146, 77.1981124613393, 77.96744375590167, 78.74122893956174, 79.51947534912904, 80.30219030335869, 81.08938110306934, 81.88105503125999, 82.67721935322541, 83.4778813166706, 84.28304815182372, 85.09272707154808, 85.90692527145302, 86.72564993000343, 87.54890820862819, 88.3767072518277, 89.2090541872801, 90.04595612594655, 90.88742016217518, 91.73345337380438, 92.58406282226491, 93.43925555268066, 94.29903859396902, 95.16341895893969, 96.03240364439274, 96.9059996312159, 97.78421388448044, 98.6670533535366, 99.55452497210776]);\nexport var ViewingConditions = /*#__PURE__*/function () {\n  /**\n   * Parameters are intermediate values of the CAM16 conversion process. Their\n   * names are shorthand for technical color science terminology, this class\n   * would not benefit from documenting them individually. A brief overview\n   * is available in the CAM16 specification, and a complete overview requires\n   * a color science textbook, such as Fairchild's Color Appearance Models.\n   */\n  function ViewingConditions(n, aw, nbb, ncb, c, nc, rgbD, fl, fLRoot, z) {\n    _classCallCheck(this, ViewingConditions);\n    this.n = n;\n    this.aw = aw;\n    this.nbb = nbb;\n    this.ncb = ncb;\n    this.c = c;\n    this.nc = nc;\n    this.rgbD = rgbD;\n    this.fl = fl;\n    this.fLRoot = fLRoot;\n    this.z = z;\n  }\n  _createClass(ViewingConditions, null, [{\n    key: \"make\",\n    value:\n    /**\n     * Create ViewingConditions from a simple, physically relevant, set of\n     * parameters.\n     *\n     * @param whitePoint White point, measured in the XYZ color space.\n     *     default = D65, or sunny day afternoon\n     * @param adaptingLuminance The luminance of the adapting field. Informally,\n     *     how bright it is in the room where the color is viewed. Can be\n     *     calculated from lux by multiplying lux by 0.0586. default = 11.72,\n     *     or 200 lux.\n     * @param backgroundLstar The lightness of the area surrounding the color.\n     *     measured by L* in L*a*b*. default = 50.0\n     * @param surround A general description of the lighting surrounding the\n     *     color. 0 is pitch dark, like watching a movie in a theater. 1.0 is a\n     *     dimly light room, like watching TV at home at night. 2.0 means there\n     *     is no difference between the lighting on the color and around it.\n     *     default = 2.0\n     * @param discountingIlluminant Whether the eye accounts for the tint of the\n     *     ambient lighting, such as knowing an apple is still red in green light.\n     *     default = false, the eye does not perform this process on\n     *       self-luminous objects like displays.\n     */\n    function make() {\n      var whitePoint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : utils.whitePointD65();\n      var adaptingLuminance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200.0 / Math.PI * utils.yFromLstar(50.0) / 100.0;\n      var backgroundLstar = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 50.0;\n      var surround = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2.0;\n      var discountingIlluminant = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var xyz = whitePoint;\n      var rW = xyz[0] * 0.401288 + xyz[1] * 0.650173 + xyz[2] * -0.051461;\n      var gW = xyz[0] * -0.250268 + xyz[1] * 1.204414 + xyz[2] * 0.045854;\n      var bW = xyz[0] * -0.002079 + xyz[1] * 0.048952 + xyz[2] * 0.953127;\n      var f = 0.8 + surround / 10.0;\n      var c = f >= 0.9 ? math.lerp(0.59, 0.69, (f - 0.9) * 10.0) : math.lerp(0.525, 0.59, (f - 0.8) * 10.0);\n      var d = discountingIlluminant ? 1.0 : f * (1.0 - 1.0 / 3.6 * Math.exp((-adaptingLuminance - 42.0) / 92.0));\n      d = d > 1.0 ? 1.0 : d < 0.0 ? 0.0 : d;\n      var nc = f;\n      var rgbD = [d * (100.0 / rW) + 1.0 - d, d * (100.0 / gW) + 1.0 - d, d * (100.0 / bW) + 1.0 - d];\n      var k = 1.0 / (5.0 * adaptingLuminance + 1.0);\n      var k4 = k * k * k * k;\n      var k4F = 1.0 - k4;\n      var fl = k4 * adaptingLuminance + 0.1 * k4F * k4F * Math.cbrt(5.0 * adaptingLuminance);\n      var n = utils.yFromLstar(backgroundLstar) / whitePoint[1];\n      var z = 1.48 + Math.sqrt(n);\n      var nbb = 0.725 / Math.pow(n, 0.2);\n      var ncb = nbb;\n      var rgbAFactors = [Math.pow(fl * rgbD[0] * rW / 100.0, 0.42), Math.pow(fl * rgbD[1] * gW / 100.0, 0.42), Math.pow(fl * rgbD[2] * bW / 100.0, 0.42)];\n      var rgbA = [400.0 * rgbAFactors[0] / (rgbAFactors[0] + 27.13), 400.0 * rgbAFactors[1] / (rgbAFactors[1] + 27.13), 400.0 * rgbAFactors[2] / (rgbAFactors[2] + 27.13)];\n      var aw = (2.0 * rgbA[0] + rgbA[1] + 0.05 * rgbA[2]) * nbb;\n      return new ViewingConditions(n, aw, nbb, ncb, c, nc, rgbD, fl, Math.pow(fl, 0.25), z);\n    }\n  }]);\n  return ViewingConditions;\n}();\n_class2 = ViewingConditions;\n/**\n * sRGB-like viewing conditions.\n */\n_defineProperty(ViewingConditions, \"DEFAULT\", _class2.make());"],"mappings":"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AAE,iBAAiB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,E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"},"metadata":{},"sourceType":"module"}