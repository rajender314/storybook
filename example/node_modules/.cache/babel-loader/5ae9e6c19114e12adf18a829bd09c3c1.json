{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\n/** @jsx jsx */\n// eslint-disable-next-line @repo/internal/fs/filename-pattern-match\nimport { useEffect, useMemo, useState } from 'react';\nimport { css, jsx } from '@emotion/core';\nimport PersonIcon from '@atlaskit/icon/glyph/person';\nimport ShipIcon from '@atlaskit/icon/glyph/ship';\nimport { background, N90 } from '@atlaskit/theme/colors';\nimport { AVATAR_RADIUS, AVATAR_SIZES } from './constants';\nexport var ICON_BACKGROUND = \"var(--ds-text-inverse, \".concat(background(), \")\");\nexport var ICON_COLOR = \"var(--ds-text-subtlest, \".concat(N90, \")\");\nvar avatarImageStyles = css({\n  display: 'block',\n  width: '100%',\n  height: '100%',\n  backgroundColor: ICON_COLOR\n});\nvar loadingImageStyles = css({\n  display: 'flex',\n  width: '100%',\n  height: '100%',\n  flex: '1 1 100%',\n  backgroundColor: 'transparent',\n  backgroundPosition: 'center',\n  backgroundRepeat: 'no-repeat',\n  backgroundSize: 'cover'\n});\n/**\n * __Avatar image__\n *\n * An avatar image is an internal component used to control the rendering phases of an image.\n */\n\nvar AvatarImage = function AvatarImage(_ref) {\n  var _ref$alt = _ref.alt,\n    alt = _ref$alt === void 0 ? '' : _ref$alt,\n    src = _ref.src,\n    appearance = _ref.appearance,\n    size = _ref.size,\n    testId = _ref.testId;\n  var _useState = useState('initial'),\n    _useState2 = _slicedToArray(_useState, 2),\n    phase = _useState2[0],\n    setPhase = _useState2[1];\n  var borderRadius = appearance === 'circle' ? '50%' : \"\".concat(AVATAR_RADIUS[size], \"px\");\n  var image = useMemo(function () {\n    if (src) {\n      setPhase('loading');\n      var img = new Image();\n      img.onload = function () {\n        return setPhase('loaded');\n      };\n      img.onerror = function () {\n        return setPhase('error');\n      };\n      img.src = src;\n      return img;\n    }\n    return null;\n  }, [src]);\n  useEffect(function () {\n    return function () {\n      if (image) {\n        image.onload = function () {};\n        image.onerror = function () {};\n      }\n    };\n  }, [image]);\n  var imageHasLoadedAsync = src && phase !== 'loading' && phase !== 'error';\n  var imageHasLoadedSync = src && phase === 'loading' && (image === null || image === void 0 ? void 0 : image.complete);\n  var imageHasLoaded = imageHasLoadedAsync || imageHasLoadedSync;\n  if (!imageHasLoaded) {\n    return jsx(\"span\", {\n      css: [avatarImageStyles,\n      // TODO: These dynamic SVG styles can't be set in 'style'. On a refactor, use a css custom property to pass down the size\n      // eslint-disable-next-line @repo/internal/react/consistent-css-prop-usage\n      {\n        '& svg': {\n          width: \"\".concat(AVATAR_SIZES[size], \"px\"),\n          height: \"\".concat(AVATAR_SIZES[size], \"px\")\n        }\n      }]\n    }, appearance === 'circle' ? jsx(PersonIcon, {\n      label: alt,\n      primaryColor: ICON_BACKGROUND,\n      secondaryColor: ICON_COLOR,\n      testId: testId && \"\".concat(testId, \"--person\")\n    }) : jsx(ShipIcon, {\n      label: alt,\n      primaryColor: ICON_BACKGROUND,\n      secondaryColor: ICON_COLOR,\n      testId: testId && \"\".concat(testId, \"--ship\")\n    }));\n  }\n  return jsx(\"span\", {\n    css: loadingImageStyles,\n    style: {\n      backgroundImage: \"url(\\\"\".concat(src, \"\\\")\"),\n      borderRadius: borderRadius\n    },\n    role: alt ? 'img' : undefined,\n    \"aria-label\": alt || undefined,\n    \"data-testid\": testId && \"\".concat(testId, \"--image\")\n  });\n};\nexport default AvatarImage;","map":{"version":3,"names":["_slicedToArray","useEffect","useMemo","useState","css","jsx","PersonIcon","ShipIcon","background","N90","AVATAR_RADIUS","AVATAR_SIZES","ICON_BACKGROUND","concat","ICON_COLOR","avatarImageStyles","display","width","height","backgroundColor","loadingImageStyles","flex","backgroundPosition","backgroundRepeat","backgroundSize","AvatarImage","_ref","_ref$alt","alt","src","appearance","size","testId","_useState","_useState2","phase","setPhase","borderRadius","image","img","Image","onload","onerror","imageHasLoadedAsync","imageHasLoadedSync","complete","imageHasLoaded","label","primaryColor","secondaryColor","style","backgroundImage","role","undefined"],"sources":["/home/enterpi/Documents/iidm/pixel-kit/node_modules/@atlaskit/avatar/dist/esm/AvatarImage.js"],"sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\n/** @jsx jsx */\n// eslint-disable-next-line @repo/internal/fs/filename-pattern-match\nimport { useEffect, useMemo, useState } from 'react';\nimport { css, jsx } from '@emotion/core';\nimport PersonIcon from '@atlaskit/icon/glyph/person';\nimport ShipIcon from '@atlaskit/icon/glyph/ship';\nimport { background, N90 } from '@atlaskit/theme/colors';\nimport { AVATAR_RADIUS, AVATAR_SIZES } from './constants';\nexport var ICON_BACKGROUND = \"var(--ds-text-inverse, \".concat(background(), \")\");\nexport var ICON_COLOR = \"var(--ds-text-subtlest, \".concat(N90, \")\");\nvar avatarImageStyles = css({\n  display: 'block',\n  width: '100%',\n  height: '100%',\n  backgroundColor: ICON_COLOR\n});\nvar loadingImageStyles = css({\n  display: 'flex',\n  width: '100%',\n  height: '100%',\n  flex: '1 1 100%',\n  backgroundColor: 'transparent',\n  backgroundPosition: 'center',\n  backgroundRepeat: 'no-repeat',\n  backgroundSize: 'cover'\n});\n/**\n * __Avatar image__\n *\n * An avatar image is an internal component used to control the rendering phases of an image.\n */\n\nvar AvatarImage = function AvatarImage(_ref) {\n  var _ref$alt = _ref.alt,\n      alt = _ref$alt === void 0 ? '' : _ref$alt,\n      src = _ref.src,\n      appearance = _ref.appearance,\n      size = _ref.size,\n      testId = _ref.testId;\n\n  var _useState = useState('initial'),\n      _useState2 = _slicedToArray(_useState, 2),\n      phase = _useState2[0],\n      setPhase = _useState2[1];\n\n  var borderRadius = appearance === 'circle' ? '50%' : \"\".concat(AVATAR_RADIUS[size], \"px\");\n  var image = useMemo(function () {\n    if (src) {\n      setPhase('loading');\n      var img = new Image();\n\n      img.onload = function () {\n        return setPhase('loaded');\n      };\n\n      img.onerror = function () {\n        return setPhase('error');\n      };\n\n      img.src = src;\n      return img;\n    }\n\n    return null;\n  }, [src]);\n  useEffect(function () {\n    return function () {\n      if (image) {\n        image.onload = function () {};\n\n        image.onerror = function () {};\n      }\n    };\n  }, [image]);\n  var imageHasLoadedAsync = src && phase !== 'loading' && phase !== 'error';\n  var imageHasLoadedSync = src && phase === 'loading' && (image === null || image === void 0 ? void 0 : image.complete);\n  var imageHasLoaded = imageHasLoadedAsync || imageHasLoadedSync;\n\n  if (!imageHasLoaded) {\n    return jsx(\"span\", {\n      css: [avatarImageStyles, // TODO: These dynamic SVG styles can't be set in 'style'. On a refactor, use a css custom property to pass down the size\n      // eslint-disable-next-line @repo/internal/react/consistent-css-prop-usage\n      {\n        '& svg': {\n          width: \"\".concat(AVATAR_SIZES[size], \"px\"),\n          height: \"\".concat(AVATAR_SIZES[size], \"px\")\n        }\n      }]\n    }, appearance === 'circle' ? jsx(PersonIcon, {\n      label: alt,\n      primaryColor: ICON_BACKGROUND,\n      secondaryColor: ICON_COLOR,\n      testId: testId && \"\".concat(testId, \"--person\")\n    }) : jsx(ShipIcon, {\n      label: alt,\n      primaryColor: ICON_BACKGROUND,\n      secondaryColor: ICON_COLOR,\n      testId: testId && \"\".concat(testId, \"--ship\")\n    }));\n  }\n\n  return jsx(\"span\", {\n    css: loadingImageStyles,\n    style: {\n      backgroundImage: \"url(\\\"\".concat(src, \"\\\")\"),\n      borderRadius: borderRadius\n    },\n    role: alt ? 'img' : undefined,\n    \"aria-label\": alt || undefined,\n    \"data-testid\": testId && \"\".concat(testId, \"--image\")\n  });\n};\n\nexport default AvatarImage;"],"mappings":"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"},"metadata":{},"sourceType":"module"}