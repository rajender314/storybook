{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useCallback, useContext, useState } from 'react';\nimport { CheckboxGroupContext } from '../context/checkbox-group-context';\nimport { SelectionStoreContext } from '../context/selection-store';\n/**\n * Custom hook to handle checkbox state for dropdown menu.\n * It works in tandem with the selection store context when the\n * component is uncontrolled.\n */\nvar useCheckboxState = function useCheckboxState(_ref) {\n  var isSelected = _ref.isSelected,\n    id = _ref.id,\n    defaultSelected = _ref.defaultSelected;\n  var _useContext = useContext(SelectionStoreContext),\n    setItemState = _useContext.setItemState,\n    getItemState = _useContext.getItemState;\n  var groupId = useContext(CheckboxGroupContext);\n  var persistedIsSelected = getItemState(groupId, id);\n  var _useState = useState(\n    // Initial state is set depending on value being defined or not.\n    // This state is only utilised if the checkbox is uncontrolled.\n    function () {\n      return persistedIsSelected !== undefined ? persistedIsSelected : defaultSelected || false;\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    localIsSelected = _useState2[0],\n    setLocalIsSelected = _useState2[1];\n  var setLocalState = useCallback(function (newValue) {\n    var nextValue = newValue(persistedIsSelected);\n    setLocalIsSelected(nextValue);\n    setItemState(groupId, id, nextValue);\n  }, [setItemState, persistedIsSelected, groupId, id]);\n\n  // Checkbox is controlled - do nothing!\n  if (typeof isSelected === 'boolean') {\n    return [isSelected, function () {\n      return false;\n    }];\n  }\n\n  // Checkbox is going through its first render pass!\n  if (persistedIsSelected === undefined) {\n    // Set the item so we have this state to access next time the checkbox renders (either by mounting or re-rendering!)\n    setItemState(groupId, id, defaultSelected || false);\n  }\n\n  // Return the value and setter!\n  // Remember this flow is only returned if the checkbox is uncontrolled.\n  return [localIsSelected, setLocalState];\n};\nexport default useCheckboxState;","map":{"version":3,"names":["_slicedToArray","useCallback","useContext","useState","CheckboxGroupContext","SelectionStoreContext","useCheckboxState","_ref","isSelected","id","defaultSelected","_useContext","setItemState","getItemState","groupId","persistedIsSelected","_useState","undefined","_useState2","localIsSelected","setLocalIsSelected","setLocalState","newValue","nextValue"],"sources":["/home/enterpi/Documents/iidm/pixel-kit/node_modules/@atlaskit/dropdown-menu/dist/esm/internal/hooks/use-checkbox-state.js"],"sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useCallback, useContext, useState } from 'react';\nimport { CheckboxGroupContext } from '../context/checkbox-group-context';\nimport { SelectionStoreContext } from '../context/selection-store';\n/**\n * Custom hook to handle checkbox state for dropdown menu.\n * It works in tandem with the selection store context when the\n * component is uncontrolled.\n */\nvar useCheckboxState = function useCheckboxState(_ref) {\n  var isSelected = _ref.isSelected,\n    id = _ref.id,\n    defaultSelected = _ref.defaultSelected;\n  var _useContext = useContext(SelectionStoreContext),\n    setItemState = _useContext.setItemState,\n    getItemState = _useContext.getItemState;\n  var groupId = useContext(CheckboxGroupContext);\n  var persistedIsSelected = getItemState(groupId, id);\n  var _useState = useState(\n    // Initial state is set depending on value being defined or not.\n    // This state is only utilised if the checkbox is uncontrolled.\n    function () {\n      return persistedIsSelected !== undefined ? persistedIsSelected : defaultSelected || false;\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    localIsSelected = _useState2[0],\n    setLocalIsSelected = _useState2[1];\n  var setLocalState = useCallback(function (newValue) {\n    var nextValue = newValue(persistedIsSelected);\n    setLocalIsSelected(nextValue);\n    setItemState(groupId, id, nextValue);\n  }, [setItemState, persistedIsSelected, groupId, id]);\n\n  // Checkbox is controlled - do nothing!\n  if (typeof isSelected === 'boolean') {\n    return [isSelected, function () {\n      return false;\n    }];\n  }\n\n  // Checkbox is going through its first render pass!\n  if (persistedIsSelected === undefined) {\n    // Set the item so we have this state to access next time the checkbox renders (either by mounting or re-rendering!)\n    setItemState(groupId, id, defaultSelected || false);\n  }\n\n  // Return the value and setter!\n  // Remember this flow is only returned if the checkbox is uncontrolled.\n  return [localIsSelected, setLocalState];\n};\nexport default useCheckboxState;"],"mappings":"AAAA,OAAOA,cAAc,MAAM,sCAAsC;AACjE,SAASC,WAAW,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AACzD,SAASC,oBAAoB,QAAQ,mCAAmC;AACxE,SAASC,qBAAqB,QAAQ,4BAA4B;AAClE;AACA;AACA;AACA;AACA;AACA,IAAIC,gBAAgB,GAAG,SAASA,gBAAgBA,CAACC,IAAI,EAAE;EACrD,IAAIC,UAAU,GAAGD,IAAI,CAACC,UAAU;IAC9BC,EAAE,GAAGF,IAAI,CAACE,EAAE;IACZC,eAAe,GAAGH,IAAI,CAACG,eAAe;EACxC,IAAIC,WAAW,GAAGT,UAAU,CAACG,qBAAqB,CAAC;IACjDO,YAAY,GAAGD,WAAW,CAACC,YAAY;IACvCC,YAAY,GAAGF,WAAW,CAACE,YAAY;EACzC,IAAIC,OAAO,GAAGZ,UAAU,CAACE,oBAAoB,CAAC;EAC9C,IAAIW,mBAAmB,GAAGF,YAAY,CAACC,OAAO,EAAEL,EAAE,CAAC;EACnD,IAAIO,SAAS,GAAGb,QAAQ;IACtB;IACA;IACA,YAAY;MACV,OAAOY,mBAAmB,KAAKE,SAAS,GAAGF,mBAAmB,GAAGL,eAAe,IAAI,KAAK;IAC3F,CAAC,CAAC;IACFQ,UAAU,GAAGlB,cAAc,CAACgB,SAAS,EAAE,CAAC,CAAC;IACzCG,eAAe,GAAGD,UAAU,CAAC,CAAC,CAAC;IAC/BE,kBAAkB,GAAGF,UAAU,CAAC,CAAC,CAAC;EACpC,IAAIG,aAAa,GAAGpB,WAAW,CAAC,UAAUqB,QAAQ,EAAE;IAClD,IAAIC,SAAS,GAAGD,QAAQ,CAACP,mBAAmB,CAAC;IAC7CK,kBAAkB,CAACG,SAAS,CAAC;IAC7BX,YAAY,CAACE,OAAO,EAAEL,EAAE,EAAEc,SAAS,CAAC;EACtC,CAAC,EAAE,CAACX,YAAY,EAAEG,mBAAmB,EAAED,OAAO,EAAEL,EAAE,CAAC,CAAC;;EAEpD;EACA,IAAI,OAAOD,UAAU,KAAK,SAAS,EAAE;IACnC,OAAO,CAACA,UAAU,EAAE,YAAY;MAC9B,OAAO,KAAK;IACd,CAAC,CAAC;EACJ;;EAEA;EACA,IAAIO,mBAAmB,KAAKE,SAAS,EAAE;IACrC;IACAL,YAAY,CAACE,OAAO,EAAEL,EAAE,EAAEC,eAAe,IAAI,KAAK,CAAC;EACrD;;EAEA;EACA;EACA,OAAO,CAACS,eAAe,EAAEE,aAAa,CAAC;AACzC,CAAC;AACD,eAAef,gBAAgB"},"metadata":{},"sourceType":"module"}