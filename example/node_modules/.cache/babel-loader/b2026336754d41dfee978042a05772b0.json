{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"as\", \"children\", \"backgroundColor\", \"padding\", \"paddingBlock\", \"paddingBlockStart\", \"paddingBlockEnd\", \"paddingInline\", \"paddingInlineStart\", \"paddingInlineEnd\", \"style\", \"testId\", \"xcss\"],\n  _excluded2 = [\"className\"];\n/** @jsx jsx */\nimport { forwardRef } from 'react';\nimport { css, jsx } from '@emotion/react';\nimport { backgroundColorStylesMap, isSurfaceColorToken, paddingStylesMap, surfaceColorStylesMap } from '../xcss/style-maps.partial';\nimport { parseXcss } from '../xcss/xcss';\nimport { SurfaceContext } from './internal/surface-provider';\n\n// Can either Exclude or Extract - here we're excluding all SVG-related elements\n\n// Basically just ElementType but without ComponentType, it makes sense to keep the \"Type\" suffix\n// eslint-disable-next-line @repo/internal/react/consistent-types-definitions\n/**\n * __Box__\n *\n * A Box is a primitive component that has the design decisions of the Atlassian Design System baked in.\n * Renders a `div` by default.\n *\n * - [Examples](https://atlassian.design/components/primitives/box/examples)\n * - [Code](https://atlassian.design/components/primitives/box/code)\n * - [Usage](https://atlassian.design/components/primitives/box/usage)\n */\nexport var Box = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var _ref$as = _ref.as,\n    as = _ref$as === void 0 ? 'div' : _ref$as,\n    children = _ref.children,\n    backgroundColor = _ref.backgroundColor,\n    padding = _ref.padding,\n    paddingBlock = _ref.paddingBlock,\n    paddingBlockStart = _ref.paddingBlockStart,\n    paddingBlockEnd = _ref.paddingBlockEnd,\n    paddingInline = _ref.paddingInline,\n    paddingInlineStart = _ref.paddingInlineStart,\n    paddingInlineEnd = _ref.paddingInlineEnd,\n    style = _ref.style,\n    testId = _ref.testId,\n    xcss = _ref.xcss,\n    htmlAttributes = _objectWithoutProperties(_ref, _excluded);\n  var Component = as;\n  // This is to remove className from safeHtmlAttributes\n  // @ts-expect-error className doesn't exist in the prop definition but we want to ensure it cannot be applied even if types are bypassed\n  var _spreadClass = htmlAttributes.className,\n    safeHtmlAttributes = _objectWithoutProperties(htmlAttributes, _excluded2);\n  var className = xcss && parseXcss(xcss);\n  var node =\n  // @ts-expect-error Expression produces a union type that is too complex to represent. I think this is unavoidable\n  jsx(Component, _extends({\n    style: style\n    // @ts-expect-error Expression produces a union type that is too complex to represent. We may be able to narrow the type here but unsure.\n    ,\n\n    ref: ref\n    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props\n  }, safeHtmlAttributes, {\n    css: [baseStyles, backgroundColor && backgroundColorStylesMap[backgroundColor], isSurfaceColorToken(backgroundColor) && surfaceColorStylesMap[backgroundColor], padding && paddingStylesMap.padding[padding], paddingBlock && paddingStylesMap.paddingBlock[paddingBlock], paddingBlockStart && paddingStylesMap.paddingBlockStart[paddingBlockStart], paddingBlockEnd && paddingStylesMap.paddingBlockEnd[paddingBlockEnd], paddingInline && paddingStylesMap.paddingInline[paddingInline], paddingInlineStart && paddingStylesMap.paddingInlineStart[paddingInlineStart], paddingInlineEnd && paddingStylesMap.paddingInlineEnd[paddingInlineEnd],\n    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage\n    className],\n    \"data-testid\": testId\n  }), children);\n  return backgroundColor ? jsx(SurfaceContext.Provider, {\n    value: backgroundColor\n  }, node) : node;\n});\nexport default Box;\nvar baseStyles = css({\n  boxSizing: 'border-box',\n  appearance: 'none',\n  border: 'none'\n});","map":{"version":3,"names":["_extends","_objectWithoutProperties","_excluded","_excluded2","forwardRef","css","jsx","backgroundColorStylesMap","isSurfaceColorToken","paddingStylesMap","surfaceColorStylesMap","parseXcss","SurfaceContext","Box","_ref","ref","_ref$as","as","children","backgroundColor","padding","paddingBlock","paddingBlockStart","paddingBlockEnd","paddingInline","paddingInlineStart","paddingInlineEnd","style","testId","xcss","htmlAttributes","Component","_spreadClass","className","safeHtmlAttributes","node","baseStyles","Provider","value","boxSizing","appearance","border"],"sources":["/home/enterpi/Documents/iidm/pixel-kit/node_modules/@atlaskit/primitives/dist/esm/components/box.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"as\", \"children\", \"backgroundColor\", \"padding\", \"paddingBlock\", \"paddingBlockStart\", \"paddingBlockEnd\", \"paddingInline\", \"paddingInlineStart\", \"paddingInlineEnd\", \"style\", \"testId\", \"xcss\"],\n  _excluded2 = [\"className\"];\n/** @jsx jsx */\nimport { forwardRef } from 'react';\nimport { css, jsx } from '@emotion/react';\nimport { backgroundColorStylesMap, isSurfaceColorToken, paddingStylesMap, surfaceColorStylesMap } from '../xcss/style-maps.partial';\nimport { parseXcss } from '../xcss/xcss';\nimport { SurfaceContext } from './internal/surface-provider';\n\n// Can either Exclude or Extract - here we're excluding all SVG-related elements\n\n// Basically just ElementType but without ComponentType, it makes sense to keep the \"Type\" suffix\n// eslint-disable-next-line @repo/internal/react/consistent-types-definitions\n/**\n * __Box__\n *\n * A Box is a primitive component that has the design decisions of the Atlassian Design System baked in.\n * Renders a `div` by default.\n *\n * - [Examples](https://atlassian.design/components/primitives/box/examples)\n * - [Code](https://atlassian.design/components/primitives/box/code)\n * - [Usage](https://atlassian.design/components/primitives/box/usage)\n */\nexport var Box = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var _ref$as = _ref.as,\n    as = _ref$as === void 0 ? 'div' : _ref$as,\n    children = _ref.children,\n    backgroundColor = _ref.backgroundColor,\n    padding = _ref.padding,\n    paddingBlock = _ref.paddingBlock,\n    paddingBlockStart = _ref.paddingBlockStart,\n    paddingBlockEnd = _ref.paddingBlockEnd,\n    paddingInline = _ref.paddingInline,\n    paddingInlineStart = _ref.paddingInlineStart,\n    paddingInlineEnd = _ref.paddingInlineEnd,\n    style = _ref.style,\n    testId = _ref.testId,\n    xcss = _ref.xcss,\n    htmlAttributes = _objectWithoutProperties(_ref, _excluded);\n  var Component = as;\n  // This is to remove className from safeHtmlAttributes\n  // @ts-expect-error className doesn't exist in the prop definition but we want to ensure it cannot be applied even if types are bypassed\n  var _spreadClass = htmlAttributes.className,\n    safeHtmlAttributes = _objectWithoutProperties(htmlAttributes, _excluded2);\n  var className = xcss && parseXcss(xcss);\n  var node =\n  // @ts-expect-error Expression produces a union type that is too complex to represent. I think this is unavoidable\n  jsx(Component, _extends({\n    style: style\n    // @ts-expect-error Expression produces a union type that is too complex to represent. We may be able to narrow the type here but unsure.\n    ,\n    ref: ref\n    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props\n  }, safeHtmlAttributes, {\n    css: [baseStyles, backgroundColor && backgroundColorStylesMap[backgroundColor], isSurfaceColorToken(backgroundColor) && surfaceColorStylesMap[backgroundColor], padding && paddingStylesMap.padding[padding], paddingBlock && paddingStylesMap.paddingBlock[paddingBlock], paddingBlockStart && paddingStylesMap.paddingBlockStart[paddingBlockStart], paddingBlockEnd && paddingStylesMap.paddingBlockEnd[paddingBlockEnd], paddingInline && paddingStylesMap.paddingInline[paddingInline], paddingInlineStart && paddingStylesMap.paddingInlineStart[paddingInlineStart], paddingInlineEnd && paddingStylesMap.paddingInlineEnd[paddingInlineEnd],\n    // eslint-disable-next-line @atlaskit/design-system/consistent-css-prop-usage\n    className],\n    \"data-testid\": testId\n  }), children);\n  return backgroundColor ? jsx(SurfaceContext.Provider, {\n    value: backgroundColor\n  }, node) : node;\n});\nexport default Box;\nvar baseStyles = css({\n  boxSizing: 'border-box',\n  appearance: 'none',\n  border: 'none'\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}