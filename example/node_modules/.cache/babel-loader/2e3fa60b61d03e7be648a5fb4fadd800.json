{"ast":null,"code":"import React, { useContext, useEffect, useRef } from 'react';\nimport { WaitContext } from './context';\nexport const LazyWait = ({\n  until,\n  children\n}) => {\n  const closestWait = useContext(WaitContext);\n  const value = useRef(until && closestWait.currentValue() ? 1 : 0);\n  const subscribers = useRef(new Set());\n  const api = useRef({\n    subscribe: subscriber => {\n      subscribers.current.add(subscriber);\n      return () => {\n        subscribers.current.delete(subscriber);\n      };\n    },\n    currentValue: () => value.current\n  });\n  useEffect(() => {\n    // Notify subscribers when until prop or closest until value changes\n    const notify = () => {\n      value.current = closestWait.currentValue() && until ? 1 : 0;\n      subscribers.current.forEach(subscriber => subscriber());\n    };\n    notify();\n    return closestWait.subscribe(notify);\n  }, [closestWait, until]);\n  return /*#__PURE__*/React.createElement(WaitContext.Provider, {\n    value: api.current\n  }, children);\n};","map":{"version":3,"names":["React","useContext","useEffect","useRef","WaitContext","LazyWait","until","children","closestWait","value","currentValue","subscribers","Set","api","subscribe","subscriber","current","add","delete","notify","forEach","createElement","Provider"],"sources":["../../../src/lazy-wait/main.tsx"],"sourcesContent":["import React, { useContext, useEffect, useRef } from 'react';\nimport type { ReactNode } from 'react';\n\nimport type { SubscriptionContextValue } from '../lazy/types';\n\nimport { WaitContext } from './context';\n\nexport type LazyWaitProps = {\n  until: boolean;\n  children: ReactNode;\n};\n\nexport const LazyWait = ({ until, children }: LazyWaitProps) => {\n  const closestWait = useContext(WaitContext);\n  const value = useRef(until && closestWait.currentValue() ? 1 : 0);\n  const subscribers = useRef<Set<() => void>>(new Set());\n  const api = useRef<SubscriptionContextValue>({\n    subscribe: subscriber => {\n      subscribers.current.add(subscriber);\n\n      return () => {\n        subscribers.current.delete(subscriber);\n      };\n    },\n    currentValue: () => value.current,\n  });\n\n  useEffect(() => {\n    // Notify subscribers when until prop or closest until value changes\n    const notify = () => {\n      value.current = closestWait.currentValue() && until ? 1 : 0;\n      subscribers.current.forEach(subscriber => subscriber());\n    };\n\n    notify();\n\n    return closestWait.subscribe(notify);\n  }, [closestWait, until]);\n\n  return (\n    <WaitContext.Provider value={api.current}>{children}</WaitContext.Provider>\n  );\n};\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,MAAvC,QAAqD,OAArD;AAKA,SAASC,WAAT,QAA4B,WAA5B;AAOA,OAAO,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,KAAF;EAASC;AAAT,CAAD,KAAwC;EAC9D,MAAMC,WAAW,GAAGP,UAAU,CAACG,WAAD,CAA9B;EACA,MAAMK,KAAK,GAAGN,MAAM,CAACG,KAAK,IAAIE,WAAW,CAACE,YAAZ,EAAT,GAAsC,CAAtC,GAA0C,CAA3C,CAApB;EACA,MAAMC,WAAW,GAAGR,MAAM,CAAkB,IAAIS,GAAJ,EAAlB,CAA1B;EACA,MAAMC,GAAG,GAAGV,MAAM,CAA2B;IAC3CW,SAAS,EAAEC,UAAU,IAAI;MACvBJ,WAAW,CAACK,OAAZ,CAAoBC,GAApB,CAAwBF,UAAxB;MAEA,OAAO,MAAM;QACXJ,WAAW,CAACK,OAAZ,CAAoBE,MAApB,CAA2BH,UAA3B;MACD,CAFD;IAGD,CAP0C;IAQ3CL,YAAY,EAAEA,CAAA,KAAMD,KAAK,CAACO;EARiB,CAA3B,CAAlB;EAWAd,SAAS,CAAC,MAAM;IACd;IACA,MAAMiB,MAAM,GAAGA,CAAA,KAAM;MACnBV,KAAK,CAACO,OAAN,GAAgBR,WAAW,CAACE,YAAZ,MAA8BJ,KAA9B,GAAsC,CAAtC,GAA0C,CAA1D;MACAK,WAAW,CAACK,OAAZ,CAAoBI,OAApB,CAA4BL,UAAU,IAAIA,UAAU,EAApD;IACD,CAHD;IAKAI,MAAM;IAEN,OAAOX,WAAW,CAACM,SAAZ,CAAsBK,MAAtB,CAAP;EACD,CAVQ,EAUN,CAACX,WAAD,EAAcF,KAAd,CAVM,CAAT;EAYA,oBACEN,KAAA,CAAAqB,aAAA,CAACjB,WAAD,CAAakB,QAAb;IAAsBb,KAAK,EAAEI,GAAG,CAACG;EAAjC,GAA2CT,QAA3C,CADF;AAGD,CA9BM"},"metadata":{},"sourceType":"module"}