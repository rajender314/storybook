{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { bind as _bind } from 'bind-event-listener';\nimport { CONTRAST_MODE_ATTRIBUTE } from '../constants';\nimport { moreContrastMediaQuery } from './theme-loading';\nvar isMatchMediaAvailable = typeof window !== 'undefined' && 'matchMedia' in window;\n\n/**\n * Updates the current theme when the system contrast preference changes. Should be bound\n * to an event listener listening on the '(prefers-contrast: more)' query\n * @param e The event representing a change in system theme.\n */\nfunction checkNativeListener(e) {\n  var element = document.documentElement;\n  element.setAttribute(CONTRAST_MODE_ATTRIBUTE, e.matches ? 'more' : 'no-preference');\n}\nvar contrastModeMql = isMatchMediaAvailable && window.matchMedia(moreContrastMediaQuery);\nvar ContrastModeObserver = /*#__PURE__*/function () {\n  function ContrastModeObserver() {\n    _classCallCheck(this, ContrastModeObserver);\n    _defineProperty(this, \"unbindContrastChangeListener\", null);\n  }\n  _createClass(ContrastModeObserver, [{\n    key: \"getContrastMode\",\n    value: function getContrastMode() {\n      if (!contrastModeMql) {\n        return 'no-preference';\n      }\n      return contrastModeMql !== null && contrastModeMql !== void 0 && contrastModeMql.matches ? 'more' : 'no-preference';\n    }\n  }, {\n    key: \"bind\",\n    value: function bind() {\n      if (contrastModeMql && this.unbindContrastChangeListener === null) {\n        this.unbindContrastChangeListener = _bind(contrastModeMql, {\n          type: 'change',\n          listener: checkNativeListener\n        });\n      }\n    }\n  }, {\n    key: \"unbind\",\n    value: function unbind() {\n      if (this.unbindContrastChangeListener) {\n        this.unbindContrastChangeListener();\n        this.unbindContrastChangeListener = null;\n      }\n    }\n  }]);\n  return ContrastModeObserver;\n}();\n/**\n * A singleton contrast mode observer - binds \"auto\" switching logic to a single `mediaQueryList` listener\n * that can be unbound by any consumer when no longer needed.\n */\nvar SingletonContrastModeObserver = new ContrastModeObserver();\nexport default SingletonContrastModeObserver;","map":{"version":3,"names":["_classCallCheck","_createClass","_defineProperty","bind","_bind","CONTRAST_MODE_ATTRIBUTE","moreContrastMediaQuery","isMatchMediaAvailable","window","checkNativeListener","e","element","document","documentElement","setAttribute","matches","contrastModeMql","matchMedia","ContrastModeObserver","key","value","getContrastMode","unbindContrastChangeListener","type","listener","unbind","SingletonContrastModeObserver"],"sources":["/home/enterpi/Documents/iidm/pixel-kit/node_modules/@atlaskit/drawer/node_modules/@atlaskit/tokens/dist/esm/utils/contrast-mode-listeners.js"],"sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { bind as _bind } from 'bind-event-listener';\nimport { CONTRAST_MODE_ATTRIBUTE } from '../constants';\nimport { moreContrastMediaQuery } from './theme-loading';\nvar isMatchMediaAvailable = typeof window !== 'undefined' && 'matchMedia' in window;\n\n/**\n * Updates the current theme when the system contrast preference changes. Should be bound\n * to an event listener listening on the '(prefers-contrast: more)' query\n * @param e The event representing a change in system theme.\n */\nfunction checkNativeListener(e) {\n  var element = document.documentElement;\n  element.setAttribute(CONTRAST_MODE_ATTRIBUTE, e.matches ? 'more' : 'no-preference');\n}\nvar contrastModeMql = isMatchMediaAvailable && window.matchMedia(moreContrastMediaQuery);\nvar ContrastModeObserver = /*#__PURE__*/function () {\n  function ContrastModeObserver() {\n    _classCallCheck(this, ContrastModeObserver);\n    _defineProperty(this, \"unbindContrastChangeListener\", null);\n  }\n  _createClass(ContrastModeObserver, [{\n    key: \"getContrastMode\",\n    value: function getContrastMode() {\n      if (!contrastModeMql) {\n        return 'no-preference';\n      }\n      return contrastModeMql !== null && contrastModeMql !== void 0 && contrastModeMql.matches ? 'more' : 'no-preference';\n    }\n  }, {\n    key: \"bind\",\n    value: function bind() {\n      if (contrastModeMql && this.unbindContrastChangeListener === null) {\n        this.unbindContrastChangeListener = _bind(contrastModeMql, {\n          type: 'change',\n          listener: checkNativeListener\n        });\n      }\n    }\n  }, {\n    key: \"unbind\",\n    value: function unbind() {\n      if (this.unbindContrastChangeListener) {\n        this.unbindContrastChangeListener();\n        this.unbindContrastChangeListener = null;\n      }\n    }\n  }]);\n  return ContrastModeObserver;\n}();\n/**\n * A singleton contrast mode observer - binds \"auto\" switching logic to a single `mediaQueryList` listener\n * that can be unbound by any consumer when no longer needed.\n */\nvar SingletonContrastModeObserver = new ContrastModeObserver();\nexport default SingletonContrastModeObserver;"],"mappings":"AAAA,OAAOA,eAAe,MAAM,uCAAuC;AACnE,OAAOC,YAAY,MAAM,oCAAoC;AAC7D,OAAOC,eAAe,MAAM,uCAAuC;AACnE,SAASC,IAAI,IAAIC,KAAK,QAAQ,qBAAqB;AACnD,SAASC,uBAAuB,QAAQ,cAAc;AACtD,SAASC,sBAAsB,QAAQ,iBAAiB;AACxD,IAAIC,qBAAqB,GAAG,OAAOC,MAAM,KAAK,WAAW,IAAI,YAAY,IAAIA,MAAM;;AAEnF;AACA;AACA;AACA;AACA;AACA,SAASC,mBAAmBA,CAACC,CAAC,EAAE;EAC9B,IAAIC,OAAO,GAAGC,QAAQ,CAACC,eAAe;EACtCF,OAAO,CAACG,YAAY,CAACT,uBAAuB,EAAEK,CAAC,CAACK,OAAO,GAAG,MAAM,GAAG,eAAe,CAAC;AACrF;AACA,IAAIC,eAAe,GAAGT,qBAAqB,IAAIC,MAAM,CAACS,UAAU,CAACX,sBAAsB,CAAC;AACxF,IAAIY,oBAAoB,GAAG,aAAa,YAAY;EAClD,SAASA,oBAAoBA,CAAA,EAAG;IAC9BlB,eAAe,CAAC,IAAI,EAAEkB,oBAAoB,CAAC;IAC3ChB,eAAe,CAAC,IAAI,EAAE,8BAA8B,EAAE,IAAI,CAAC;EAC7D;EACAD,YAAY,CAACiB,oBAAoB,EAAE,CAAC;IAClCC,GAAG,EAAE,iBAAiB;IACtBC,KAAK,EAAE,SAASC,eAAeA,CAAA,EAAG;MAChC,IAAI,CAACL,eAAe,EAAE;QACpB,OAAO,eAAe;MACxB;MACA,OAAOA,eAAe,KAAK,IAAI,IAAIA,eAAe,KAAK,KAAK,CAAC,IAAIA,eAAe,CAACD,OAAO,GAAG,MAAM,GAAG,eAAe;IACrH;EACF,CAAC,EAAE;IACDI,GAAG,EAAE,MAAM;IACXC,KAAK,EAAE,SAASjB,IAAIA,CAAA,EAAG;MACrB,IAAIa,eAAe,IAAI,IAAI,CAACM,4BAA4B,KAAK,IAAI,EAAE;QACjE,IAAI,CAACA,4BAA4B,GAAGlB,KAAK,CAACY,eAAe,EAAE;UACzDO,IAAI,EAAE,QAAQ;UACdC,QAAQ,EAAEf;QACZ,CAAC,CAAC;MACJ;IACF;EACF,CAAC,EAAE;IACDU,GAAG,EAAE,QAAQ;IACbC,KAAK,EAAE,SAASK,MAAMA,CAAA,EAAG;MACvB,IAAI,IAAI,CAACH,4BAA4B,EAAE;QACrC,IAAI,CAACA,4BAA4B,CAAC,CAAC;QACnC,IAAI,CAACA,4BAA4B,GAAG,IAAI;MAC1C;IACF;EACF,CAAC,CAAC,CAAC;EACH,OAAOJ,oBAAoB;AAC7B,CAAC,CAAC,CAAC;AACH;AACA;AACA;AACA;AACA,IAAIQ,6BAA6B,GAAG,IAAIR,oBAAoB,CAAC,CAAC;AAC9D,eAAeQ,6BAA6B"},"metadata":{},"sourceType":"module"}